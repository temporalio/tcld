// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: temporal/api/cloud/cloudservice/v1/service.proto

package cloudservice

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("temporal/api/cloud/cloudservice/v1/service.proto", fileDescriptor_9201a2f120d8d47c)
}

var fileDescriptor_9201a2f120d8d47c = []byte{
	// 757 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x96, 0xcd, 0x6b, 0x13, 0x41,
	0x18, 0xc6, 0x33, 0x1e, 0xfc, 0x18, 0x5a, 0x42, 0x87, 0x6a, 0x6b, 0xac, 0x63, 0x59, 0x41, 0x69,
	0xa1, 0xbb, 0xf6, 0x23, 0xda, 0x0f, 0x0b, 0xa6, 0x15, 0xe3, 0x49, 0xa1, 0xa5, 0x17, 0x2f, 0x65,
	0xbb, 0x1d, 0xe2, 0x62, 0x9a, 0x59, 0x67, 0x26, 0x01, 0x09, 0x05, 0xf1, 0xec, 0x41, 0xa8, 0x5e,
	0x44, 0xd0, 0xa3, 0x5e, 0x05, 0xff, 0x00, 0x6f, 0x82, 0x97, 0x82, 0x97, 0x1e, 0xcd, 0xd6, 0x83,
	0xc7, 0x1e, 0x3d, 0xca, 0xce, 0xce, 0x24, 0x9b, 0xf4, 0x23, 0x3b, 0xe9, 0x25, 0xd9, 0x6c, 0xde,
	0xe7, 0x99, 0xdf, 0x33, 0xef, 0xcc, 0xec, 0xc2, 0x5b, 0x82, 0x6c, 0x05, 0x94, 0xb9, 0x65, 0xc7,
	0x0d, 0x7c, 0xc7, 0x2b, 0xd3, 0xea, 0x66, 0xfc, 0xc9, 0x09, 0xab, 0xf9, 0x1e, 0x71, 0x6a, 0x93,
	0x8e, 0xba, 0xb4, 0x03, 0x46, 0x05, 0x45, 0x96, 0x56, 0xd8, 0x6e, 0xe0, 0xdb, 0xb2, 0xd6, 0x4e,
	0x2a, 0xec, 0xda, 0x64, 0x6e, 0x2e, 0x85, 0x2b, 0x23, 0xcf, 0xab, 0x84, 0x8b, 0x75, 0x46, 0x78,
	0x40, 0x2b, 0x5c, 0xd9, 0xe7, 0x46, 0x4a, 0x94, 0x96, 0xca, 0x44, 0x0a, 0xdd, 0x4a, 0x85, 0x0a,
	0x57, 0xf8, 0xb4, 0xc2, 0xe3, 0x7f, 0xa7, 0x7e, 0x0e, 0xc2, 0xbe, 0xe5, 0xc8, 0x68, 0x35, 0x36,
	0x42, 0xaf, 0x01, 0x3c, 0x5f, 0x24, 0x62, 0x8d, 0x13, 0xc6, 0xd1, 0xb4, 0xdd, 0x9d, 0xcd, 0xd6,
	0xd5, 0x2b, 0xf1, 0xf8, 0xb9, 0x19, 0x33, 0x51, 0x0c, 0x6b, 0x5d, 0x7c, 0xf5, 0xeb, 0xcf, 0xce,
	0x99, 0x2c, 0xea, 0x97, 0xa0, 0xb5, 0x49, 0xa7, 0x2a, 0x09, 0x76, 0x00, 0x3c, 0xa7, 0x6a, 0xd1,
	0x94, 0x81, 0xb1, 0x86, 0x99, 0x36, 0xd2, 0x28, 0x96, 0x6b, 0x92, 0xe5, 0x32, 0x1a, 0x6a, 0x63,
	0x71, 0xea, 0xd1, 0xd7, 0xba, 0xbf, 0xb9, 0x8d, 0xde, 0x01, 0x08, 0x97, 0x19, 0x71, 0x05, 0x91,
	0x60, 0xf9, 0x34, 0x83, 0xb4, 0xea, 0x35, 0xdb, 0x6d, 0x53, 0x99, 0xc2, 0x1b, 0x96, 0x78, 0xc8,
	0x6a, 0x9f, 0xaa, 0x79, 0x30, 0x8e, 0x3e, 0x02, 0x08, 0xd7, 0x82, 0x4d, 0x23, 0xae, 0x56, 0xbd,
	0x11, 0x57, 0x52, 0xa6, 0xb8, 0x2c, 0xc9, 0x35, 0x62, 0x1d, 0x37, 0x6d, 0x11, 0xe1, 0x07, 0x00,
	0xe1, 0x7d, 0x52, 0x26, 0x26, 0x84, 0xad, 0x7a, 0x23, 0xc2, 0xa4, 0xac, 0xbd, 0xb1, 0xe3, 0xc7,
	0x36, 0xb6, 0x01, 0xe0, 0xa5, 0xd5, 0x78, 0x35, 0x3c, 0x72, 0xb7, 0x08, 0x0f, 0x5c, 0x8f, 0x14,
	0x3c, 0x8f, 0x70, 0x8e, 0x0a, 0x69, 0xc6, 0x3c, 0x5a, 0xab, 0xb1, 0x97, 0x4e, 0x63, 0xa1, 0x22,
	0xdc, 0x93, 0x11, 0xe6, 0xad, 0xbc, 0x8e, 0x50, 0xd1, 0x85, 0xdc, 0xa9, 0x37, 0xaf, 0xb7, 0x3b,
	0x93, 0x39, 0xae, 0xb4, 0x89, 0x5a, 0xf0, 0x1d, 0xc0, 0x81, 0x22, 0x11, 0x05, 0xfe, 0xa2, 0xe2,
	0x3d, 0x0e, 0x08, 0x93, 0xe7, 0x01, 0xba, 0x9b, 0x72, 0xa3, 0xb4, 0xcb, 0x74, 0xb2, 0xc5, 0x1e,
	0xd5, 0x2a, 0x94, 0x23, 0x43, 0x8d, 0xa1, 0x9b, 0x3a, 0x14, 0xd5, 0x25, 0xdc, 0xa9, 0xbb, 0x91,
	0x66, 0xbd, 0x79, 0x47, 0xf6, 0xe9, 0x0b, 0x80, 0xd9, 0x78, 0x67, 0x34, 0xe7, 0x09, 0xcd, 0xa7,
	0xdf, 0x4e, 0x4d, 0x91, 0xe6, 0x5f, 0xe8, 0x49, 0xab, 0xe8, 0xaf, 0x4a, 0xfa, 0x21, 0x0b, 0x1d,
	0x6e, 0x49, 0x34, 0xdf, 0x9f, 0x00, 0xec, 0x2f, 0x12, 0xd1, 0xd4, 0x71, 0x34, 0x9b, 0x72, 0xb6,
	0x5a, 0x12, 0xcd, 0x39, 0xd7, 0x83, 0x52, 0x51, 0xe6, 0x24, 0xe5, 0x20, 0x3a, 0x82, 0x32, 0x9a,
	0xce, 0xbe, 0xa4, 0x0a, 0xdd, 0x31, 0x1d, 0x47, 0x03, 0xce, 0x9a, 0x0b, 0x15, 0xdf, 0x0d, 0xc9,
	0x37, 0x8a, 0xf0, 0xc9, 0x0b, 0x1b, 0x7d, 0x03, 0x30, 0x1b, 0x1f, 0x3e, 0x86, 0xad, 0xef, 0x10,
	0x19, 0xb5, 0xfe, 0x90, 0x56, 0x41, 0x8f, 0x49, 0xe8, 0xeb, 0x56, 0x17, 0xe8, 0x68, 0x19, 0xfc,
	0x03, 0xf0, 0xca, 0x0a, 0x89, 0xee, 0x2d, 0x57, 0xb9, 0xa0, 0x5b, 0xab, 0xc4, 0x65, 0xde, 0xd3,
	0x82, 0x10, 0xcc, 0xdf, 0xa8, 0x0a, 0x82, 0x1e, 0xa4, 0xe1, 0x38, 0xc1, 0x40, 0xe7, 0x29, 0x9e,
	0xda, 0x47, 0x65, 0x7b, 0x28, 0xb3, 0x2d, 0x59, 0x8b, 0x5d, 0x4e, 0x1a, 0x26, 0xbd, 0x26, 0x3c,
	0x69, 0x36, 0xc1, 0xa5, 0xdb, 0x84, 0xab, 0xed, 0xa2, 0xe8, 0x5f, 0x01, 0xcc, 0xc6, 0xa7, 0xb1,
	0x61, 0xcb, 0x3a, 0x44, 0x46, 0x2d, 0x3b, 0xa4, 0x6d, 0x5f, 0x67, 0xe3, 0xdd, 0xd6, 0xd9, 0x5b,
	0x00, 0x61, 0x91, 0x88, 0x15, 0x52, 0x8a, 0x8e, 0xa1, 0x74, 0x4f, 0xaa, 0x56, 0xbd, 0xd1, 0x93,
	0x2a, 0x29, 0x53, 0x94, 0x43, 0x92, 0x72, 0x00, 0x65, 0x35, 0x25, 0x53, 0x1c, 0xef, 0x01, 0xbc,
	0xd0, 0xac, 0x47, 0x33, 0x46, 0xf6, 0x1a, 0x2a, 0x6f, 0xa8, 0x52, 0x4c, 0xa3, 0x92, 0x29, 0x87,
	0x86, 0x3b, 0x98, 0x9c, 0x7a, 0x7c, 0xb1, 0xbd, 0xf4, 0x6c, 0xb7, 0x81, 0x33, 0x7b, 0x0d, 0x9c,
	0x39, 0x68, 0x60, 0xf0, 0x32, 0xc4, 0xe0, 0x73, 0x88, 0xc1, 0x8f, 0x10, 0x83, 0xdd, 0x10, 0x83,
	0xdf, 0x21, 0x06, 0x7f, 0x43, 0x9c, 0x39, 0x08, 0x31, 0x78, 0xb3, 0x8f, 0x33, 0xbb, 0xfb, 0x38,
	0xb3, 0xb7, 0x8f, 0x33, 0x4f, 0xf2, 0x25, 0xda, 0x02, 0xf2, 0xe9, 0xf1, 0xaf, 0xb8, 0x0b, 0xc9,
	0xdf, 0x1b, 0x67, 0xe5, 0x1b, 0xec, 0xf4, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x44, 0x66, 0x52,
	0x66, 0x72, 0x0b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CloudServiceClient is the client API for CloudService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CloudServiceClient interface {
	// Gets all known users
	GetUsers(ctx context.Context, in *GetUsersRequest, opts ...grpc.CallOption) (*GetUsersResponse, error)
	// Get a user
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	// Create a user
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	// Update a user
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error)
	// Delete a user
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error)
	// Set a user's access to a namespace
	SetUserNamespaceAccess(ctx context.Context, in *SetUserNamespaceAccessRequest, opts ...grpc.CallOption) (*SetUserNamespaceAccessResponse, error)
	// Get the latest information on an async operation
	GetAsyncOperation(ctx context.Context, in *GetAsyncOperationRequest, opts ...grpc.CallOption) (*GetAsyncOperationResponse, error)
	// Create a new namespace
	CreateNamespace(ctx context.Context, in *CreateNamespaceRequest, opts ...grpc.CallOption) (*CreateNamespaceResponse, error)
	// Get all namespaces
	GetNamespaces(ctx context.Context, in *GetNamespacesRequest, opts ...grpc.CallOption) (*GetNamespacesResponse, error)
	// Get a namespace
	GetNamespace(ctx context.Context, in *GetNamespaceRequest, opts ...grpc.CallOption) (*GetNamespaceResponse, error)
	// Update a namespace
	UpdateNamespace(ctx context.Context, in *UpdateNamespaceRequest, opts ...grpc.CallOption) (*UpdateNamespaceResponse, error)
	// Rename an existing customer search attribute
	RenameCustomSearchAttribute(ctx context.Context, in *RenameCustomSearchAttributeRequest, opts ...grpc.CallOption) (*RenameCustomSearchAttributeResponse, error)
	// Delete a namespace
	DeleteNamespace(ctx context.Context, in *DeleteNamespaceRequest, opts ...grpc.CallOption) (*DeleteNamespaceResponse, error)
	// Get all regions
	GetRegions(ctx context.Context, in *GetRegionsRequest, opts ...grpc.CallOption) (*GetRegionsResponse, error)
	// Get a region
	GetRegion(ctx context.Context, in *GetRegionRequest, opts ...grpc.CallOption) (*GetRegionResponse, error)
}

type cloudServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCloudServiceClient(cc grpc.ClientConnInterface) CloudServiceClient {
	return &cloudServiceClient{cc}
}

func (c *cloudServiceClient) GetUsers(ctx context.Context, in *GetUsersRequest, opts ...grpc.CallOption) (*GetUsersResponse, error) {
	out := new(GetUsersResponse)
	err := c.cc.Invoke(ctx, "/temporal.api.cloud.cloudservice.v1.CloudService/GetUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, "/temporal.api.cloud.cloudservice.v1.CloudService/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, "/temporal.api.cloud.cloudservice.v1.CloudService/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error) {
	out := new(UpdateUserResponse)
	err := c.cc.Invoke(ctx, "/temporal.api.cloud.cloudservice.v1.CloudService/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceClient) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error) {
	out := new(DeleteUserResponse)
	err := c.cc.Invoke(ctx, "/temporal.api.cloud.cloudservice.v1.CloudService/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceClient) SetUserNamespaceAccess(ctx context.Context, in *SetUserNamespaceAccessRequest, opts ...grpc.CallOption) (*SetUserNamespaceAccessResponse, error) {
	out := new(SetUserNamespaceAccessResponse)
	err := c.cc.Invoke(ctx, "/temporal.api.cloud.cloudservice.v1.CloudService/SetUserNamespaceAccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceClient) GetAsyncOperation(ctx context.Context, in *GetAsyncOperationRequest, opts ...grpc.CallOption) (*GetAsyncOperationResponse, error) {
	out := new(GetAsyncOperationResponse)
	err := c.cc.Invoke(ctx, "/temporal.api.cloud.cloudservice.v1.CloudService/GetAsyncOperation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceClient) CreateNamespace(ctx context.Context, in *CreateNamespaceRequest, opts ...grpc.CallOption) (*CreateNamespaceResponse, error) {
	out := new(CreateNamespaceResponse)
	err := c.cc.Invoke(ctx, "/temporal.api.cloud.cloudservice.v1.CloudService/CreateNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceClient) GetNamespaces(ctx context.Context, in *GetNamespacesRequest, opts ...grpc.CallOption) (*GetNamespacesResponse, error) {
	out := new(GetNamespacesResponse)
	err := c.cc.Invoke(ctx, "/temporal.api.cloud.cloudservice.v1.CloudService/GetNamespaces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceClient) GetNamespace(ctx context.Context, in *GetNamespaceRequest, opts ...grpc.CallOption) (*GetNamespaceResponse, error) {
	out := new(GetNamespaceResponse)
	err := c.cc.Invoke(ctx, "/temporal.api.cloud.cloudservice.v1.CloudService/GetNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceClient) UpdateNamespace(ctx context.Context, in *UpdateNamespaceRequest, opts ...grpc.CallOption) (*UpdateNamespaceResponse, error) {
	out := new(UpdateNamespaceResponse)
	err := c.cc.Invoke(ctx, "/temporal.api.cloud.cloudservice.v1.CloudService/UpdateNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceClient) RenameCustomSearchAttribute(ctx context.Context, in *RenameCustomSearchAttributeRequest, opts ...grpc.CallOption) (*RenameCustomSearchAttributeResponse, error) {
	out := new(RenameCustomSearchAttributeResponse)
	err := c.cc.Invoke(ctx, "/temporal.api.cloud.cloudservice.v1.CloudService/RenameCustomSearchAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceClient) DeleteNamespace(ctx context.Context, in *DeleteNamespaceRequest, opts ...grpc.CallOption) (*DeleteNamespaceResponse, error) {
	out := new(DeleteNamespaceResponse)
	err := c.cc.Invoke(ctx, "/temporal.api.cloud.cloudservice.v1.CloudService/DeleteNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceClient) GetRegions(ctx context.Context, in *GetRegionsRequest, opts ...grpc.CallOption) (*GetRegionsResponse, error) {
	out := new(GetRegionsResponse)
	err := c.cc.Invoke(ctx, "/temporal.api.cloud.cloudservice.v1.CloudService/GetRegions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceClient) GetRegion(ctx context.Context, in *GetRegionRequest, opts ...grpc.CallOption) (*GetRegionResponse, error) {
	out := new(GetRegionResponse)
	err := c.cc.Invoke(ctx, "/temporal.api.cloud.cloudservice.v1.CloudService/GetRegion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CloudServiceServer is the server API for CloudService service.
type CloudServiceServer interface {
	// Gets all known users
	GetUsers(context.Context, *GetUsersRequest) (*GetUsersResponse, error)
	// Get a user
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
	// Create a user
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	// Update a user
	UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error)
	// Delete a user
	DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error)
	// Set a user's access to a namespace
	SetUserNamespaceAccess(context.Context, *SetUserNamespaceAccessRequest) (*SetUserNamespaceAccessResponse, error)
	// Get the latest information on an async operation
	GetAsyncOperation(context.Context, *GetAsyncOperationRequest) (*GetAsyncOperationResponse, error)
	// Create a new namespace
	CreateNamespace(context.Context, *CreateNamespaceRequest) (*CreateNamespaceResponse, error)
	// Get all namespaces
	GetNamespaces(context.Context, *GetNamespacesRequest) (*GetNamespacesResponse, error)
	// Get a namespace
	GetNamespace(context.Context, *GetNamespaceRequest) (*GetNamespaceResponse, error)
	// Update a namespace
	UpdateNamespace(context.Context, *UpdateNamespaceRequest) (*UpdateNamespaceResponse, error)
	// Rename an existing customer search attribute
	RenameCustomSearchAttribute(context.Context, *RenameCustomSearchAttributeRequest) (*RenameCustomSearchAttributeResponse, error)
	// Delete a namespace
	DeleteNamespace(context.Context, *DeleteNamespaceRequest) (*DeleteNamespaceResponse, error)
	// Get all regions
	GetRegions(context.Context, *GetRegionsRequest) (*GetRegionsResponse, error)
	// Get a region
	GetRegion(context.Context, *GetRegionRequest) (*GetRegionResponse, error)
}

// UnimplementedCloudServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCloudServiceServer struct {
}

func (*UnimplementedCloudServiceServer) GetUsers(ctx context.Context, req *GetUsersRequest) (*GetUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsers not implemented")
}
func (*UnimplementedCloudServiceServer) GetUser(ctx context.Context, req *GetUserRequest) (*GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (*UnimplementedCloudServiceServer) CreateUser(ctx context.Context, req *CreateUserRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (*UnimplementedCloudServiceServer) UpdateUser(ctx context.Context, req *UpdateUserRequest) (*UpdateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (*UnimplementedCloudServiceServer) DeleteUser(ctx context.Context, req *DeleteUserRequest) (*DeleteUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (*UnimplementedCloudServiceServer) SetUserNamespaceAccess(ctx context.Context, req *SetUserNamespaceAccessRequest) (*SetUserNamespaceAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUserNamespaceAccess not implemented")
}
func (*UnimplementedCloudServiceServer) GetAsyncOperation(ctx context.Context, req *GetAsyncOperationRequest) (*GetAsyncOperationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAsyncOperation not implemented")
}
func (*UnimplementedCloudServiceServer) CreateNamespace(ctx context.Context, req *CreateNamespaceRequest) (*CreateNamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNamespace not implemented")
}
func (*UnimplementedCloudServiceServer) GetNamespaces(ctx context.Context, req *GetNamespacesRequest) (*GetNamespacesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNamespaces not implemented")
}
func (*UnimplementedCloudServiceServer) GetNamespace(ctx context.Context, req *GetNamespaceRequest) (*GetNamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNamespace not implemented")
}
func (*UnimplementedCloudServiceServer) UpdateNamespace(ctx context.Context, req *UpdateNamespaceRequest) (*UpdateNamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNamespace not implemented")
}
func (*UnimplementedCloudServiceServer) RenameCustomSearchAttribute(ctx context.Context, req *RenameCustomSearchAttributeRequest) (*RenameCustomSearchAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenameCustomSearchAttribute not implemented")
}
func (*UnimplementedCloudServiceServer) DeleteNamespace(ctx context.Context, req *DeleteNamespaceRequest) (*DeleteNamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNamespace not implemented")
}
func (*UnimplementedCloudServiceServer) GetRegions(ctx context.Context, req *GetRegionsRequest) (*GetRegionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRegions not implemented")
}
func (*UnimplementedCloudServiceServer) GetRegion(ctx context.Context, req *GetRegionRequest) (*GetRegionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRegion not implemented")
}

func RegisterCloudServiceServer(s *grpc.Server, srv CloudServiceServer) {
	s.RegisterService(&_CloudService_serviceDesc, srv)
}

func _CloudService_GetUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceServer).GetUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/temporal.api.cloud.cloudservice.v1.CloudService/GetUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceServer).GetUsers(ctx, req.(*GetUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/temporal.api.cloud.cloudservice.v1.CloudService/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/temporal.api.cloud.cloudservice.v1.CloudService/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/temporal.api.cloud.cloudservice.v1.CloudService/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/temporal.api.cloud.cloudservice.v1.CloudService/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceServer).DeleteUser(ctx, req.(*DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudService_SetUserNamespaceAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUserNamespaceAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceServer).SetUserNamespaceAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/temporal.api.cloud.cloudservice.v1.CloudService/SetUserNamespaceAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceServer).SetUserNamespaceAccess(ctx, req.(*SetUserNamespaceAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudService_GetAsyncOperation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAsyncOperationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceServer).GetAsyncOperation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/temporal.api.cloud.cloudservice.v1.CloudService/GetAsyncOperation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceServer).GetAsyncOperation(ctx, req.(*GetAsyncOperationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudService_CreateNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceServer).CreateNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/temporal.api.cloud.cloudservice.v1.CloudService/CreateNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceServer).CreateNamespace(ctx, req.(*CreateNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudService_GetNamespaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNamespacesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceServer).GetNamespaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/temporal.api.cloud.cloudservice.v1.CloudService/GetNamespaces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceServer).GetNamespaces(ctx, req.(*GetNamespacesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudService_GetNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceServer).GetNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/temporal.api.cloud.cloudservice.v1.CloudService/GetNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceServer).GetNamespace(ctx, req.(*GetNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudService_UpdateNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceServer).UpdateNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/temporal.api.cloud.cloudservice.v1.CloudService/UpdateNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceServer).UpdateNamespace(ctx, req.(*UpdateNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudService_RenameCustomSearchAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameCustomSearchAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceServer).RenameCustomSearchAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/temporal.api.cloud.cloudservice.v1.CloudService/RenameCustomSearchAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceServer).RenameCustomSearchAttribute(ctx, req.(*RenameCustomSearchAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudService_DeleteNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceServer).DeleteNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/temporal.api.cloud.cloudservice.v1.CloudService/DeleteNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceServer).DeleteNamespace(ctx, req.(*DeleteNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudService_GetRegions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRegionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceServer).GetRegions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/temporal.api.cloud.cloudservice.v1.CloudService/GetRegions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceServer).GetRegions(ctx, req.(*GetRegionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudService_GetRegion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRegionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceServer).GetRegion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/temporal.api.cloud.cloudservice.v1.CloudService/GetRegion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceServer).GetRegion(ctx, req.(*GetRegionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CloudService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "temporal.api.cloud.cloudservice.v1.CloudService",
	HandlerType: (*CloudServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUsers",
			Handler:    _CloudService_GetUsers_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _CloudService_GetUser_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _CloudService_CreateUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _CloudService_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _CloudService_DeleteUser_Handler,
		},
		{
			MethodName: "SetUserNamespaceAccess",
			Handler:    _CloudService_SetUserNamespaceAccess_Handler,
		},
		{
			MethodName: "GetAsyncOperation",
			Handler:    _CloudService_GetAsyncOperation_Handler,
		},
		{
			MethodName: "CreateNamespace",
			Handler:    _CloudService_CreateNamespace_Handler,
		},
		{
			MethodName: "GetNamespaces",
			Handler:    _CloudService_GetNamespaces_Handler,
		},
		{
			MethodName: "GetNamespace",
			Handler:    _CloudService_GetNamespace_Handler,
		},
		{
			MethodName: "UpdateNamespace",
			Handler:    _CloudService_UpdateNamespace_Handler,
		},
		{
			MethodName: "RenameCustomSearchAttribute",
			Handler:    _CloudService_RenameCustomSearchAttribute_Handler,
		},
		{
			MethodName: "DeleteNamespace",
			Handler:    _CloudService_DeleteNamespace_Handler,
		},
		{
			MethodName: "GetRegions",
			Handler:    _CloudService_GetRegions_Handler,
		},
		{
			MethodName: "GetRegion",
			Handler:    _CloudService_GetRegion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "temporal/api/cloud/cloudservice/v1/service.proto",
}
