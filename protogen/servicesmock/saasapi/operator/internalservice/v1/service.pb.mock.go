// Code generated by MockGen. DO NOT EDIT.
// Source: services/saasapi/operator/internalservice/v1/service.pb.go

// Package servicesmock is a generated GoMock package.
package servicesmock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/temporalio/tcld/protogen/services/saasapi/operator/internalservice/v1"
	grpc "google.golang.org/grpc"
)

// MockInternalServiceClient is a mock of InternalServiceClient interface.
type MockInternalServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockInternalServiceClientMockRecorder
}

// MockInternalServiceClientMockRecorder is the mock recorder for MockInternalServiceClient.
type MockInternalServiceClientMockRecorder struct {
	mock *MockInternalServiceClient
}

// NewMockInternalServiceClient creates a new mock instance.
func NewMockInternalServiceClient(ctrl *gomock.Controller) *MockInternalServiceClient {
	mock := &MockInternalServiceClient{ctrl: ctrl}
	mock.recorder = &MockInternalServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInternalServiceClient) EXPECT() *MockInternalServiceClientMockRecorder {
	return m.recorder
}

// AddAstraCapacity mocks base method.
func (m *MockInternalServiceClient) AddAstraCapacity(ctx context.Context, in *v1.AddAstraCapacityRequest, opts ...grpc.CallOption) (*v1.AddAstraCapacityResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddAstraCapacity", varargs...)
	ret0, _ := ret[0].(*v1.AddAstraCapacityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddAstraCapacity indicates an expected call of AddAstraCapacity.
func (mr *MockInternalServiceClientMockRecorder) AddAstraCapacity(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAstraCapacity", reflect.TypeOf((*MockInternalServiceClient)(nil).AddAstraCapacity), varargs...)
}

// AddRolesToUser mocks base method.
func (m *MockInternalServiceClient) AddRolesToUser(ctx context.Context, in *v1.AddRolesToUserRequest, opts ...grpc.CallOption) (*v1.AddRolesToUserResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddRolesToUser", varargs...)
	ret0, _ := ret[0].(*v1.AddRolesToUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddRolesToUser indicates an expected call of AddRolesToUser.
func (mr *MockInternalServiceClientMockRecorder) AddRolesToUser(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRolesToUser", reflect.TypeOf((*MockInternalServiceClient)(nil).AddRolesToUser), varargs...)
}

// AllocateInitialFailoverVersion mocks base method.
func (m *MockInternalServiceClient) AllocateInitialFailoverVersion(ctx context.Context, in *v1.AllocateInitialFailoverVersionRequest, opts ...grpc.CallOption) (*v1.AllocateInitialFailoverVersionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AllocateInitialFailoverVersion", varargs...)
	ret0, _ := ret[0].(*v1.AllocateInitialFailoverVersionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllocateInitialFailoverVersion indicates an expected call of AllocateInitialFailoverVersion.
func (mr *MockInternalServiceClientMockRecorder) AllocateInitialFailoverVersion(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocateInitialFailoverVersion", reflect.TypeOf((*MockInternalServiceClient)(nil).AllocateInitialFailoverVersion), varargs...)
}

// AssignAccount mocks base method.
func (m *MockInternalServiceClient) AssignAccount(ctx context.Context, in *v1.AssignAccountRequest, opts ...grpc.CallOption) (*v1.AssignAccountResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssignAccount", varargs...)
	ret0, _ := ret[0].(*v1.AssignAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssignAccount indicates an expected call of AssignAccount.
func (mr *MockInternalServiceClientMockRecorder) AssignAccount(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignAccount", reflect.TypeOf((*MockInternalServiceClient)(nil).AssignAccount), varargs...)
}

// BackfillRoles mocks base method.
func (m *MockInternalServiceClient) BackfillRoles(ctx context.Context, in *v1.BackfillRolesRequest, opts ...grpc.CallOption) (*v1.BackfillRolesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BackfillRoles", varargs...)
	ret0, _ := ret[0].(*v1.BackfillRolesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BackfillRoles indicates an expected call of BackfillRoles.
func (mr *MockInternalServiceClientMockRecorder) BackfillRoles(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BackfillRoles", reflect.TypeOf((*MockInternalServiceClient)(nil).BackfillRoles), varargs...)
}

// CreateCell mocks base method.
func (m *MockInternalServiceClient) CreateCell(ctx context.Context, in *v1.CreateCellRequest, opts ...grpc.CallOption) (*v1.CreateCellResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateCell", varargs...)
	ret0, _ := ret[0].(*v1.CreateCellResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCell indicates an expected call of CreateCell.
func (mr *MockInternalServiceClientMockRecorder) CreateCell(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCell", reflect.TypeOf((*MockInternalServiceClient)(nil).CreateCell), varargs...)
}

// CreateCellInDatabase mocks base method.
func (m *MockInternalServiceClient) CreateCellInDatabase(ctx context.Context, in *v1.CreateCellInDatabaseRequest, opts ...grpc.CallOption) (*v1.CreateCellInDatabaseResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateCellInDatabase", varargs...)
	ret0, _ := ret[0].(*v1.CreateCellInDatabaseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCellInDatabase indicates an expected call of CreateCellInDatabase.
func (mr *MockInternalServiceClientMockRecorder) CreateCellInDatabase(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCellInDatabase", reflect.TypeOf((*MockInternalServiceClient)(nil).CreateCellInDatabase), varargs...)
}

// CreateInternalAPIKey mocks base method.
func (m *MockInternalServiceClient) CreateInternalAPIKey(ctx context.Context, in *v1.CreateInternalAPIKeyRequest, opts ...grpc.CallOption) (*v1.CreateInternalAPIKeyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateInternalAPIKey", varargs...)
	ret0, _ := ret[0].(*v1.CreateInternalAPIKeyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInternalAPIKey indicates an expected call of CreateInternalAPIKey.
func (mr *MockInternalServiceClientMockRecorder) CreateInternalAPIKey(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInternalAPIKey", reflect.TypeOf((*MockInternalServiceClient)(nil).CreateInternalAPIKey), varargs...)
}

// CreateInternalRegionalNamespace mocks base method.
func (m *MockInternalServiceClient) CreateInternalRegionalNamespace(ctx context.Context, in *v1.CreateInternalRegionalNamespaceRequest, opts ...grpc.CallOption) (*v1.CreateInternalRegionalNamespaceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateInternalRegionalNamespace", varargs...)
	ret0, _ := ret[0].(*v1.CreateInternalRegionalNamespaceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInternalRegionalNamespace indicates an expected call of CreateInternalRegionalNamespace.
func (mr *MockInternalServiceClientMockRecorder) CreateInternalRegionalNamespace(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInternalRegionalNamespace", reflect.TypeOf((*MockInternalServiceClient)(nil).CreateInternalRegionalNamespace), varargs...)
}

// CreateNamespace mocks base method.
func (m *MockInternalServiceClient) CreateNamespace(ctx context.Context, in *v1.CreateNamespaceRequest, opts ...grpc.CallOption) (*v1.CreateNamespaceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateNamespace", varargs...)
	ret0, _ := ret[0].(*v1.CreateNamespaceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNamespace indicates an expected call of CreateNamespace.
func (mr *MockInternalServiceClientMockRecorder) CreateNamespace(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNamespace", reflect.TypeOf((*MockInternalServiceClient)(nil).CreateNamespace), varargs...)
}

// CreateRoleInDatabase mocks base method.
func (m *MockInternalServiceClient) CreateRoleInDatabase(ctx context.Context, in *v1.UpdateResourceRequest, opts ...grpc.CallOption) (*v1.UpdateResourceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateRoleInDatabase", varargs...)
	ret0, _ := ret[0].(*v1.UpdateResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRoleInDatabase indicates an expected call of CreateRoleInDatabase.
func (mr *MockInternalServiceClientMockRecorder) CreateRoleInDatabase(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRoleInDatabase", reflect.TypeOf((*MockInternalServiceClient)(nil).CreateRoleInDatabase), varargs...)
}

// CreateSAMLConnection mocks base method.
func (m *MockInternalServiceClient) CreateSAMLConnection(ctx context.Context, in *v1.CreateSAMLConnectionRequest, opts ...grpc.CallOption) (*v1.CreateSAMLConnectionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSAMLConnection", varargs...)
	ret0, _ := ret[0].(*v1.CreateSAMLConnectionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSAMLConnection indicates an expected call of CreateSAMLConnection.
func (mr *MockInternalServiceClientMockRecorder) CreateSAMLConnection(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSAMLConnection", reflect.TypeOf((*MockInternalServiceClient)(nil).CreateSAMLConnection), varargs...)
}

// DeleteCell mocks base method.
func (m *MockInternalServiceClient) DeleteCell(ctx context.Context, in *v1.DeleteCellRequest, opts ...grpc.CallOption) (*v1.DeleteCellResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteCell", varargs...)
	ret0, _ := ret[0].(*v1.DeleteCellResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCell indicates an expected call of DeleteCell.
func (mr *MockInternalServiceClientMockRecorder) DeleteCell(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCell", reflect.TypeOf((*MockInternalServiceClient)(nil).DeleteCell), varargs...)
}

// DeleteCellInDatabase mocks base method.
func (m *MockInternalServiceClient) DeleteCellInDatabase(ctx context.Context, in *v1.UpdateResourceRequest, opts ...grpc.CallOption) (*v1.UpdateResourceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteCellInDatabase", varargs...)
	ret0, _ := ret[0].(*v1.UpdateResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCellInDatabase indicates an expected call of DeleteCellInDatabase.
func (mr *MockInternalServiceClientMockRecorder) DeleteCellInDatabase(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCellInDatabase", reflect.TypeOf((*MockInternalServiceClient)(nil).DeleteCellInDatabase), varargs...)
}

// DeleteInitialFailoverVersion mocks base method.
func (m *MockInternalServiceClient) DeleteInitialFailoverVersion(ctx context.Context, in *v1.DeleteInitialFailoverVersionRequest, opts ...grpc.CallOption) (*v1.DeleteInitialFailoverVersionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteInitialFailoverVersion", varargs...)
	ret0, _ := ret[0].(*v1.DeleteInitialFailoverVersionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteInitialFailoverVersion indicates an expected call of DeleteInitialFailoverVersion.
func (mr *MockInternalServiceClientMockRecorder) DeleteInitialFailoverVersion(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInitialFailoverVersion", reflect.TypeOf((*MockInternalServiceClient)(nil).DeleteInitialFailoverVersion), varargs...)
}

// DeleteNamespace mocks base method.
func (m *MockInternalServiceClient) DeleteNamespace(ctx context.Context, in *v1.UpdateResourceRequest, opts ...grpc.CallOption) (*v1.UpdateResourceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteNamespace", varargs...)
	ret0, _ := ret[0].(*v1.UpdateResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteNamespace indicates an expected call of DeleteNamespace.
func (mr *MockInternalServiceClientMockRecorder) DeleteNamespace(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNamespace", reflect.TypeOf((*MockInternalServiceClient)(nil).DeleteNamespace), varargs...)
}

// DeleteNamespaceFromDatabase mocks base method.
func (m *MockInternalServiceClient) DeleteNamespaceFromDatabase(ctx context.Context, in *v1.UpdateResourceRequest, opts ...grpc.CallOption) (*v1.UpdateResourceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteNamespaceFromDatabase", varargs...)
	ret0, _ := ret[0].(*v1.UpdateResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteNamespaceFromDatabase indicates an expected call of DeleteNamespaceFromDatabase.
func (mr *MockInternalServiceClientMockRecorder) DeleteNamespaceFromDatabase(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNamespaceFromDatabase", reflect.TypeOf((*MockInternalServiceClient)(nil).DeleteNamespaceFromDatabase), varargs...)
}

// DeleteRoleInDatabase mocks base method.
func (m *MockInternalServiceClient) DeleteRoleInDatabase(ctx context.Context, in *v1.UpdateResourceRequest, opts ...grpc.CallOption) (*v1.UpdateResourceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRoleInDatabase", varargs...)
	ret0, _ := ret[0].(*v1.UpdateResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRoleInDatabase indicates an expected call of DeleteRoleInDatabase.
func (mr *MockInternalServiceClientMockRecorder) DeleteRoleInDatabase(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRoleInDatabase", reflect.TypeOf((*MockInternalServiceClient)(nil).DeleteRoleInDatabase), varargs...)
}

// DeleteRolesFromUser mocks base method.
func (m *MockInternalServiceClient) DeleteRolesFromUser(ctx context.Context, in *v1.DeleteRolesFromUserRequest, opts ...grpc.CallOption) (*v1.DeleteRolesFromUserResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRolesFromUser", varargs...)
	ret0, _ := ret[0].(*v1.DeleteRolesFromUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRolesFromUser indicates an expected call of DeleteRolesFromUser.
func (mr *MockInternalServiceClientMockRecorder) DeleteRolesFromUser(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRolesFromUser", reflect.TypeOf((*MockInternalServiceClient)(nil).DeleteRolesFromUser), varargs...)
}

// ExpandAccountPool mocks base method.
func (m *MockInternalServiceClient) ExpandAccountPool(ctx context.Context, in *v1.ExpandAccountPoolRequest, opts ...grpc.CallOption) (*v1.ExpandAccountPoolResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExpandAccountPool", varargs...)
	ret0, _ := ret[0].(*v1.ExpandAccountPoolResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExpandAccountPool indicates an expected call of ExpandAccountPool.
func (mr *MockInternalServiceClientMockRecorder) ExpandAccountPool(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExpandAccountPool", reflect.TypeOf((*MockInternalServiceClient)(nil).ExpandAccountPool), varargs...)
}

// GetAPIKey mocks base method.
func (m *MockInternalServiceClient) GetAPIKey(ctx context.Context, in *v1.GetResourceRequest, opts ...grpc.CallOption) (*v1.GetResourceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAPIKey", varargs...)
	ret0, _ := ret[0].(*v1.GetResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPIKey indicates an expected call of GetAPIKey.
func (mr *MockInternalServiceClientMockRecorder) GetAPIKey(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIKey", reflect.TypeOf((*MockInternalServiceClient)(nil).GetAPIKey), varargs...)
}

// GetAccount mocks base method.
func (m *MockInternalServiceClient) GetAccount(ctx context.Context, in *v1.GetResourceRequest, opts ...grpc.CallOption) (*v1.GetResourceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAccount", varargs...)
	ret0, _ := ret[0].(*v1.GetResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockInternalServiceClientMockRecorder) GetAccount(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockInternalServiceClient)(nil).GetAccount), varargs...)
}

// GetAccountFromDatabase mocks base method.
func (m *MockInternalServiceClient) GetAccountFromDatabase(ctx context.Context, in *v1.GetResourceRequest, opts ...grpc.CallOption) (*v1.GetResourceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAccountFromDatabase", varargs...)
	ret0, _ := ret[0].(*v1.GetResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountFromDatabase indicates an expected call of GetAccountFromDatabase.
func (mr *MockInternalServiceClientMockRecorder) GetAccountFromDatabase(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountFromDatabase", reflect.TypeOf((*MockInternalServiceClient)(nil).GetAccountFromDatabase), varargs...)
}

// GetAuthorizeResultFromOPA mocks base method.
func (m *MockInternalServiceClient) GetAuthorizeResultFromOPA(ctx context.Context, in *v1.GetAuthorizeResultFromOPARequest, opts ...grpc.CallOption) (*v1.GetAuthorizeResultFromOPAResult, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAuthorizeResultFromOPA", varargs...)
	ret0, _ := ret[0].(*v1.GetAuthorizeResultFromOPAResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthorizeResultFromOPA indicates an expected call of GetAuthorizeResultFromOPA.
func (mr *MockInternalServiceClientMockRecorder) GetAuthorizeResultFromOPA(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorizeResultFromOPA", reflect.TypeOf((*MockInternalServiceClient)(nil).GetAuthorizeResultFromOPA), varargs...)
}

// GetCell mocks base method.
func (m *MockInternalServiceClient) GetCell(ctx context.Context, in *v1.GetResourceRequest, opts ...grpc.CallOption) (*v1.GetResourceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCell", varargs...)
	ret0, _ := ret[0].(*v1.GetResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCell indicates an expected call of GetCell.
func (mr *MockInternalServiceClientMockRecorder) GetCell(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCell", reflect.TypeOf((*MockInternalServiceClient)(nil).GetCell), varargs...)
}

// GetEntityRequestMap mocks base method.
func (m *MockInternalServiceClient) GetEntityRequestMap(ctx context.Context, in *v1.GetResourceRequest, opts ...grpc.CallOption) (*v1.GetResourceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEntityRequestMap", varargs...)
	ret0, _ := ret[0].(*v1.GetResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntityRequestMap indicates an expected call of GetEntityRequestMap.
func (mr *MockInternalServiceClientMockRecorder) GetEntityRequestMap(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntityRequestMap", reflect.TypeOf((*MockInternalServiceClient)(nil).GetEntityRequestMap), varargs...)
}

// GetGlobalDynamicConfig mocks base method.
func (m *MockInternalServiceClient) GetGlobalDynamicConfig(ctx context.Context, in *v1.GetResourceRequest, opts ...grpc.CallOption) (*v1.GetResourceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetGlobalDynamicConfig", varargs...)
	ret0, _ := ret[0].(*v1.GetResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGlobalDynamicConfig indicates an expected call of GetGlobalDynamicConfig.
func (mr *MockInternalServiceClientMockRecorder) GetGlobalDynamicConfig(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGlobalDynamicConfig", reflect.TypeOf((*MockInternalServiceClient)(nil).GetGlobalDynamicConfig), varargs...)
}

// GetGlobalPolicyConfigFromDatabase mocks base method.
func (m *MockInternalServiceClient) GetGlobalPolicyConfigFromDatabase(ctx context.Context, in *v1.GetResourceRequest, opts ...grpc.CallOption) (*v1.GetResourceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetGlobalPolicyConfigFromDatabase", varargs...)
	ret0, _ := ret[0].(*v1.GetResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGlobalPolicyConfigFromDatabase indicates an expected call of GetGlobalPolicyConfigFromDatabase.
func (mr *MockInternalServiceClientMockRecorder) GetGlobalPolicyConfigFromDatabase(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGlobalPolicyConfigFromDatabase", reflect.TypeOf((*MockInternalServiceClient)(nil).GetGlobalPolicyConfigFromDatabase), varargs...)
}

// GetInitialFailoverVersion mocks base method.
func (m *MockInternalServiceClient) GetInitialFailoverVersion(ctx context.Context, in *v1.GetInitialFailoverVersionRequest, opts ...grpc.CallOption) (*v1.GetInitialFailoverVersionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetInitialFailoverVersion", varargs...)
	ret0, _ := ret[0].(*v1.GetInitialFailoverVersionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInitialFailoverVersion indicates an expected call of GetInitialFailoverVersion.
func (mr *MockInternalServiceClientMockRecorder) GetInitialFailoverVersion(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInitialFailoverVersion", reflect.TypeOf((*MockInternalServiceClient)(nil).GetInitialFailoverVersion), varargs...)
}

// GetNamespace mocks base method.
func (m *MockInternalServiceClient) GetNamespace(ctx context.Context, in *v1.GetResourceRequest, opts ...grpc.CallOption) (*v1.GetResourceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetNamespace", varargs...)
	ret0, _ := ret[0].(*v1.GetResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNamespace indicates an expected call of GetNamespace.
func (mr *MockInternalServiceClientMockRecorder) GetNamespace(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNamespace", reflect.TypeOf((*MockInternalServiceClient)(nil).GetNamespace), varargs...)
}

// GetRequestStatus mocks base method.
func (m *MockInternalServiceClient) GetRequestStatus(ctx context.Context, in *v1.GetRequestStatusRequest, opts ...grpc.CallOption) (*v1.GetRequestStatusResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRequestStatus", varargs...)
	ret0, _ := ret[0].(*v1.GetRequestStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRequestStatus indicates an expected call of GetRequestStatus.
func (mr *MockInternalServiceClientMockRecorder) GetRequestStatus(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequestStatus", reflect.TypeOf((*MockInternalServiceClient)(nil).GetRequestStatus), varargs...)
}

// GetResourceManagerConfig mocks base method.
func (m *MockInternalServiceClient) GetResourceManagerConfig(ctx context.Context, in *v1.GetResourceRequest, opts ...grpc.CallOption) (*v1.GetResourceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetResourceManagerConfig", varargs...)
	ret0, _ := ret[0].(*v1.GetResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourceManagerConfig indicates an expected call of GetResourceManagerConfig.
func (mr *MockInternalServiceClientMockRecorder) GetResourceManagerConfig(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceManagerConfig", reflect.TypeOf((*MockInternalServiceClient)(nil).GetResourceManagerConfig), varargs...)
}

// GetResourceManagerNamespace mocks base method.
func (m *MockInternalServiceClient) GetResourceManagerNamespace(ctx context.Context, in *v1.GetResourceRequest, opts ...grpc.CallOption) (*v1.GetResourceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetResourceManagerNamespace", varargs...)
	ret0, _ := ret[0].(*v1.GetResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourceManagerNamespace indicates an expected call of GetResourceManagerNamespace.
func (mr *MockInternalServiceClientMockRecorder) GetResourceManagerNamespace(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceManagerNamespace", reflect.TypeOf((*MockInternalServiceClient)(nil).GetResourceManagerNamespace), varargs...)
}

// GetRoleFromOPA mocks base method.
func (m *MockInternalServiceClient) GetRoleFromOPA(ctx context.Context, in *v1.GetResourceRequest, opts ...grpc.CallOption) (*v1.GetResourceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRoleFromOPA", varargs...)
	ret0, _ := ret[0].(*v1.GetResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoleFromOPA indicates an expected call of GetRoleFromOPA.
func (mr *MockInternalServiceClientMockRecorder) GetRoleFromOPA(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoleFromOPA", reflect.TypeOf((*MockInternalServiceClient)(nil).GetRoleFromOPA), varargs...)
}

// GetRoleInDatabase mocks base method.
func (m *MockInternalServiceClient) GetRoleInDatabase(ctx context.Context, in *v1.GetResourceRequest, opts ...grpc.CallOption) (*v1.GetResourceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRoleInDatabase", varargs...)
	ret0, _ := ret[0].(*v1.GetResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoleInDatabase indicates an expected call of GetRoleInDatabase.
func (mr *MockInternalServiceClientMockRecorder) GetRoleInDatabase(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoleInDatabase", reflect.TypeOf((*MockInternalServiceClient)(nil).GetRoleInDatabase), varargs...)
}

// GetSubjectRoleFromOPA mocks base method.
func (m *MockInternalServiceClient) GetSubjectRoleFromOPA(ctx context.Context, in *v1.GetResourceRequest, opts ...grpc.CallOption) (*v1.GetResourceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSubjectRoleFromOPA", varargs...)
	ret0, _ := ret[0].(*v1.GetResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubjectRoleFromOPA indicates an expected call of GetSubjectRoleFromOPA.
func (mr *MockInternalServiceClientMockRecorder) GetSubjectRoleFromOPA(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubjectRoleFromOPA", reflect.TypeOf((*MockInternalServiceClient)(nil).GetSubjectRoleFromOPA), varargs...)
}

// GetUser mocks base method.
func (m *MockInternalServiceClient) GetUser(ctx context.Context, in *v1.GetResourceRequest, opts ...grpc.CallOption) (*v1.GetResourceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUser", varargs...)
	ret0, _ := ret[0].(*v1.GetResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockInternalServiceClientMockRecorder) GetUser(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockInternalServiceClient)(nil).GetUser), varargs...)
}

// GetUserRoleFromOPA mocks base method.
func (m *MockInternalServiceClient) GetUserRoleFromOPA(ctx context.Context, in *v1.GetResourceRequest, opts ...grpc.CallOption) (*v1.GetResourceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserRoleFromOPA", varargs...)
	ret0, _ := ret[0].(*v1.GetResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserRoleFromOPA indicates an expected call of GetUserRoleFromOPA.
func (mr *MockInternalServiceClientMockRecorder) GetUserRoleFromOPA(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserRoleFromOPA", reflect.TypeOf((*MockInternalServiceClient)(nil).GetUserRoleFromOPA), varargs...)
}

// GrantEphemeralReadRole mocks base method.
func (m *MockInternalServiceClient) GrantEphemeralReadRole(ctx context.Context, in *v1.GrantEphemeralReadRoleRequest, opts ...grpc.CallOption) (*v1.GrantEphemeralReadRoleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GrantEphemeralReadRole", varargs...)
	ret0, _ := ret[0].(*v1.GrantEphemeralReadRoleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GrantEphemeralReadRole indicates an expected call of GrantEphemeralReadRole.
func (mr *MockInternalServiceClientMockRecorder) GrantEphemeralReadRole(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GrantEphemeralReadRole", reflect.TypeOf((*MockInternalServiceClient)(nil).GrantEphemeralReadRole), varargs...)
}

// GrantEphemeralRole mocks base method.
func (m *MockInternalServiceClient) GrantEphemeralRole(ctx context.Context, in *v1.GrantEphemeralRoleRequest, opts ...grpc.CallOption) (*v1.GrantEphemeralRoleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GrantEphemeralRole", varargs...)
	ret0, _ := ret[0].(*v1.GrantEphemeralRoleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GrantEphemeralRole indicates an expected call of GrantEphemeralRole.
func (mr *MockInternalServiceClientMockRecorder) GrantEphemeralRole(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GrantEphemeralRole", reflect.TypeOf((*MockInternalServiceClient)(nil).GrantEphemeralRole), varargs...)
}

// InitializeAccount mocks base method.
func (m *MockInternalServiceClient) InitializeAccount(ctx context.Context, in *v1.InitializeAccountRequest, opts ...grpc.CallOption) (*v1.InitializeAccountResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InitializeAccount", varargs...)
	ret0, _ := ret[0].(*v1.InitializeAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitializeAccount indicates an expected call of InitializeAccount.
func (mr *MockInternalServiceClientMockRecorder) InitializeAccount(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitializeAccount", reflect.TypeOf((*MockInternalServiceClient)(nil).InitializeAccount), varargs...)
}

// InviteUsers mocks base method.
func (m *MockInternalServiceClient) InviteUsers(ctx context.Context, in *v1.InviteUsersRequest, opts ...grpc.CallOption) (*v1.InviteUsersResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InviteUsers", varargs...)
	ret0, _ := ret[0].(*v1.InviteUsersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InviteUsers indicates an expected call of InviteUsers.
func (mr *MockInternalServiceClientMockRecorder) InviteUsers(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InviteUsers", reflect.TypeOf((*MockInternalServiceClient)(nil).InviteUsers), varargs...)
}

// ListAPIKeys mocks base method.
func (m *MockInternalServiceClient) ListAPIKeys(ctx context.Context, in *v1.ListAPIKeysRequest, opts ...grpc.CallOption) (*v1.ListResourcesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAPIKeys", varargs...)
	ret0, _ := ret[0].(*v1.ListResourcesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAPIKeys indicates an expected call of ListAPIKeys.
func (mr *MockInternalServiceClientMockRecorder) ListAPIKeys(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAPIKeys", reflect.TypeOf((*MockInternalServiceClient)(nil).ListAPIKeys), varargs...)
}

// ListAccountsInDatabase mocks base method.
func (m *MockInternalServiceClient) ListAccountsInDatabase(ctx context.Context, in *v1.ListResourcesRequest, opts ...grpc.CallOption) (*v1.ListResourcesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAccountsInDatabase", varargs...)
	ret0, _ := ret[0].(*v1.ListResourcesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccountsInDatabase indicates an expected call of ListAccountsInDatabase.
func (mr *MockInternalServiceClientMockRecorder) ListAccountsInDatabase(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccountsInDatabase", reflect.TypeOf((*MockInternalServiceClient)(nil).ListAccountsInDatabase), varargs...)
}

// ListCells mocks base method.
func (m *MockInternalServiceClient) ListCells(ctx context.Context, in *v1.ListResourcesRequest, opts ...grpc.CallOption) (*v1.ListResourcesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCells", varargs...)
	ret0, _ := ret[0].(*v1.ListResourcesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCells indicates an expected call of ListCells.
func (mr *MockInternalServiceClientMockRecorder) ListCells(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCells", reflect.TypeOf((*MockInternalServiceClient)(nil).ListCells), varargs...)
}

// ListNamespaces mocks base method.
func (m *MockInternalServiceClient) ListNamespaces(ctx context.Context, in *v1.ListResourcesRequest, opts ...grpc.CallOption) (*v1.ListResourcesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListNamespaces", varargs...)
	ret0, _ := ret[0].(*v1.ListResourcesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNamespaces indicates an expected call of ListNamespaces.
func (mr *MockInternalServiceClientMockRecorder) ListNamespaces(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNamespaces", reflect.TypeOf((*MockInternalServiceClient)(nil).ListNamespaces), varargs...)
}

// ListResourceManagerCells mocks base method.
func (m *MockInternalServiceClient) ListResourceManagerCells(ctx context.Context, in *v1.ListResourcesRequest, opts ...grpc.CallOption) (*v1.ListResourcesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListResourceManagerCells", varargs...)
	ret0, _ := ret[0].(*v1.ListResourcesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListResourceManagerCells indicates an expected call of ListResourceManagerCells.
func (mr *MockInternalServiceClientMockRecorder) ListResourceManagerCells(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResourceManagerCells", reflect.TypeOf((*MockInternalServiceClient)(nil).ListResourceManagerCells), varargs...)
}

// ListResourceManagerNamespaces mocks base method.
func (m *MockInternalServiceClient) ListResourceManagerNamespaces(ctx context.Context, in *v1.ListResourcesRequest, opts ...grpc.CallOption) (*v1.ListResourcesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListResourceManagerNamespaces", varargs...)
	ret0, _ := ret[0].(*v1.ListResourcesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListResourceManagerNamespaces indicates an expected call of ListResourceManagerNamespaces.
func (mr *MockInternalServiceClientMockRecorder) ListResourceManagerNamespaces(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResourceManagerNamespaces", reflect.TypeOf((*MockInternalServiceClient)(nil).ListResourceManagerNamespaces), varargs...)
}

// ListRoles mocks base method.
func (m *MockInternalServiceClient) ListRoles(ctx context.Context, in *v1.ListRolesRequest, opts ...grpc.CallOption) (*v1.ListRolesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRoles", varargs...)
	ret0, _ := ret[0].(*v1.ListRolesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRoles indicates an expected call of ListRoles.
func (mr *MockInternalServiceClientMockRecorder) ListRoles(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRoles", reflect.TypeOf((*MockInternalServiceClient)(nil).ListRoles), varargs...)
}

// ListUsers mocks base method.
func (m *MockInternalServiceClient) ListUsers(ctx context.Context, in *v1.ListUsersRequest, opts ...grpc.CallOption) (*v1.ListResourcesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListUsers", varargs...)
	ret0, _ := ret[0].(*v1.ListResourcesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockInternalServiceClientMockRecorder) ListUsers(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockInternalServiceClient)(nil).ListUsers), varargs...)
}

// MigrateNamespace mocks base method.
func (m *MockInternalServiceClient) MigrateNamespace(ctx context.Context, in *v1.MigrateNamespaceRequest, opts ...grpc.CallOption) (*v1.MigrateNamespaceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MigrateNamespace", varargs...)
	ret0, _ := ret[0].(*v1.MigrateNamespaceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MigrateNamespace indicates an expected call of MigrateNamespace.
func (mr *MockInternalServiceClientMockRecorder) MigrateNamespace(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MigrateNamespace", reflect.TypeOf((*MockInternalServiceClient)(nil).MigrateNamespace), varargs...)
}

// PlannerDryRun mocks base method.
func (m *MockInternalServiceClient) PlannerDryRun(ctx context.Context, in *v1.PlannerDryRunRequest, opts ...grpc.CallOption) (*v1.PlannerDryRunResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PlannerDryRun", varargs...)
	ret0, _ := ret[0].(*v1.PlannerDryRunResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PlannerDryRun indicates an expected call of PlannerDryRun.
func (mr *MockInternalServiceClientMockRecorder) PlannerDryRun(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PlannerDryRun", reflect.TypeOf((*MockInternalServiceClient)(nil).PlannerDryRun), varargs...)
}

// ProvisionAccount mocks base method.
func (m *MockInternalServiceClient) ProvisionAccount(ctx context.Context, in *v1.ProvisionAccountRequest, opts ...grpc.CallOption) (*v1.ProvisionAccountResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProvisionAccount", varargs...)
	ret0, _ := ret[0].(*v1.ProvisionAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProvisionAccount indicates an expected call of ProvisionAccount.
func (mr *MockInternalServiceClientMockRecorder) ProvisionAccount(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProvisionAccount", reflect.TypeOf((*MockInternalServiceClient)(nil).ProvisionAccount), varargs...)
}

// RollingUpdateTemporalCells mocks base method.
func (m *MockInternalServiceClient) RollingUpdateTemporalCells(ctx context.Context, in *v1.RollingUpdateTemporalCellsRequest, opts ...grpc.CallOption) (*v1.RollingUpdateTemporalCellsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RollingUpdateTemporalCells", varargs...)
	ret0, _ := ret[0].(*v1.RollingUpdateTemporalCellsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RollingUpdateTemporalCells indicates an expected call of RollingUpdateTemporalCells.
func (mr *MockInternalServiceClientMockRecorder) RollingUpdateTemporalCells(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollingUpdateTemporalCells", reflect.TypeOf((*MockInternalServiceClient)(nil).RollingUpdateTemporalCells), varargs...)
}

// SetInternalRolesForUser mocks base method.
func (m *MockInternalServiceClient) SetInternalRolesForUser(ctx context.Context, in *v1.SetInternalRolesForUserRequest, opts ...grpc.CallOption) (*v1.SetInternalRolesForUserResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetInternalRolesForUser", varargs...)
	ret0, _ := ret[0].(*v1.SetInternalRolesForUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetInternalRolesForUser indicates an expected call of SetInternalRolesForUser.
func (mr *MockInternalServiceClientMockRecorder) SetInternalRolesForUser(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetInternalRolesForUser", reflect.TypeOf((*MockInternalServiceClient)(nil).SetInternalRolesForUser), varargs...)
}

// SyncNamespace mocks base method.
func (m *MockInternalServiceClient) SyncNamespace(ctx context.Context, in *v1.UpdateResourceRequest, opts ...grpc.CallOption) (*v1.UpdateResourceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SyncNamespace", varargs...)
	ret0, _ := ret[0].(*v1.UpdateResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyncNamespace indicates an expected call of SyncNamespace.
func (mr *MockInternalServiceClientMockRecorder) SyncNamespace(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncNamespace", reflect.TypeOf((*MockInternalServiceClient)(nil).SyncNamespace), varargs...)
}

// SyncPolicyConfig mocks base method.
func (m *MockInternalServiceClient) SyncPolicyConfig(ctx context.Context, in *v1.SyncPolicyConfigRequest, opts ...grpc.CallOption) (*v1.SyncPolicyConfigResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SyncPolicyConfig", varargs...)
	ret0, _ := ret[0].(*v1.SyncPolicyConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyncPolicyConfig indicates an expected call of SyncPolicyConfig.
func (mr *MockInternalServiceClientMockRecorder) SyncPolicyConfig(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncPolicyConfig", reflect.TypeOf((*MockInternalServiceClient)(nil).SyncPolicyConfig), varargs...)
}

// SyncTieredStorageLifecycleRules mocks base method.
func (m *MockInternalServiceClient) SyncTieredStorageLifecycleRules(ctx context.Context, in *v1.SyncTieredStorageLifecycleRulesRequest, opts ...grpc.CallOption) (*v1.SyncTieredStorageLifecycleRulesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SyncTieredStorageLifecycleRules", varargs...)
	ret0, _ := ret[0].(*v1.SyncTieredStorageLifecycleRulesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyncTieredStorageLifecycleRules indicates an expected call of SyncTieredStorageLifecycleRules.
func (mr *MockInternalServiceClientMockRecorder) SyncTieredStorageLifecycleRules(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncTieredStorageLifecycleRules", reflect.TypeOf((*MockInternalServiceClient)(nil).SyncTieredStorageLifecycleRules), varargs...)
}

// UpdateAccount mocks base method.
func (m *MockInternalServiceClient) UpdateAccount(ctx context.Context, in *v1.UpdateResourceRequest, opts ...grpc.CallOption) (*v1.UpdateResourceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAccount", varargs...)
	ret0, _ := ret[0].(*v1.UpdateResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccount indicates an expected call of UpdateAccount.
func (mr *MockInternalServiceClientMockRecorder) UpdateAccount(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccount", reflect.TypeOf((*MockInternalServiceClient)(nil).UpdateAccount), varargs...)
}

// UpdateAccountInDatabase mocks base method.
func (m *MockInternalServiceClient) UpdateAccountInDatabase(ctx context.Context, in *v1.UpdateResourceRequest, opts ...grpc.CallOption) (*v1.UpdateResourceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAccountInDatabase", varargs...)
	ret0, _ := ret[0].(*v1.UpdateResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccountInDatabase indicates an expected call of UpdateAccountInDatabase.
func (mr *MockInternalServiceClientMockRecorder) UpdateAccountInDatabase(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccountInDatabase", reflect.TypeOf((*MockInternalServiceClient)(nil).UpdateAccountInDatabase), varargs...)
}

// UpdateCell mocks base method.
func (m *MockInternalServiceClient) UpdateCell(ctx context.Context, in *v1.UpdateResourceRequest, opts ...grpc.CallOption) (*v1.UpdateResourceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateCell", varargs...)
	ret0, _ := ret[0].(*v1.UpdateResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCell indicates an expected call of UpdateCell.
func (mr *MockInternalServiceClientMockRecorder) UpdateCell(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCell", reflect.TypeOf((*MockInternalServiceClient)(nil).UpdateCell), varargs...)
}

// UpdateGlobalDynamicConfig mocks base method.
func (m *MockInternalServiceClient) UpdateGlobalDynamicConfig(ctx context.Context, in *v1.UpdateResourceRequest, opts ...grpc.CallOption) (*v1.UpdateResourceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateGlobalDynamicConfig", varargs...)
	ret0, _ := ret[0].(*v1.UpdateResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateGlobalDynamicConfig indicates an expected call of UpdateGlobalDynamicConfig.
func (mr *MockInternalServiceClientMockRecorder) UpdateGlobalDynamicConfig(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGlobalDynamicConfig", reflect.TypeOf((*MockInternalServiceClient)(nil).UpdateGlobalDynamicConfig), varargs...)
}

// UpdateGlobalPolicyConfigFromDatabase mocks base method.
func (m *MockInternalServiceClient) UpdateGlobalPolicyConfigFromDatabase(ctx context.Context, in *v1.UpdateResourceRequest, opts ...grpc.CallOption) (*v1.UpdateResourceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateGlobalPolicyConfigFromDatabase", varargs...)
	ret0, _ := ret[0].(*v1.UpdateResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateGlobalPolicyConfigFromDatabase indicates an expected call of UpdateGlobalPolicyConfigFromDatabase.
func (mr *MockInternalServiceClientMockRecorder) UpdateGlobalPolicyConfigFromDatabase(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGlobalPolicyConfigFromDatabase", reflect.TypeOf((*MockInternalServiceClient)(nil).UpdateGlobalPolicyConfigFromDatabase), varargs...)
}

// UpdateInitialFailoverVersion mocks base method.
func (m *MockInternalServiceClient) UpdateInitialFailoverVersion(ctx context.Context, in *v1.UpdateInitialFailoverVersionRequest, opts ...grpc.CallOption) (*v1.UpdateInitialFailoverVersionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateInitialFailoverVersion", varargs...)
	ret0, _ := ret[0].(*v1.UpdateInitialFailoverVersionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInitialFailoverVersion indicates an expected call of UpdateInitialFailoverVersion.
func (mr *MockInternalServiceClientMockRecorder) UpdateInitialFailoverVersion(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInitialFailoverVersion", reflect.TypeOf((*MockInternalServiceClient)(nil).UpdateInitialFailoverVersion), varargs...)
}

// UpdateNamespace mocks base method.
func (m *MockInternalServiceClient) UpdateNamespace(ctx context.Context, in *v1.UpdateResourceRequest, opts ...grpc.CallOption) (*v1.UpdateResourceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateNamespace", varargs...)
	ret0, _ := ret[0].(*v1.UpdateResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNamespace indicates an expected call of UpdateNamespace.
func (mr *MockInternalServiceClientMockRecorder) UpdateNamespace(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNamespace", reflect.TypeOf((*MockInternalServiceClient)(nil).UpdateNamespace), varargs...)
}

// UpdateNamespaceOperatorSettings mocks base method.
func (m *MockInternalServiceClient) UpdateNamespaceOperatorSettings(ctx context.Context, in *v1.UpdateResourceRequest, opts ...grpc.CallOption) (*v1.UpdateResourceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateNamespaceOperatorSettings", varargs...)
	ret0, _ := ret[0].(*v1.UpdateResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNamespaceOperatorSettings indicates an expected call of UpdateNamespaceOperatorSettings.
func (mr *MockInternalServiceClientMockRecorder) UpdateNamespaceOperatorSettings(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNamespaceOperatorSettings", reflect.TypeOf((*MockInternalServiceClient)(nil).UpdateNamespaceOperatorSettings), varargs...)
}

// UpdateResourceManagerConfig mocks base method.
func (m *MockInternalServiceClient) UpdateResourceManagerConfig(ctx context.Context, in *v1.UpdateResourceRequest, opts ...grpc.CallOption) (*v1.UpdateResourceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateResourceManagerConfig", varargs...)
	ret0, _ := ret[0].(*v1.UpdateResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateResourceManagerConfig indicates an expected call of UpdateResourceManagerConfig.
func (mr *MockInternalServiceClientMockRecorder) UpdateResourceManagerConfig(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateResourceManagerConfig", reflect.TypeOf((*MockInternalServiceClient)(nil).UpdateResourceManagerConfig), varargs...)
}

// UpdateResourceManagerNamespace mocks base method.
func (m *MockInternalServiceClient) UpdateResourceManagerNamespace(ctx context.Context, in *v1.UpdateResourceRequest, opts ...grpc.CallOption) (*v1.UpdateResourceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateResourceManagerNamespace", varargs...)
	ret0, _ := ret[0].(*v1.UpdateResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateResourceManagerNamespace indicates an expected call of UpdateResourceManagerNamespace.
func (mr *MockInternalServiceClientMockRecorder) UpdateResourceManagerNamespace(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateResourceManagerNamespace", reflect.TypeOf((*MockInternalServiceClient)(nil).UpdateResourceManagerNamespace), varargs...)
}

// UpdateRoleInDatabase mocks base method.
func (m *MockInternalServiceClient) UpdateRoleInDatabase(ctx context.Context, in *v1.UpdateResourceRequest, opts ...grpc.CallOption) (*v1.UpdateResourceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRoleInDatabase", varargs...)
	ret0, _ := ret[0].(*v1.UpdateResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRoleInDatabase indicates an expected call of UpdateRoleInDatabase.
func (mr *MockInternalServiceClientMockRecorder) UpdateRoleInDatabase(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoleInDatabase", reflect.TypeOf((*MockInternalServiceClient)(nil).UpdateRoleInDatabase), varargs...)
}

// UpdateUser mocks base method.
func (m *MockInternalServiceClient) UpdateUser(ctx context.Context, in *v1.UpdateResourceRequest, opts ...grpc.CallOption) (*v1.UpdateResourceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateUser", varargs...)
	ret0, _ := ret[0].(*v1.UpdateResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockInternalServiceClientMockRecorder) UpdateUser(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockInternalServiceClient)(nil).UpdateUser), varargs...)
}

// UpsertAccountRoles mocks base method.
func (m *MockInternalServiceClient) UpsertAccountRoles(ctx context.Context, in *v1.UpsertAccountRolesRequest, opts ...grpc.CallOption) (*v1.UpsertAccountRolesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertAccountRoles", varargs...)
	ret0, _ := ret[0].(*v1.UpsertAccountRolesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertAccountRoles indicates an expected call of UpsertAccountRoles.
func (mr *MockInternalServiceClientMockRecorder) UpsertAccountRoles(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertAccountRoles", reflect.TypeOf((*MockInternalServiceClient)(nil).UpsertAccountRoles), varargs...)
}

// ValidateResourceManagerData mocks base method.
func (m *MockInternalServiceClient) ValidateResourceManagerData(ctx context.Context, in *v1.ValidateResourceManagerDataRequest, opts ...grpc.CallOption) (*v1.ValidateResourceManagerDataResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ValidateResourceManagerData", varargs...)
	ret0, _ := ret[0].(*v1.ValidateResourceManagerDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateResourceManagerData indicates an expected call of ValidateResourceManagerData.
func (mr *MockInternalServiceClientMockRecorder) ValidateResourceManagerData(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateResourceManagerData", reflect.TypeOf((*MockInternalServiceClient)(nil).ValidateResourceManagerData), varargs...)
}

// MockInternalServiceServer is a mock of InternalServiceServer interface.
type MockInternalServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockInternalServiceServerMockRecorder
}

// MockInternalServiceServerMockRecorder is the mock recorder for MockInternalServiceServer.
type MockInternalServiceServerMockRecorder struct {
	mock *MockInternalServiceServer
}

// NewMockInternalServiceServer creates a new mock instance.
func NewMockInternalServiceServer(ctrl *gomock.Controller) *MockInternalServiceServer {
	mock := &MockInternalServiceServer{ctrl: ctrl}
	mock.recorder = &MockInternalServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInternalServiceServer) EXPECT() *MockInternalServiceServerMockRecorder {
	return m.recorder
}

// AddAstraCapacity mocks base method.
func (m *MockInternalServiceServer) AddAstraCapacity(arg0 context.Context, arg1 *v1.AddAstraCapacityRequest) (*v1.AddAstraCapacityResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAstraCapacity", arg0, arg1)
	ret0, _ := ret[0].(*v1.AddAstraCapacityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddAstraCapacity indicates an expected call of AddAstraCapacity.
func (mr *MockInternalServiceServerMockRecorder) AddAstraCapacity(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAstraCapacity", reflect.TypeOf((*MockInternalServiceServer)(nil).AddAstraCapacity), arg0, arg1)
}

// AddRolesToUser mocks base method.
func (m *MockInternalServiceServer) AddRolesToUser(arg0 context.Context, arg1 *v1.AddRolesToUserRequest) (*v1.AddRolesToUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRolesToUser", arg0, arg1)
	ret0, _ := ret[0].(*v1.AddRolesToUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddRolesToUser indicates an expected call of AddRolesToUser.
func (mr *MockInternalServiceServerMockRecorder) AddRolesToUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRolesToUser", reflect.TypeOf((*MockInternalServiceServer)(nil).AddRolesToUser), arg0, arg1)
}

// AllocateInitialFailoverVersion mocks base method.
func (m *MockInternalServiceServer) AllocateInitialFailoverVersion(arg0 context.Context, arg1 *v1.AllocateInitialFailoverVersionRequest) (*v1.AllocateInitialFailoverVersionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllocateInitialFailoverVersion", arg0, arg1)
	ret0, _ := ret[0].(*v1.AllocateInitialFailoverVersionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllocateInitialFailoverVersion indicates an expected call of AllocateInitialFailoverVersion.
func (mr *MockInternalServiceServerMockRecorder) AllocateInitialFailoverVersion(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocateInitialFailoverVersion", reflect.TypeOf((*MockInternalServiceServer)(nil).AllocateInitialFailoverVersion), arg0, arg1)
}

// AssignAccount mocks base method.
func (m *MockInternalServiceServer) AssignAccount(arg0 context.Context, arg1 *v1.AssignAccountRequest) (*v1.AssignAccountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignAccount", arg0, arg1)
	ret0, _ := ret[0].(*v1.AssignAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssignAccount indicates an expected call of AssignAccount.
func (mr *MockInternalServiceServerMockRecorder) AssignAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignAccount", reflect.TypeOf((*MockInternalServiceServer)(nil).AssignAccount), arg0, arg1)
}

// BackfillRoles mocks base method.
func (m *MockInternalServiceServer) BackfillRoles(arg0 context.Context, arg1 *v1.BackfillRolesRequest) (*v1.BackfillRolesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BackfillRoles", arg0, arg1)
	ret0, _ := ret[0].(*v1.BackfillRolesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BackfillRoles indicates an expected call of BackfillRoles.
func (mr *MockInternalServiceServerMockRecorder) BackfillRoles(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BackfillRoles", reflect.TypeOf((*MockInternalServiceServer)(nil).BackfillRoles), arg0, arg1)
}

// CreateCell mocks base method.
func (m *MockInternalServiceServer) CreateCell(arg0 context.Context, arg1 *v1.CreateCellRequest) (*v1.CreateCellResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCell", arg0, arg1)
	ret0, _ := ret[0].(*v1.CreateCellResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCell indicates an expected call of CreateCell.
func (mr *MockInternalServiceServerMockRecorder) CreateCell(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCell", reflect.TypeOf((*MockInternalServiceServer)(nil).CreateCell), arg0, arg1)
}

// CreateCellInDatabase mocks base method.
func (m *MockInternalServiceServer) CreateCellInDatabase(arg0 context.Context, arg1 *v1.CreateCellInDatabaseRequest) (*v1.CreateCellInDatabaseResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCellInDatabase", arg0, arg1)
	ret0, _ := ret[0].(*v1.CreateCellInDatabaseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCellInDatabase indicates an expected call of CreateCellInDatabase.
func (mr *MockInternalServiceServerMockRecorder) CreateCellInDatabase(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCellInDatabase", reflect.TypeOf((*MockInternalServiceServer)(nil).CreateCellInDatabase), arg0, arg1)
}

// CreateInternalAPIKey mocks base method.
func (m *MockInternalServiceServer) CreateInternalAPIKey(arg0 context.Context, arg1 *v1.CreateInternalAPIKeyRequest) (*v1.CreateInternalAPIKeyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInternalAPIKey", arg0, arg1)
	ret0, _ := ret[0].(*v1.CreateInternalAPIKeyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInternalAPIKey indicates an expected call of CreateInternalAPIKey.
func (mr *MockInternalServiceServerMockRecorder) CreateInternalAPIKey(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInternalAPIKey", reflect.TypeOf((*MockInternalServiceServer)(nil).CreateInternalAPIKey), arg0, arg1)
}

// CreateInternalRegionalNamespace mocks base method.
func (m *MockInternalServiceServer) CreateInternalRegionalNamespace(arg0 context.Context, arg1 *v1.CreateInternalRegionalNamespaceRequest) (*v1.CreateInternalRegionalNamespaceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInternalRegionalNamespace", arg0, arg1)
	ret0, _ := ret[0].(*v1.CreateInternalRegionalNamespaceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInternalRegionalNamespace indicates an expected call of CreateInternalRegionalNamespace.
func (mr *MockInternalServiceServerMockRecorder) CreateInternalRegionalNamespace(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInternalRegionalNamespace", reflect.TypeOf((*MockInternalServiceServer)(nil).CreateInternalRegionalNamespace), arg0, arg1)
}

// CreateNamespace mocks base method.
func (m *MockInternalServiceServer) CreateNamespace(arg0 context.Context, arg1 *v1.CreateNamespaceRequest) (*v1.CreateNamespaceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNamespace", arg0, arg1)
	ret0, _ := ret[0].(*v1.CreateNamespaceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNamespace indicates an expected call of CreateNamespace.
func (mr *MockInternalServiceServerMockRecorder) CreateNamespace(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNamespace", reflect.TypeOf((*MockInternalServiceServer)(nil).CreateNamespace), arg0, arg1)
}

// CreateRoleInDatabase mocks base method.
func (m *MockInternalServiceServer) CreateRoleInDatabase(arg0 context.Context, arg1 *v1.UpdateResourceRequest) (*v1.UpdateResourceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRoleInDatabase", arg0, arg1)
	ret0, _ := ret[0].(*v1.UpdateResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRoleInDatabase indicates an expected call of CreateRoleInDatabase.
func (mr *MockInternalServiceServerMockRecorder) CreateRoleInDatabase(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRoleInDatabase", reflect.TypeOf((*MockInternalServiceServer)(nil).CreateRoleInDatabase), arg0, arg1)
}

// CreateSAMLConnection mocks base method.
func (m *MockInternalServiceServer) CreateSAMLConnection(arg0 context.Context, arg1 *v1.CreateSAMLConnectionRequest) (*v1.CreateSAMLConnectionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSAMLConnection", arg0, arg1)
	ret0, _ := ret[0].(*v1.CreateSAMLConnectionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSAMLConnection indicates an expected call of CreateSAMLConnection.
func (mr *MockInternalServiceServerMockRecorder) CreateSAMLConnection(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSAMLConnection", reflect.TypeOf((*MockInternalServiceServer)(nil).CreateSAMLConnection), arg0, arg1)
}

// DeleteCell mocks base method.
func (m *MockInternalServiceServer) DeleteCell(arg0 context.Context, arg1 *v1.DeleteCellRequest) (*v1.DeleteCellResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCell", arg0, arg1)
	ret0, _ := ret[0].(*v1.DeleteCellResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCell indicates an expected call of DeleteCell.
func (mr *MockInternalServiceServerMockRecorder) DeleteCell(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCell", reflect.TypeOf((*MockInternalServiceServer)(nil).DeleteCell), arg0, arg1)
}

// DeleteCellInDatabase mocks base method.
func (m *MockInternalServiceServer) DeleteCellInDatabase(arg0 context.Context, arg1 *v1.UpdateResourceRequest) (*v1.UpdateResourceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCellInDatabase", arg0, arg1)
	ret0, _ := ret[0].(*v1.UpdateResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCellInDatabase indicates an expected call of DeleteCellInDatabase.
func (mr *MockInternalServiceServerMockRecorder) DeleteCellInDatabase(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCellInDatabase", reflect.TypeOf((*MockInternalServiceServer)(nil).DeleteCellInDatabase), arg0, arg1)
}

// DeleteInitialFailoverVersion mocks base method.
func (m *MockInternalServiceServer) DeleteInitialFailoverVersion(arg0 context.Context, arg1 *v1.DeleteInitialFailoverVersionRequest) (*v1.DeleteInitialFailoverVersionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInitialFailoverVersion", arg0, arg1)
	ret0, _ := ret[0].(*v1.DeleteInitialFailoverVersionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteInitialFailoverVersion indicates an expected call of DeleteInitialFailoverVersion.
func (mr *MockInternalServiceServerMockRecorder) DeleteInitialFailoverVersion(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInitialFailoverVersion", reflect.TypeOf((*MockInternalServiceServer)(nil).DeleteInitialFailoverVersion), arg0, arg1)
}

// DeleteNamespace mocks base method.
func (m *MockInternalServiceServer) DeleteNamespace(arg0 context.Context, arg1 *v1.UpdateResourceRequest) (*v1.UpdateResourceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNamespace", arg0, arg1)
	ret0, _ := ret[0].(*v1.UpdateResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteNamespace indicates an expected call of DeleteNamespace.
func (mr *MockInternalServiceServerMockRecorder) DeleteNamespace(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNamespace", reflect.TypeOf((*MockInternalServiceServer)(nil).DeleteNamespace), arg0, arg1)
}

// DeleteNamespaceFromDatabase mocks base method.
func (m *MockInternalServiceServer) DeleteNamespaceFromDatabase(arg0 context.Context, arg1 *v1.UpdateResourceRequest) (*v1.UpdateResourceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNamespaceFromDatabase", arg0, arg1)
	ret0, _ := ret[0].(*v1.UpdateResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteNamespaceFromDatabase indicates an expected call of DeleteNamespaceFromDatabase.
func (mr *MockInternalServiceServerMockRecorder) DeleteNamespaceFromDatabase(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNamespaceFromDatabase", reflect.TypeOf((*MockInternalServiceServer)(nil).DeleteNamespaceFromDatabase), arg0, arg1)
}

// DeleteRoleInDatabase mocks base method.
func (m *MockInternalServiceServer) DeleteRoleInDatabase(arg0 context.Context, arg1 *v1.UpdateResourceRequest) (*v1.UpdateResourceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRoleInDatabase", arg0, arg1)
	ret0, _ := ret[0].(*v1.UpdateResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRoleInDatabase indicates an expected call of DeleteRoleInDatabase.
func (mr *MockInternalServiceServerMockRecorder) DeleteRoleInDatabase(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRoleInDatabase", reflect.TypeOf((*MockInternalServiceServer)(nil).DeleteRoleInDatabase), arg0, arg1)
}

// DeleteRolesFromUser mocks base method.
func (m *MockInternalServiceServer) DeleteRolesFromUser(arg0 context.Context, arg1 *v1.DeleteRolesFromUserRequest) (*v1.DeleteRolesFromUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRolesFromUser", arg0, arg1)
	ret0, _ := ret[0].(*v1.DeleteRolesFromUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRolesFromUser indicates an expected call of DeleteRolesFromUser.
func (mr *MockInternalServiceServerMockRecorder) DeleteRolesFromUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRolesFromUser", reflect.TypeOf((*MockInternalServiceServer)(nil).DeleteRolesFromUser), arg0, arg1)
}

// ExpandAccountPool mocks base method.
func (m *MockInternalServiceServer) ExpandAccountPool(arg0 context.Context, arg1 *v1.ExpandAccountPoolRequest) (*v1.ExpandAccountPoolResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExpandAccountPool", arg0, arg1)
	ret0, _ := ret[0].(*v1.ExpandAccountPoolResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExpandAccountPool indicates an expected call of ExpandAccountPool.
func (mr *MockInternalServiceServerMockRecorder) ExpandAccountPool(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExpandAccountPool", reflect.TypeOf((*MockInternalServiceServer)(nil).ExpandAccountPool), arg0, arg1)
}

// GetAPIKey mocks base method.
func (m *MockInternalServiceServer) GetAPIKey(arg0 context.Context, arg1 *v1.GetResourceRequest) (*v1.GetResourceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAPIKey", arg0, arg1)
	ret0, _ := ret[0].(*v1.GetResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPIKey indicates an expected call of GetAPIKey.
func (mr *MockInternalServiceServerMockRecorder) GetAPIKey(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIKey", reflect.TypeOf((*MockInternalServiceServer)(nil).GetAPIKey), arg0, arg1)
}

// GetAccount mocks base method.
func (m *MockInternalServiceServer) GetAccount(arg0 context.Context, arg1 *v1.GetResourceRequest) (*v1.GetResourceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", arg0, arg1)
	ret0, _ := ret[0].(*v1.GetResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockInternalServiceServerMockRecorder) GetAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockInternalServiceServer)(nil).GetAccount), arg0, arg1)
}

// GetAccountFromDatabase mocks base method.
func (m *MockInternalServiceServer) GetAccountFromDatabase(arg0 context.Context, arg1 *v1.GetResourceRequest) (*v1.GetResourceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountFromDatabase", arg0, arg1)
	ret0, _ := ret[0].(*v1.GetResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountFromDatabase indicates an expected call of GetAccountFromDatabase.
func (mr *MockInternalServiceServerMockRecorder) GetAccountFromDatabase(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountFromDatabase", reflect.TypeOf((*MockInternalServiceServer)(nil).GetAccountFromDatabase), arg0, arg1)
}

// GetAuthorizeResultFromOPA mocks base method.
func (m *MockInternalServiceServer) GetAuthorizeResultFromOPA(arg0 context.Context, arg1 *v1.GetAuthorizeResultFromOPARequest) (*v1.GetAuthorizeResultFromOPAResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthorizeResultFromOPA", arg0, arg1)
	ret0, _ := ret[0].(*v1.GetAuthorizeResultFromOPAResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthorizeResultFromOPA indicates an expected call of GetAuthorizeResultFromOPA.
func (mr *MockInternalServiceServerMockRecorder) GetAuthorizeResultFromOPA(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorizeResultFromOPA", reflect.TypeOf((*MockInternalServiceServer)(nil).GetAuthorizeResultFromOPA), arg0, arg1)
}

// GetCell mocks base method.
func (m *MockInternalServiceServer) GetCell(arg0 context.Context, arg1 *v1.GetResourceRequest) (*v1.GetResourceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCell", arg0, arg1)
	ret0, _ := ret[0].(*v1.GetResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCell indicates an expected call of GetCell.
func (mr *MockInternalServiceServerMockRecorder) GetCell(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCell", reflect.TypeOf((*MockInternalServiceServer)(nil).GetCell), arg0, arg1)
}

// GetEntityRequestMap mocks base method.
func (m *MockInternalServiceServer) GetEntityRequestMap(arg0 context.Context, arg1 *v1.GetResourceRequest) (*v1.GetResourceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntityRequestMap", arg0, arg1)
	ret0, _ := ret[0].(*v1.GetResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntityRequestMap indicates an expected call of GetEntityRequestMap.
func (mr *MockInternalServiceServerMockRecorder) GetEntityRequestMap(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntityRequestMap", reflect.TypeOf((*MockInternalServiceServer)(nil).GetEntityRequestMap), arg0, arg1)
}

// GetGlobalDynamicConfig mocks base method.
func (m *MockInternalServiceServer) GetGlobalDynamicConfig(arg0 context.Context, arg1 *v1.GetResourceRequest) (*v1.GetResourceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGlobalDynamicConfig", arg0, arg1)
	ret0, _ := ret[0].(*v1.GetResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGlobalDynamicConfig indicates an expected call of GetGlobalDynamicConfig.
func (mr *MockInternalServiceServerMockRecorder) GetGlobalDynamicConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGlobalDynamicConfig", reflect.TypeOf((*MockInternalServiceServer)(nil).GetGlobalDynamicConfig), arg0, arg1)
}

// GetGlobalPolicyConfigFromDatabase mocks base method.
func (m *MockInternalServiceServer) GetGlobalPolicyConfigFromDatabase(arg0 context.Context, arg1 *v1.GetResourceRequest) (*v1.GetResourceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGlobalPolicyConfigFromDatabase", arg0, arg1)
	ret0, _ := ret[0].(*v1.GetResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGlobalPolicyConfigFromDatabase indicates an expected call of GetGlobalPolicyConfigFromDatabase.
func (mr *MockInternalServiceServerMockRecorder) GetGlobalPolicyConfigFromDatabase(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGlobalPolicyConfigFromDatabase", reflect.TypeOf((*MockInternalServiceServer)(nil).GetGlobalPolicyConfigFromDatabase), arg0, arg1)
}

// GetInitialFailoverVersion mocks base method.
func (m *MockInternalServiceServer) GetInitialFailoverVersion(arg0 context.Context, arg1 *v1.GetInitialFailoverVersionRequest) (*v1.GetInitialFailoverVersionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInitialFailoverVersion", arg0, arg1)
	ret0, _ := ret[0].(*v1.GetInitialFailoverVersionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInitialFailoverVersion indicates an expected call of GetInitialFailoverVersion.
func (mr *MockInternalServiceServerMockRecorder) GetInitialFailoverVersion(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInitialFailoverVersion", reflect.TypeOf((*MockInternalServiceServer)(nil).GetInitialFailoverVersion), arg0, arg1)
}

// GetNamespace mocks base method.
func (m *MockInternalServiceServer) GetNamespace(arg0 context.Context, arg1 *v1.GetResourceRequest) (*v1.GetResourceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNamespace", arg0, arg1)
	ret0, _ := ret[0].(*v1.GetResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNamespace indicates an expected call of GetNamespace.
func (mr *MockInternalServiceServerMockRecorder) GetNamespace(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNamespace", reflect.TypeOf((*MockInternalServiceServer)(nil).GetNamespace), arg0, arg1)
}

// GetRequestStatus mocks base method.
func (m *MockInternalServiceServer) GetRequestStatus(arg0 context.Context, arg1 *v1.GetRequestStatusRequest) (*v1.GetRequestStatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequestStatus", arg0, arg1)
	ret0, _ := ret[0].(*v1.GetRequestStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRequestStatus indicates an expected call of GetRequestStatus.
func (mr *MockInternalServiceServerMockRecorder) GetRequestStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequestStatus", reflect.TypeOf((*MockInternalServiceServer)(nil).GetRequestStatus), arg0, arg1)
}

// GetResourceManagerConfig mocks base method.
func (m *MockInternalServiceServer) GetResourceManagerConfig(arg0 context.Context, arg1 *v1.GetResourceRequest) (*v1.GetResourceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourceManagerConfig", arg0, arg1)
	ret0, _ := ret[0].(*v1.GetResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourceManagerConfig indicates an expected call of GetResourceManagerConfig.
func (mr *MockInternalServiceServerMockRecorder) GetResourceManagerConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceManagerConfig", reflect.TypeOf((*MockInternalServiceServer)(nil).GetResourceManagerConfig), arg0, arg1)
}

// GetResourceManagerNamespace mocks base method.
func (m *MockInternalServiceServer) GetResourceManagerNamespace(arg0 context.Context, arg1 *v1.GetResourceRequest) (*v1.GetResourceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourceManagerNamespace", arg0, arg1)
	ret0, _ := ret[0].(*v1.GetResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourceManagerNamespace indicates an expected call of GetResourceManagerNamespace.
func (mr *MockInternalServiceServerMockRecorder) GetResourceManagerNamespace(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceManagerNamespace", reflect.TypeOf((*MockInternalServiceServer)(nil).GetResourceManagerNamespace), arg0, arg1)
}

// GetRoleFromOPA mocks base method.
func (m *MockInternalServiceServer) GetRoleFromOPA(arg0 context.Context, arg1 *v1.GetResourceRequest) (*v1.GetResourceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoleFromOPA", arg0, arg1)
	ret0, _ := ret[0].(*v1.GetResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoleFromOPA indicates an expected call of GetRoleFromOPA.
func (mr *MockInternalServiceServerMockRecorder) GetRoleFromOPA(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoleFromOPA", reflect.TypeOf((*MockInternalServiceServer)(nil).GetRoleFromOPA), arg0, arg1)
}

// GetRoleInDatabase mocks base method.
func (m *MockInternalServiceServer) GetRoleInDatabase(arg0 context.Context, arg1 *v1.GetResourceRequest) (*v1.GetResourceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoleInDatabase", arg0, arg1)
	ret0, _ := ret[0].(*v1.GetResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoleInDatabase indicates an expected call of GetRoleInDatabase.
func (mr *MockInternalServiceServerMockRecorder) GetRoleInDatabase(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoleInDatabase", reflect.TypeOf((*MockInternalServiceServer)(nil).GetRoleInDatabase), arg0, arg1)
}

// GetSubjectRoleFromOPA mocks base method.
func (m *MockInternalServiceServer) GetSubjectRoleFromOPA(arg0 context.Context, arg1 *v1.GetResourceRequest) (*v1.GetResourceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubjectRoleFromOPA", arg0, arg1)
	ret0, _ := ret[0].(*v1.GetResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubjectRoleFromOPA indicates an expected call of GetSubjectRoleFromOPA.
func (mr *MockInternalServiceServerMockRecorder) GetSubjectRoleFromOPA(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubjectRoleFromOPA", reflect.TypeOf((*MockInternalServiceServer)(nil).GetSubjectRoleFromOPA), arg0, arg1)
}

// GetUser mocks base method.
func (m *MockInternalServiceServer) GetUser(arg0 context.Context, arg1 *v1.GetResourceRequest) (*v1.GetResourceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(*v1.GetResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockInternalServiceServerMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockInternalServiceServer)(nil).GetUser), arg0, arg1)
}

// GetUserRoleFromOPA mocks base method.
func (m *MockInternalServiceServer) GetUserRoleFromOPA(arg0 context.Context, arg1 *v1.GetResourceRequest) (*v1.GetResourceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserRoleFromOPA", arg0, arg1)
	ret0, _ := ret[0].(*v1.GetResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserRoleFromOPA indicates an expected call of GetUserRoleFromOPA.
func (mr *MockInternalServiceServerMockRecorder) GetUserRoleFromOPA(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserRoleFromOPA", reflect.TypeOf((*MockInternalServiceServer)(nil).GetUserRoleFromOPA), arg0, arg1)
}

// GrantEphemeralReadRole mocks base method.
func (m *MockInternalServiceServer) GrantEphemeralReadRole(arg0 context.Context, arg1 *v1.GrantEphemeralReadRoleRequest) (*v1.GrantEphemeralReadRoleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GrantEphemeralReadRole", arg0, arg1)
	ret0, _ := ret[0].(*v1.GrantEphemeralReadRoleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GrantEphemeralReadRole indicates an expected call of GrantEphemeralReadRole.
func (mr *MockInternalServiceServerMockRecorder) GrantEphemeralReadRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GrantEphemeralReadRole", reflect.TypeOf((*MockInternalServiceServer)(nil).GrantEphemeralReadRole), arg0, arg1)
}

// GrantEphemeralRole mocks base method.
func (m *MockInternalServiceServer) GrantEphemeralRole(arg0 context.Context, arg1 *v1.GrantEphemeralRoleRequest) (*v1.GrantEphemeralRoleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GrantEphemeralRole", arg0, arg1)
	ret0, _ := ret[0].(*v1.GrantEphemeralRoleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GrantEphemeralRole indicates an expected call of GrantEphemeralRole.
func (mr *MockInternalServiceServerMockRecorder) GrantEphemeralRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GrantEphemeralRole", reflect.TypeOf((*MockInternalServiceServer)(nil).GrantEphemeralRole), arg0, arg1)
}

// InitializeAccount mocks base method.
func (m *MockInternalServiceServer) InitializeAccount(arg0 context.Context, arg1 *v1.InitializeAccountRequest) (*v1.InitializeAccountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitializeAccount", arg0, arg1)
	ret0, _ := ret[0].(*v1.InitializeAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitializeAccount indicates an expected call of InitializeAccount.
func (mr *MockInternalServiceServerMockRecorder) InitializeAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitializeAccount", reflect.TypeOf((*MockInternalServiceServer)(nil).InitializeAccount), arg0, arg1)
}

// InviteUsers mocks base method.
func (m *MockInternalServiceServer) InviteUsers(arg0 context.Context, arg1 *v1.InviteUsersRequest) (*v1.InviteUsersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InviteUsers", arg0, arg1)
	ret0, _ := ret[0].(*v1.InviteUsersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InviteUsers indicates an expected call of InviteUsers.
func (mr *MockInternalServiceServerMockRecorder) InviteUsers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InviteUsers", reflect.TypeOf((*MockInternalServiceServer)(nil).InviteUsers), arg0, arg1)
}

// ListAPIKeys mocks base method.
func (m *MockInternalServiceServer) ListAPIKeys(arg0 context.Context, arg1 *v1.ListAPIKeysRequest) (*v1.ListResourcesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAPIKeys", arg0, arg1)
	ret0, _ := ret[0].(*v1.ListResourcesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAPIKeys indicates an expected call of ListAPIKeys.
func (mr *MockInternalServiceServerMockRecorder) ListAPIKeys(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAPIKeys", reflect.TypeOf((*MockInternalServiceServer)(nil).ListAPIKeys), arg0, arg1)
}

// ListAccountsInDatabase mocks base method.
func (m *MockInternalServiceServer) ListAccountsInDatabase(arg0 context.Context, arg1 *v1.ListResourcesRequest) (*v1.ListResourcesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccountsInDatabase", arg0, arg1)
	ret0, _ := ret[0].(*v1.ListResourcesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccountsInDatabase indicates an expected call of ListAccountsInDatabase.
func (mr *MockInternalServiceServerMockRecorder) ListAccountsInDatabase(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccountsInDatabase", reflect.TypeOf((*MockInternalServiceServer)(nil).ListAccountsInDatabase), arg0, arg1)
}

// ListCells mocks base method.
func (m *MockInternalServiceServer) ListCells(arg0 context.Context, arg1 *v1.ListResourcesRequest) (*v1.ListResourcesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCells", arg0, arg1)
	ret0, _ := ret[0].(*v1.ListResourcesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCells indicates an expected call of ListCells.
func (mr *MockInternalServiceServerMockRecorder) ListCells(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCells", reflect.TypeOf((*MockInternalServiceServer)(nil).ListCells), arg0, arg1)
}

// ListNamespaces mocks base method.
func (m *MockInternalServiceServer) ListNamespaces(arg0 context.Context, arg1 *v1.ListResourcesRequest) (*v1.ListResourcesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNamespaces", arg0, arg1)
	ret0, _ := ret[0].(*v1.ListResourcesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNamespaces indicates an expected call of ListNamespaces.
func (mr *MockInternalServiceServerMockRecorder) ListNamespaces(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNamespaces", reflect.TypeOf((*MockInternalServiceServer)(nil).ListNamespaces), arg0, arg1)
}

// ListResourceManagerCells mocks base method.
func (m *MockInternalServiceServer) ListResourceManagerCells(arg0 context.Context, arg1 *v1.ListResourcesRequest) (*v1.ListResourcesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListResourceManagerCells", arg0, arg1)
	ret0, _ := ret[0].(*v1.ListResourcesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListResourceManagerCells indicates an expected call of ListResourceManagerCells.
func (mr *MockInternalServiceServerMockRecorder) ListResourceManagerCells(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResourceManagerCells", reflect.TypeOf((*MockInternalServiceServer)(nil).ListResourceManagerCells), arg0, arg1)
}

// ListResourceManagerNamespaces mocks base method.
func (m *MockInternalServiceServer) ListResourceManagerNamespaces(arg0 context.Context, arg1 *v1.ListResourcesRequest) (*v1.ListResourcesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListResourceManagerNamespaces", arg0, arg1)
	ret0, _ := ret[0].(*v1.ListResourcesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListResourceManagerNamespaces indicates an expected call of ListResourceManagerNamespaces.
func (mr *MockInternalServiceServerMockRecorder) ListResourceManagerNamespaces(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResourceManagerNamespaces", reflect.TypeOf((*MockInternalServiceServer)(nil).ListResourceManagerNamespaces), arg0, arg1)
}

// ListRoles mocks base method.
func (m *MockInternalServiceServer) ListRoles(arg0 context.Context, arg1 *v1.ListRolesRequest) (*v1.ListRolesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRoles", arg0, arg1)
	ret0, _ := ret[0].(*v1.ListRolesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRoles indicates an expected call of ListRoles.
func (mr *MockInternalServiceServerMockRecorder) ListRoles(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRoles", reflect.TypeOf((*MockInternalServiceServer)(nil).ListRoles), arg0, arg1)
}

// ListUsers mocks base method.
func (m *MockInternalServiceServer) ListUsers(arg0 context.Context, arg1 *v1.ListUsersRequest) (*v1.ListResourcesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", arg0, arg1)
	ret0, _ := ret[0].(*v1.ListResourcesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockInternalServiceServerMockRecorder) ListUsers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockInternalServiceServer)(nil).ListUsers), arg0, arg1)
}

// MigrateNamespace mocks base method.
func (m *MockInternalServiceServer) MigrateNamespace(arg0 context.Context, arg1 *v1.MigrateNamespaceRequest) (*v1.MigrateNamespaceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MigrateNamespace", arg0, arg1)
	ret0, _ := ret[0].(*v1.MigrateNamespaceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MigrateNamespace indicates an expected call of MigrateNamespace.
func (mr *MockInternalServiceServerMockRecorder) MigrateNamespace(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MigrateNamespace", reflect.TypeOf((*MockInternalServiceServer)(nil).MigrateNamespace), arg0, arg1)
}

// PlannerDryRun mocks base method.
func (m *MockInternalServiceServer) PlannerDryRun(arg0 context.Context, arg1 *v1.PlannerDryRunRequest) (*v1.PlannerDryRunResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PlannerDryRun", arg0, arg1)
	ret0, _ := ret[0].(*v1.PlannerDryRunResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PlannerDryRun indicates an expected call of PlannerDryRun.
func (mr *MockInternalServiceServerMockRecorder) PlannerDryRun(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PlannerDryRun", reflect.TypeOf((*MockInternalServiceServer)(nil).PlannerDryRun), arg0, arg1)
}

// ProvisionAccount mocks base method.
func (m *MockInternalServiceServer) ProvisionAccount(arg0 context.Context, arg1 *v1.ProvisionAccountRequest) (*v1.ProvisionAccountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProvisionAccount", arg0, arg1)
	ret0, _ := ret[0].(*v1.ProvisionAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProvisionAccount indicates an expected call of ProvisionAccount.
func (mr *MockInternalServiceServerMockRecorder) ProvisionAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProvisionAccount", reflect.TypeOf((*MockInternalServiceServer)(nil).ProvisionAccount), arg0, arg1)
}

// RollingUpdateTemporalCells mocks base method.
func (m *MockInternalServiceServer) RollingUpdateTemporalCells(arg0 context.Context, arg1 *v1.RollingUpdateTemporalCellsRequest) (*v1.RollingUpdateTemporalCellsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollingUpdateTemporalCells", arg0, arg1)
	ret0, _ := ret[0].(*v1.RollingUpdateTemporalCellsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RollingUpdateTemporalCells indicates an expected call of RollingUpdateTemporalCells.
func (mr *MockInternalServiceServerMockRecorder) RollingUpdateTemporalCells(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollingUpdateTemporalCells", reflect.TypeOf((*MockInternalServiceServer)(nil).RollingUpdateTemporalCells), arg0, arg1)
}

// SetInternalRolesForUser mocks base method.
func (m *MockInternalServiceServer) SetInternalRolesForUser(arg0 context.Context, arg1 *v1.SetInternalRolesForUserRequest) (*v1.SetInternalRolesForUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetInternalRolesForUser", arg0, arg1)
	ret0, _ := ret[0].(*v1.SetInternalRolesForUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetInternalRolesForUser indicates an expected call of SetInternalRolesForUser.
func (mr *MockInternalServiceServerMockRecorder) SetInternalRolesForUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetInternalRolesForUser", reflect.TypeOf((*MockInternalServiceServer)(nil).SetInternalRolesForUser), arg0, arg1)
}

// SyncNamespace mocks base method.
func (m *MockInternalServiceServer) SyncNamespace(arg0 context.Context, arg1 *v1.UpdateResourceRequest) (*v1.UpdateResourceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncNamespace", arg0, arg1)
	ret0, _ := ret[0].(*v1.UpdateResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyncNamespace indicates an expected call of SyncNamespace.
func (mr *MockInternalServiceServerMockRecorder) SyncNamespace(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncNamespace", reflect.TypeOf((*MockInternalServiceServer)(nil).SyncNamespace), arg0, arg1)
}

// SyncPolicyConfig mocks base method.
func (m *MockInternalServiceServer) SyncPolicyConfig(arg0 context.Context, arg1 *v1.SyncPolicyConfigRequest) (*v1.SyncPolicyConfigResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncPolicyConfig", arg0, arg1)
	ret0, _ := ret[0].(*v1.SyncPolicyConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyncPolicyConfig indicates an expected call of SyncPolicyConfig.
func (mr *MockInternalServiceServerMockRecorder) SyncPolicyConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncPolicyConfig", reflect.TypeOf((*MockInternalServiceServer)(nil).SyncPolicyConfig), arg0, arg1)
}

// SyncTieredStorageLifecycleRules mocks base method.
func (m *MockInternalServiceServer) SyncTieredStorageLifecycleRules(arg0 context.Context, arg1 *v1.SyncTieredStorageLifecycleRulesRequest) (*v1.SyncTieredStorageLifecycleRulesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncTieredStorageLifecycleRules", arg0, arg1)
	ret0, _ := ret[0].(*v1.SyncTieredStorageLifecycleRulesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyncTieredStorageLifecycleRules indicates an expected call of SyncTieredStorageLifecycleRules.
func (mr *MockInternalServiceServerMockRecorder) SyncTieredStorageLifecycleRules(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncTieredStorageLifecycleRules", reflect.TypeOf((*MockInternalServiceServer)(nil).SyncTieredStorageLifecycleRules), arg0, arg1)
}

// UpdateAccount mocks base method.
func (m *MockInternalServiceServer) UpdateAccount(arg0 context.Context, arg1 *v1.UpdateResourceRequest) (*v1.UpdateResourceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccount", arg0, arg1)
	ret0, _ := ret[0].(*v1.UpdateResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccount indicates an expected call of UpdateAccount.
func (mr *MockInternalServiceServerMockRecorder) UpdateAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccount", reflect.TypeOf((*MockInternalServiceServer)(nil).UpdateAccount), arg0, arg1)
}

// UpdateAccountInDatabase mocks base method.
func (m *MockInternalServiceServer) UpdateAccountInDatabase(arg0 context.Context, arg1 *v1.UpdateResourceRequest) (*v1.UpdateResourceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccountInDatabase", arg0, arg1)
	ret0, _ := ret[0].(*v1.UpdateResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccountInDatabase indicates an expected call of UpdateAccountInDatabase.
func (mr *MockInternalServiceServerMockRecorder) UpdateAccountInDatabase(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccountInDatabase", reflect.TypeOf((*MockInternalServiceServer)(nil).UpdateAccountInDatabase), arg0, arg1)
}

// UpdateCell mocks base method.
func (m *MockInternalServiceServer) UpdateCell(arg0 context.Context, arg1 *v1.UpdateResourceRequest) (*v1.UpdateResourceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCell", arg0, arg1)
	ret0, _ := ret[0].(*v1.UpdateResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCell indicates an expected call of UpdateCell.
func (mr *MockInternalServiceServerMockRecorder) UpdateCell(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCell", reflect.TypeOf((*MockInternalServiceServer)(nil).UpdateCell), arg0, arg1)
}

// UpdateGlobalDynamicConfig mocks base method.
func (m *MockInternalServiceServer) UpdateGlobalDynamicConfig(arg0 context.Context, arg1 *v1.UpdateResourceRequest) (*v1.UpdateResourceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGlobalDynamicConfig", arg0, arg1)
	ret0, _ := ret[0].(*v1.UpdateResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateGlobalDynamicConfig indicates an expected call of UpdateGlobalDynamicConfig.
func (mr *MockInternalServiceServerMockRecorder) UpdateGlobalDynamicConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGlobalDynamicConfig", reflect.TypeOf((*MockInternalServiceServer)(nil).UpdateGlobalDynamicConfig), arg0, arg1)
}

// UpdateGlobalPolicyConfigFromDatabase mocks base method.
func (m *MockInternalServiceServer) UpdateGlobalPolicyConfigFromDatabase(arg0 context.Context, arg1 *v1.UpdateResourceRequest) (*v1.UpdateResourceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGlobalPolicyConfigFromDatabase", arg0, arg1)
	ret0, _ := ret[0].(*v1.UpdateResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateGlobalPolicyConfigFromDatabase indicates an expected call of UpdateGlobalPolicyConfigFromDatabase.
func (mr *MockInternalServiceServerMockRecorder) UpdateGlobalPolicyConfigFromDatabase(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGlobalPolicyConfigFromDatabase", reflect.TypeOf((*MockInternalServiceServer)(nil).UpdateGlobalPolicyConfigFromDatabase), arg0, arg1)
}

// UpdateInitialFailoverVersion mocks base method.
func (m *MockInternalServiceServer) UpdateInitialFailoverVersion(arg0 context.Context, arg1 *v1.UpdateInitialFailoverVersionRequest) (*v1.UpdateInitialFailoverVersionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInitialFailoverVersion", arg0, arg1)
	ret0, _ := ret[0].(*v1.UpdateInitialFailoverVersionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInitialFailoverVersion indicates an expected call of UpdateInitialFailoverVersion.
func (mr *MockInternalServiceServerMockRecorder) UpdateInitialFailoverVersion(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInitialFailoverVersion", reflect.TypeOf((*MockInternalServiceServer)(nil).UpdateInitialFailoverVersion), arg0, arg1)
}

// UpdateNamespace mocks base method.
func (m *MockInternalServiceServer) UpdateNamespace(arg0 context.Context, arg1 *v1.UpdateResourceRequest) (*v1.UpdateResourceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNamespace", arg0, arg1)
	ret0, _ := ret[0].(*v1.UpdateResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNamespace indicates an expected call of UpdateNamespace.
func (mr *MockInternalServiceServerMockRecorder) UpdateNamespace(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNamespace", reflect.TypeOf((*MockInternalServiceServer)(nil).UpdateNamespace), arg0, arg1)
}

// UpdateNamespaceOperatorSettings mocks base method.
func (m *MockInternalServiceServer) UpdateNamespaceOperatorSettings(arg0 context.Context, arg1 *v1.UpdateResourceRequest) (*v1.UpdateResourceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNamespaceOperatorSettings", arg0, arg1)
	ret0, _ := ret[0].(*v1.UpdateResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNamespaceOperatorSettings indicates an expected call of UpdateNamespaceOperatorSettings.
func (mr *MockInternalServiceServerMockRecorder) UpdateNamespaceOperatorSettings(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNamespaceOperatorSettings", reflect.TypeOf((*MockInternalServiceServer)(nil).UpdateNamespaceOperatorSettings), arg0, arg1)
}

// UpdateResourceManagerConfig mocks base method.
func (m *MockInternalServiceServer) UpdateResourceManagerConfig(arg0 context.Context, arg1 *v1.UpdateResourceRequest) (*v1.UpdateResourceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateResourceManagerConfig", arg0, arg1)
	ret0, _ := ret[0].(*v1.UpdateResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateResourceManagerConfig indicates an expected call of UpdateResourceManagerConfig.
func (mr *MockInternalServiceServerMockRecorder) UpdateResourceManagerConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateResourceManagerConfig", reflect.TypeOf((*MockInternalServiceServer)(nil).UpdateResourceManagerConfig), arg0, arg1)
}

// UpdateResourceManagerNamespace mocks base method.
func (m *MockInternalServiceServer) UpdateResourceManagerNamespace(arg0 context.Context, arg1 *v1.UpdateResourceRequest) (*v1.UpdateResourceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateResourceManagerNamespace", arg0, arg1)
	ret0, _ := ret[0].(*v1.UpdateResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateResourceManagerNamespace indicates an expected call of UpdateResourceManagerNamespace.
func (mr *MockInternalServiceServerMockRecorder) UpdateResourceManagerNamespace(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateResourceManagerNamespace", reflect.TypeOf((*MockInternalServiceServer)(nil).UpdateResourceManagerNamespace), arg0, arg1)
}

// UpdateRoleInDatabase mocks base method.
func (m *MockInternalServiceServer) UpdateRoleInDatabase(arg0 context.Context, arg1 *v1.UpdateResourceRequest) (*v1.UpdateResourceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRoleInDatabase", arg0, arg1)
	ret0, _ := ret[0].(*v1.UpdateResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRoleInDatabase indicates an expected call of UpdateRoleInDatabase.
func (mr *MockInternalServiceServerMockRecorder) UpdateRoleInDatabase(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoleInDatabase", reflect.TypeOf((*MockInternalServiceServer)(nil).UpdateRoleInDatabase), arg0, arg1)
}

// UpdateUser mocks base method.
func (m *MockInternalServiceServer) UpdateUser(arg0 context.Context, arg1 *v1.UpdateResourceRequest) (*v1.UpdateResourceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1)
	ret0, _ := ret[0].(*v1.UpdateResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockInternalServiceServerMockRecorder) UpdateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockInternalServiceServer)(nil).UpdateUser), arg0, arg1)
}

// UpsertAccountRoles mocks base method.
func (m *MockInternalServiceServer) UpsertAccountRoles(arg0 context.Context, arg1 *v1.UpsertAccountRolesRequest) (*v1.UpsertAccountRolesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertAccountRoles", arg0, arg1)
	ret0, _ := ret[0].(*v1.UpsertAccountRolesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertAccountRoles indicates an expected call of UpsertAccountRoles.
func (mr *MockInternalServiceServerMockRecorder) UpsertAccountRoles(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertAccountRoles", reflect.TypeOf((*MockInternalServiceServer)(nil).UpsertAccountRoles), arg0, arg1)
}

// ValidateResourceManagerData mocks base method.
func (m *MockInternalServiceServer) ValidateResourceManagerData(arg0 context.Context, arg1 *v1.ValidateResourceManagerDataRequest) (*v1.ValidateResourceManagerDataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateResourceManagerData", arg0, arg1)
	ret0, _ := ret[0].(*v1.ValidateResourceManagerDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateResourceManagerData indicates an expected call of ValidateResourceManagerData.
func (mr *MockInternalServiceServerMockRecorder) ValidateResourceManagerData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateResourceManagerData", reflect.TypeOf((*MockInternalServiceServer)(nil).ValidateResourceManagerData), arg0, arg1)
}
