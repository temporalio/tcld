// Code generated by MockGen. DO NOT EDIT.
// Source: services/saasapi/ui/service.pb.go

// Package servicesmock is a generated GoMock package.
package servicesmock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	ui "github.com/temporalio/tcld/protogen/services/saasapi/ui"
	grpc "google.golang.org/grpc"
)

// MockUIServiceClient is a mock of UIServiceClient interface.
type MockUIServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockUIServiceClientMockRecorder
}

// MockUIServiceClientMockRecorder is the mock recorder for MockUIServiceClient.
type MockUIServiceClientMockRecorder struct {
	mock *MockUIServiceClient
}

// NewMockUIServiceClient creates a new mock instance.
func NewMockUIServiceClient(ctrl *gomock.Controller) *MockUIServiceClient {
	mock := &MockUIServiceClient{ctrl: ctrl}
	mock.recorder = &MockUIServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUIServiceClient) EXPECT() *MockUIServiceClientMockRecorder {
	return m.recorder
}

// GetUsersForNamespace mocks base method.
func (m *MockUIServiceClient) GetUsersForNamespace(ctx context.Context, in *ui.GetUsersForNamespaceRequest, opts ...grpc.CallOption) (*ui.GetUsersForNamespaceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUsersForNamespace", varargs...)
	ret0, _ := ret[0].(*ui.GetUsersForNamespaceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersForNamespace indicates an expected call of GetUsersForNamespace.
func (mr *MockUIServiceClientMockRecorder) GetUsersForNamespace(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersForNamespace", reflect.TypeOf((*MockUIServiceClient)(nil).GetUsersForNamespace), varargs...)
}

// GetUsersWithAccountRoles mocks base method.
func (m *MockUIServiceClient) GetUsersWithAccountRoles(ctx context.Context, in *ui.GetUsersWithAccountRolesRequest, opts ...grpc.CallOption) (*ui.GetUsersWithAccountRolesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUsersWithAccountRoles", varargs...)
	ret0, _ := ret[0].(*ui.GetUsersWithAccountRolesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersWithAccountRoles indicates an expected call of GetUsersWithAccountRoles.
func (mr *MockUIServiceClientMockRecorder) GetUsersWithAccountRoles(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersWithAccountRoles", reflect.TypeOf((*MockUIServiceClient)(nil).GetUsersWithAccountRoles), varargs...)
}

// ListNamespacesWithURI mocks base method.
func (m *MockUIServiceClient) ListNamespacesWithURI(ctx context.Context, in *ui.ListNamespacesWithURIRequest, opts ...grpc.CallOption) (*ui.ListNamespacesWithURIResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListNamespacesWithURI", varargs...)
	ret0, _ := ret[0].(*ui.ListNamespacesWithURIResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNamespacesWithURI indicates an expected call of ListNamespacesWithURI.
func (mr *MockUIServiceClientMockRecorder) ListNamespacesWithURI(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNamespacesWithURI", reflect.TypeOf((*MockUIServiceClient)(nil).ListNamespacesWithURI), varargs...)
}

// SyncCurrentUserInvite mocks base method.
func (m *MockUIServiceClient) SyncCurrentUserInvite(ctx context.Context, in *ui.SyncCurrentUserInviteRequest, opts ...grpc.CallOption) (*ui.SyncCurrentUserInviteResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SyncCurrentUserInvite", varargs...)
	ret0, _ := ret[0].(*ui.SyncCurrentUserInviteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyncCurrentUserInvite indicates an expected call of SyncCurrentUserInvite.
func (mr *MockUIServiceClientMockRecorder) SyncCurrentUserInvite(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncCurrentUserInvite", reflect.TypeOf((*MockUIServiceClient)(nil).SyncCurrentUserInvite), varargs...)
}

// MockUIServiceServer is a mock of UIServiceServer interface.
type MockUIServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUIServiceServerMockRecorder
}

// MockUIServiceServerMockRecorder is the mock recorder for MockUIServiceServer.
type MockUIServiceServerMockRecorder struct {
	mock *MockUIServiceServer
}

// NewMockUIServiceServer creates a new mock instance.
func NewMockUIServiceServer(ctrl *gomock.Controller) *MockUIServiceServer {
	mock := &MockUIServiceServer{ctrl: ctrl}
	mock.recorder = &MockUIServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUIServiceServer) EXPECT() *MockUIServiceServerMockRecorder {
	return m.recorder
}

// GetUsersForNamespace mocks base method.
func (m *MockUIServiceServer) GetUsersForNamespace(arg0 context.Context, arg1 *ui.GetUsersForNamespaceRequest) (*ui.GetUsersForNamespaceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersForNamespace", arg0, arg1)
	ret0, _ := ret[0].(*ui.GetUsersForNamespaceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersForNamespace indicates an expected call of GetUsersForNamespace.
func (mr *MockUIServiceServerMockRecorder) GetUsersForNamespace(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersForNamespace", reflect.TypeOf((*MockUIServiceServer)(nil).GetUsersForNamespace), arg0, arg1)
}

// GetUsersWithAccountRoles mocks base method.
func (m *MockUIServiceServer) GetUsersWithAccountRoles(arg0 context.Context, arg1 *ui.GetUsersWithAccountRolesRequest) (*ui.GetUsersWithAccountRolesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersWithAccountRoles", arg0, arg1)
	ret0, _ := ret[0].(*ui.GetUsersWithAccountRolesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersWithAccountRoles indicates an expected call of GetUsersWithAccountRoles.
func (mr *MockUIServiceServerMockRecorder) GetUsersWithAccountRoles(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersWithAccountRoles", reflect.TypeOf((*MockUIServiceServer)(nil).GetUsersWithAccountRoles), arg0, arg1)
}

// ListNamespacesWithURI mocks base method.
func (m *MockUIServiceServer) ListNamespacesWithURI(arg0 context.Context, arg1 *ui.ListNamespacesWithURIRequest) (*ui.ListNamespacesWithURIResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNamespacesWithURI", arg0, arg1)
	ret0, _ := ret[0].(*ui.ListNamespacesWithURIResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNamespacesWithURI indicates an expected call of ListNamespacesWithURI.
func (mr *MockUIServiceServerMockRecorder) ListNamespacesWithURI(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNamespacesWithURI", reflect.TypeOf((*MockUIServiceServer)(nil).ListNamespacesWithURI), arg0, arg1)
}

// SyncCurrentUserInvite mocks base method.
func (m *MockUIServiceServer) SyncCurrentUserInvite(arg0 context.Context, arg1 *ui.SyncCurrentUserInviteRequest) (*ui.SyncCurrentUserInviteResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncCurrentUserInvite", arg0, arg1)
	ret0, _ := ret[0].(*ui.SyncCurrentUserInviteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyncCurrentUserInvite indicates an expected call of SyncCurrentUserInvite.
func (mr *MockUIServiceServerMockRecorder) SyncCurrentUserInvite(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncCurrentUserInvite", reflect.TypeOf((*MockUIServiceServer)(nil).SyncCurrentUserInvite), arg0, arg1)
}
