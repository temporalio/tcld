// Code generated by MockGen. DO NOT EDIT.
// Source: temporal/api/cloud/cloudservice/v1/service.pb.go

// Package temporalmock is a generated GoMock package.
package temporalmock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	cloudservice "github.com/temporalio/tcld/protogen/api/cloud/cloudservice/v1"
	grpc "google.golang.org/grpc"
)

// MockCloudServiceClient is a mock of CloudServiceClient interface.
type MockCloudServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockCloudServiceClientMockRecorder
}

// MockCloudServiceClientMockRecorder is the mock recorder for MockCloudServiceClient.
type MockCloudServiceClientMockRecorder struct {
	mock *MockCloudServiceClient
}

// NewMockCloudServiceClient creates a new mock instance.
func NewMockCloudServiceClient(ctrl *gomock.Controller) *MockCloudServiceClient {
	mock := &MockCloudServiceClient{ctrl: ctrl}
	mock.recorder = &MockCloudServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloudServiceClient) EXPECT() *MockCloudServiceClientMockRecorder {
	return m.recorder
}

// AbortMigration mocks base method.
func (m *MockCloudServiceClient) AbortMigration(ctx context.Context, in *cloudservice.AbortMigrationRequest, opts ...grpc.CallOption) (*cloudservice.AbortMigrationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AbortMigration", varargs...)
	ret0, _ := ret[0].(*cloudservice.AbortMigrationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AbortMigration indicates an expected call of AbortMigration.
func (mr *MockCloudServiceClientMockRecorder) AbortMigration(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AbortMigration", reflect.TypeOf((*MockCloudServiceClient)(nil).AbortMigration), varargs...)
}

// AddNamespaceRegion mocks base method.
func (m *MockCloudServiceClient) AddNamespaceRegion(ctx context.Context, in *cloudservice.AddNamespaceRegionRequest, opts ...grpc.CallOption) (*cloudservice.AddNamespaceRegionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddNamespaceRegion", varargs...)
	ret0, _ := ret[0].(*cloudservice.AddNamespaceRegionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddNamespaceRegion indicates an expected call of AddNamespaceRegion.
func (mr *MockCloudServiceClientMockRecorder) AddNamespaceRegion(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNamespaceRegion", reflect.TypeOf((*MockCloudServiceClient)(nil).AddNamespaceRegion), varargs...)
}

// ConfirmMigration mocks base method.
func (m *MockCloudServiceClient) ConfirmMigration(ctx context.Context, in *cloudservice.ConfirmMigrationRequest, opts ...grpc.CallOption) (*cloudservice.ConfirmMigrationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ConfirmMigration", varargs...)
	ret0, _ := ret[0].(*cloudservice.ConfirmMigrationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfirmMigration indicates an expected call of ConfirmMigration.
func (mr *MockCloudServiceClientMockRecorder) ConfirmMigration(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfirmMigration", reflect.TypeOf((*MockCloudServiceClient)(nil).ConfirmMigration), varargs...)
}

// CreateApiKey mocks base method.
func (m *MockCloudServiceClient) CreateApiKey(ctx context.Context, in *cloudservice.CreateApiKeyRequest, opts ...grpc.CallOption) (*cloudservice.CreateApiKeyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateApiKey", varargs...)
	ret0, _ := ret[0].(*cloudservice.CreateApiKeyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateApiKey indicates an expected call of CreateApiKey.
func (mr *MockCloudServiceClientMockRecorder) CreateApiKey(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApiKey", reflect.TypeOf((*MockCloudServiceClient)(nil).CreateApiKey), varargs...)
}

// CreateNamespace mocks base method.
func (m *MockCloudServiceClient) CreateNamespace(ctx context.Context, in *cloudservice.CreateNamespaceRequest, opts ...grpc.CallOption) (*cloudservice.CreateNamespaceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateNamespace", varargs...)
	ret0, _ := ret[0].(*cloudservice.CreateNamespaceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNamespace indicates an expected call of CreateNamespace.
func (mr *MockCloudServiceClientMockRecorder) CreateNamespace(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNamespace", reflect.TypeOf((*MockCloudServiceClient)(nil).CreateNamespace), varargs...)
}

// CreateNamespaceExportSink mocks base method.
func (m *MockCloudServiceClient) CreateNamespaceExportSink(ctx context.Context, in *cloudservice.CreateNamespaceExportSinkRequest, opts ...grpc.CallOption) (*cloudservice.CreateNamespaceExportSinkResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateNamespaceExportSink", varargs...)
	ret0, _ := ret[0].(*cloudservice.CreateNamespaceExportSinkResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNamespaceExportSink indicates an expected call of CreateNamespaceExportSink.
func (mr *MockCloudServiceClientMockRecorder) CreateNamespaceExportSink(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNamespaceExportSink", reflect.TypeOf((*MockCloudServiceClient)(nil).CreateNamespaceExportSink), varargs...)
}

// CreateNexusEndpoint mocks base method.
func (m *MockCloudServiceClient) CreateNexusEndpoint(ctx context.Context, in *cloudservice.CreateNexusEndpointRequest, opts ...grpc.CallOption) (*cloudservice.CreateNexusEndpointResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateNexusEndpoint", varargs...)
	ret0, _ := ret[0].(*cloudservice.CreateNexusEndpointResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNexusEndpoint indicates an expected call of CreateNexusEndpoint.
func (mr *MockCloudServiceClientMockRecorder) CreateNexusEndpoint(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNexusEndpoint", reflect.TypeOf((*MockCloudServiceClient)(nil).CreateNexusEndpoint), varargs...)
}

// CreateServiceAccount mocks base method.
func (m *MockCloudServiceClient) CreateServiceAccount(ctx context.Context, in *cloudservice.CreateServiceAccountRequest, opts ...grpc.CallOption) (*cloudservice.CreateServiceAccountResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateServiceAccount", varargs...)
	ret0, _ := ret[0].(*cloudservice.CreateServiceAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateServiceAccount indicates an expected call of CreateServiceAccount.
func (mr *MockCloudServiceClientMockRecorder) CreateServiceAccount(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServiceAccount", reflect.TypeOf((*MockCloudServiceClient)(nil).CreateServiceAccount), varargs...)
}

// CreateUser mocks base method.
func (m *MockCloudServiceClient) CreateUser(ctx context.Context, in *cloudservice.CreateUserRequest, opts ...grpc.CallOption) (*cloudservice.CreateUserResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateUser", varargs...)
	ret0, _ := ret[0].(*cloudservice.CreateUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockCloudServiceClientMockRecorder) CreateUser(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockCloudServiceClient)(nil).CreateUser), varargs...)
}

// CreateUserGroup mocks base method.
func (m *MockCloudServiceClient) CreateUserGroup(ctx context.Context, in *cloudservice.CreateUserGroupRequest, opts ...grpc.CallOption) (*cloudservice.CreateUserGroupResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateUserGroup", varargs...)
	ret0, _ := ret[0].(*cloudservice.CreateUserGroupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserGroup indicates an expected call of CreateUserGroup.
func (mr *MockCloudServiceClientMockRecorder) CreateUserGroup(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserGroup", reflect.TypeOf((*MockCloudServiceClient)(nil).CreateUserGroup), varargs...)
}

// DeleteApiKey mocks base method.
func (m *MockCloudServiceClient) DeleteApiKey(ctx context.Context, in *cloudservice.DeleteApiKeyRequest, opts ...grpc.CallOption) (*cloudservice.DeleteApiKeyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteApiKey", varargs...)
	ret0, _ := ret[0].(*cloudservice.DeleteApiKeyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteApiKey indicates an expected call of DeleteApiKey.
func (mr *MockCloudServiceClientMockRecorder) DeleteApiKey(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApiKey", reflect.TypeOf((*MockCloudServiceClient)(nil).DeleteApiKey), varargs...)
}

// DeleteNamespace mocks base method.
func (m *MockCloudServiceClient) DeleteNamespace(ctx context.Context, in *cloudservice.DeleteNamespaceRequest, opts ...grpc.CallOption) (*cloudservice.DeleteNamespaceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteNamespace", varargs...)
	ret0, _ := ret[0].(*cloudservice.DeleteNamespaceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteNamespace indicates an expected call of DeleteNamespace.
func (mr *MockCloudServiceClientMockRecorder) DeleteNamespace(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNamespace", reflect.TypeOf((*MockCloudServiceClient)(nil).DeleteNamespace), varargs...)
}

// DeleteNamespaceExportSink mocks base method.
func (m *MockCloudServiceClient) DeleteNamespaceExportSink(ctx context.Context, in *cloudservice.DeleteNamespaceExportSinkRequest, opts ...grpc.CallOption) (*cloudservice.DeleteNamespaceExportSinkResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteNamespaceExportSink", varargs...)
	ret0, _ := ret[0].(*cloudservice.DeleteNamespaceExportSinkResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteNamespaceExportSink indicates an expected call of DeleteNamespaceExportSink.
func (mr *MockCloudServiceClientMockRecorder) DeleteNamespaceExportSink(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNamespaceExportSink", reflect.TypeOf((*MockCloudServiceClient)(nil).DeleteNamespaceExportSink), varargs...)
}

// DeleteNamespaceRegion mocks base method.
func (m *MockCloudServiceClient) DeleteNamespaceRegion(ctx context.Context, in *cloudservice.DeleteNamespaceRegionRequest, opts ...grpc.CallOption) (*cloudservice.DeleteNamespaceRegionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteNamespaceRegion", varargs...)
	ret0, _ := ret[0].(*cloudservice.DeleteNamespaceRegionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteNamespaceRegion indicates an expected call of DeleteNamespaceRegion.
func (mr *MockCloudServiceClientMockRecorder) DeleteNamespaceRegion(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNamespaceRegion", reflect.TypeOf((*MockCloudServiceClient)(nil).DeleteNamespaceRegion), varargs...)
}

// DeleteNexusEndpoint mocks base method.
func (m *MockCloudServiceClient) DeleteNexusEndpoint(ctx context.Context, in *cloudservice.DeleteNexusEndpointRequest, opts ...grpc.CallOption) (*cloudservice.DeleteNexusEndpointResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteNexusEndpoint", varargs...)
	ret0, _ := ret[0].(*cloudservice.DeleteNexusEndpointResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteNexusEndpoint indicates an expected call of DeleteNexusEndpoint.
func (mr *MockCloudServiceClientMockRecorder) DeleteNexusEndpoint(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNexusEndpoint", reflect.TypeOf((*MockCloudServiceClient)(nil).DeleteNexusEndpoint), varargs...)
}

// DeleteServiceAccount mocks base method.
func (m *MockCloudServiceClient) DeleteServiceAccount(ctx context.Context, in *cloudservice.DeleteServiceAccountRequest, opts ...grpc.CallOption) (*cloudservice.DeleteServiceAccountResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteServiceAccount", varargs...)
	ret0, _ := ret[0].(*cloudservice.DeleteServiceAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteServiceAccount indicates an expected call of DeleteServiceAccount.
func (mr *MockCloudServiceClientMockRecorder) DeleteServiceAccount(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServiceAccount", reflect.TypeOf((*MockCloudServiceClient)(nil).DeleteServiceAccount), varargs...)
}

// DeleteUser mocks base method.
func (m *MockCloudServiceClient) DeleteUser(ctx context.Context, in *cloudservice.DeleteUserRequest, opts ...grpc.CallOption) (*cloudservice.DeleteUserResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteUser", varargs...)
	ret0, _ := ret[0].(*cloudservice.DeleteUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockCloudServiceClientMockRecorder) DeleteUser(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockCloudServiceClient)(nil).DeleteUser), varargs...)
}

// DeleteUserGroup mocks base method.
func (m *MockCloudServiceClient) DeleteUserGroup(ctx context.Context, in *cloudservice.DeleteUserGroupRequest, opts ...grpc.CallOption) (*cloudservice.DeleteUserGroupResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteUserGroup", varargs...)
	ret0, _ := ret[0].(*cloudservice.DeleteUserGroupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUserGroup indicates an expected call of DeleteUserGroup.
func (mr *MockCloudServiceClientMockRecorder) DeleteUserGroup(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserGroup", reflect.TypeOf((*MockCloudServiceClient)(nil).DeleteUserGroup), varargs...)
}

// FailoverNamespaceRegion mocks base method.
func (m *MockCloudServiceClient) FailoverNamespaceRegion(ctx context.Context, in *cloudservice.FailoverNamespaceRegionRequest, opts ...grpc.CallOption) (*cloudservice.FailoverNamespaceRegionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FailoverNamespaceRegion", varargs...)
	ret0, _ := ret[0].(*cloudservice.FailoverNamespaceRegionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FailoverNamespaceRegion indicates an expected call of FailoverNamespaceRegion.
func (mr *MockCloudServiceClientMockRecorder) FailoverNamespaceRegion(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FailoverNamespaceRegion", reflect.TypeOf((*MockCloudServiceClient)(nil).FailoverNamespaceRegion), varargs...)
}

// GetAccount mocks base method.
func (m *MockCloudServiceClient) GetAccount(ctx context.Context, in *cloudservice.GetAccountRequest, opts ...grpc.CallOption) (*cloudservice.GetAccountResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAccount", varargs...)
	ret0, _ := ret[0].(*cloudservice.GetAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockCloudServiceClientMockRecorder) GetAccount(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockCloudServiceClient)(nil).GetAccount), varargs...)
}

// GetApiKey mocks base method.
func (m *MockCloudServiceClient) GetApiKey(ctx context.Context, in *cloudservice.GetApiKeyRequest, opts ...grpc.CallOption) (*cloudservice.GetApiKeyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetApiKey", varargs...)
	ret0, _ := ret[0].(*cloudservice.GetApiKeyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApiKey indicates an expected call of GetApiKey.
func (mr *MockCloudServiceClientMockRecorder) GetApiKey(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApiKey", reflect.TypeOf((*MockCloudServiceClient)(nil).GetApiKey), varargs...)
}

// GetApiKeys mocks base method.
func (m *MockCloudServiceClient) GetApiKeys(ctx context.Context, in *cloudservice.GetApiKeysRequest, opts ...grpc.CallOption) (*cloudservice.GetApiKeysResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetApiKeys", varargs...)
	ret0, _ := ret[0].(*cloudservice.GetApiKeysResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApiKeys indicates an expected call of GetApiKeys.
func (mr *MockCloudServiceClientMockRecorder) GetApiKeys(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApiKeys", reflect.TypeOf((*MockCloudServiceClient)(nil).GetApiKeys), varargs...)
}

// GetAsyncOperation mocks base method.
func (m *MockCloudServiceClient) GetAsyncOperation(ctx context.Context, in *cloudservice.GetAsyncOperationRequest, opts ...grpc.CallOption) (*cloudservice.GetAsyncOperationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAsyncOperation", varargs...)
	ret0, _ := ret[0].(*cloudservice.GetAsyncOperationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAsyncOperation indicates an expected call of GetAsyncOperation.
func (mr *MockCloudServiceClientMockRecorder) GetAsyncOperation(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAsyncOperation", reflect.TypeOf((*MockCloudServiceClient)(nil).GetAsyncOperation), varargs...)
}

// GetAuditLogs mocks base method.
func (m *MockCloudServiceClient) GetAuditLogs(ctx context.Context, in *cloudservice.GetAuditLogsRequest, opts ...grpc.CallOption) (*cloudservice.GetAuditLogsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAuditLogs", varargs...)
	ret0, _ := ret[0].(*cloudservice.GetAuditLogsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuditLogs indicates an expected call of GetAuditLogs.
func (mr *MockCloudServiceClientMockRecorder) GetAuditLogs(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuditLogs", reflect.TypeOf((*MockCloudServiceClient)(nil).GetAuditLogs), varargs...)
}

// GetMigration mocks base method.
func (m *MockCloudServiceClient) GetMigration(ctx context.Context, in *cloudservice.GetMigrationRequest, opts ...grpc.CallOption) (*cloudservice.GetMigrationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMigration", varargs...)
	ret0, _ := ret[0].(*cloudservice.GetMigrationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMigration indicates an expected call of GetMigration.
func (mr *MockCloudServiceClientMockRecorder) GetMigration(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMigration", reflect.TypeOf((*MockCloudServiceClient)(nil).GetMigration), varargs...)
}

// GetMigrations mocks base method.
func (m *MockCloudServiceClient) GetMigrations(ctx context.Context, in *cloudservice.GetMigrationsRequest, opts ...grpc.CallOption) (*cloudservice.GetMigrationsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMigrations", varargs...)
	ret0, _ := ret[0].(*cloudservice.GetMigrationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMigrations indicates an expected call of GetMigrations.
func (mr *MockCloudServiceClientMockRecorder) GetMigrations(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMigrations", reflect.TypeOf((*MockCloudServiceClient)(nil).GetMigrations), varargs...)
}

// GetNamespace mocks base method.
func (m *MockCloudServiceClient) GetNamespace(ctx context.Context, in *cloudservice.GetNamespaceRequest, opts ...grpc.CallOption) (*cloudservice.GetNamespaceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetNamespace", varargs...)
	ret0, _ := ret[0].(*cloudservice.GetNamespaceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNamespace indicates an expected call of GetNamespace.
func (mr *MockCloudServiceClientMockRecorder) GetNamespace(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNamespace", reflect.TypeOf((*MockCloudServiceClient)(nil).GetNamespace), varargs...)
}

// GetNamespaceExportSink mocks base method.
func (m *MockCloudServiceClient) GetNamespaceExportSink(ctx context.Context, in *cloudservice.GetNamespaceExportSinkRequest, opts ...grpc.CallOption) (*cloudservice.GetNamespaceExportSinkResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetNamespaceExportSink", varargs...)
	ret0, _ := ret[0].(*cloudservice.GetNamespaceExportSinkResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNamespaceExportSink indicates an expected call of GetNamespaceExportSink.
func (mr *MockCloudServiceClientMockRecorder) GetNamespaceExportSink(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNamespaceExportSink", reflect.TypeOf((*MockCloudServiceClient)(nil).GetNamespaceExportSink), varargs...)
}

// GetNamespaceExportSinks mocks base method.
func (m *MockCloudServiceClient) GetNamespaceExportSinks(ctx context.Context, in *cloudservice.GetNamespaceExportSinksRequest, opts ...grpc.CallOption) (*cloudservice.GetNamespaceExportSinksResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetNamespaceExportSinks", varargs...)
	ret0, _ := ret[0].(*cloudservice.GetNamespaceExportSinksResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNamespaceExportSinks indicates an expected call of GetNamespaceExportSinks.
func (mr *MockCloudServiceClientMockRecorder) GetNamespaceExportSinks(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNamespaceExportSinks", reflect.TypeOf((*MockCloudServiceClient)(nil).GetNamespaceExportSinks), varargs...)
}

// GetNamespaces mocks base method.
func (m *MockCloudServiceClient) GetNamespaces(ctx context.Context, in *cloudservice.GetNamespacesRequest, opts ...grpc.CallOption) (*cloudservice.GetNamespacesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetNamespaces", varargs...)
	ret0, _ := ret[0].(*cloudservice.GetNamespacesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNamespaces indicates an expected call of GetNamespaces.
func (mr *MockCloudServiceClientMockRecorder) GetNamespaces(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNamespaces", reflect.TypeOf((*MockCloudServiceClient)(nil).GetNamespaces), varargs...)
}

// GetNexusEndpoint mocks base method.
func (m *MockCloudServiceClient) GetNexusEndpoint(ctx context.Context, in *cloudservice.GetNexusEndpointRequest, opts ...grpc.CallOption) (*cloudservice.GetNexusEndpointResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetNexusEndpoint", varargs...)
	ret0, _ := ret[0].(*cloudservice.GetNexusEndpointResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNexusEndpoint indicates an expected call of GetNexusEndpoint.
func (mr *MockCloudServiceClientMockRecorder) GetNexusEndpoint(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNexusEndpoint", reflect.TypeOf((*MockCloudServiceClient)(nil).GetNexusEndpoint), varargs...)
}

// GetNexusEndpoints mocks base method.
func (m *MockCloudServiceClient) GetNexusEndpoints(ctx context.Context, in *cloudservice.GetNexusEndpointsRequest, opts ...grpc.CallOption) (*cloudservice.GetNexusEndpointsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetNexusEndpoints", varargs...)
	ret0, _ := ret[0].(*cloudservice.GetNexusEndpointsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNexusEndpoints indicates an expected call of GetNexusEndpoints.
func (mr *MockCloudServiceClientMockRecorder) GetNexusEndpoints(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNexusEndpoints", reflect.TypeOf((*MockCloudServiceClient)(nil).GetNexusEndpoints), varargs...)
}

// GetRegion mocks base method.
func (m *MockCloudServiceClient) GetRegion(ctx context.Context, in *cloudservice.GetRegionRequest, opts ...grpc.CallOption) (*cloudservice.GetRegionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRegion", varargs...)
	ret0, _ := ret[0].(*cloudservice.GetRegionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRegion indicates an expected call of GetRegion.
func (mr *MockCloudServiceClientMockRecorder) GetRegion(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegion", reflect.TypeOf((*MockCloudServiceClient)(nil).GetRegion), varargs...)
}

// GetRegions mocks base method.
func (m *MockCloudServiceClient) GetRegions(ctx context.Context, in *cloudservice.GetRegionsRequest, opts ...grpc.CallOption) (*cloudservice.GetRegionsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRegions", varargs...)
	ret0, _ := ret[0].(*cloudservice.GetRegionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRegions indicates an expected call of GetRegions.
func (mr *MockCloudServiceClientMockRecorder) GetRegions(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegions", reflect.TypeOf((*MockCloudServiceClient)(nil).GetRegions), varargs...)
}

// GetServiceAccount mocks base method.
func (m *MockCloudServiceClient) GetServiceAccount(ctx context.Context, in *cloudservice.GetServiceAccountRequest, opts ...grpc.CallOption) (*cloudservice.GetServiceAccountResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetServiceAccount", varargs...)
	ret0, _ := ret[0].(*cloudservice.GetServiceAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceAccount indicates an expected call of GetServiceAccount.
func (mr *MockCloudServiceClientMockRecorder) GetServiceAccount(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceAccount", reflect.TypeOf((*MockCloudServiceClient)(nil).GetServiceAccount), varargs...)
}

// GetServiceAccounts mocks base method.
func (m *MockCloudServiceClient) GetServiceAccounts(ctx context.Context, in *cloudservice.GetServiceAccountsRequest, opts ...grpc.CallOption) (*cloudservice.GetServiceAccountsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetServiceAccounts", varargs...)
	ret0, _ := ret[0].(*cloudservice.GetServiceAccountsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceAccounts indicates an expected call of GetServiceAccounts.
func (mr *MockCloudServiceClientMockRecorder) GetServiceAccounts(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceAccounts", reflect.TypeOf((*MockCloudServiceClient)(nil).GetServiceAccounts), varargs...)
}

// GetUsage mocks base method.
func (m *MockCloudServiceClient) GetUsage(ctx context.Context, in *cloudservice.GetUsageRequest, opts ...grpc.CallOption) (*cloudservice.GetUsageResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUsage", varargs...)
	ret0, _ := ret[0].(*cloudservice.GetUsageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsage indicates an expected call of GetUsage.
func (mr *MockCloudServiceClientMockRecorder) GetUsage(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsage", reflect.TypeOf((*MockCloudServiceClient)(nil).GetUsage), varargs...)
}

// GetUser mocks base method.
func (m *MockCloudServiceClient) GetUser(ctx context.Context, in *cloudservice.GetUserRequest, opts ...grpc.CallOption) (*cloudservice.GetUserResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUser", varargs...)
	ret0, _ := ret[0].(*cloudservice.GetUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockCloudServiceClientMockRecorder) GetUser(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockCloudServiceClient)(nil).GetUser), varargs...)
}

// GetUserGroup mocks base method.
func (m *MockCloudServiceClient) GetUserGroup(ctx context.Context, in *cloudservice.GetUserGroupRequest, opts ...grpc.CallOption) (*cloudservice.GetUserGroupResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserGroup", varargs...)
	ret0, _ := ret[0].(*cloudservice.GetUserGroupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserGroup indicates an expected call of GetUserGroup.
func (mr *MockCloudServiceClientMockRecorder) GetUserGroup(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserGroup", reflect.TypeOf((*MockCloudServiceClient)(nil).GetUserGroup), varargs...)
}

// GetUserGroups mocks base method.
func (m *MockCloudServiceClient) GetUserGroups(ctx context.Context, in *cloudservice.GetUserGroupsRequest, opts ...grpc.CallOption) (*cloudservice.GetUserGroupsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserGroups", varargs...)
	ret0, _ := ret[0].(*cloudservice.GetUserGroupsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserGroups indicates an expected call of GetUserGroups.
func (mr *MockCloudServiceClientMockRecorder) GetUserGroups(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserGroups", reflect.TypeOf((*MockCloudServiceClient)(nil).GetUserGroups), varargs...)
}

// GetUsers mocks base method.
func (m *MockCloudServiceClient) GetUsers(ctx context.Context, in *cloudservice.GetUsersRequest, opts ...grpc.CallOption) (*cloudservice.GetUsersResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUsers", varargs...)
	ret0, _ := ret[0].(*cloudservice.GetUsersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockCloudServiceClientMockRecorder) GetUsers(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockCloudServiceClient)(nil).GetUsers), varargs...)
}

// HandoverNamespace mocks base method.
func (m *MockCloudServiceClient) HandoverNamespace(ctx context.Context, in *cloudservice.HandoverNamespaceRequest, opts ...grpc.CallOption) (*cloudservice.HandoverNamespaceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HandoverNamespace", varargs...)
	ret0, _ := ret[0].(*cloudservice.HandoverNamespaceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandoverNamespace indicates an expected call of HandoverNamespace.
func (mr *MockCloudServiceClientMockRecorder) HandoverNamespace(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandoverNamespace", reflect.TypeOf((*MockCloudServiceClient)(nil).HandoverNamespace), varargs...)
}

// RenameCustomSearchAttribute mocks base method.
func (m *MockCloudServiceClient) RenameCustomSearchAttribute(ctx context.Context, in *cloudservice.RenameCustomSearchAttributeRequest, opts ...grpc.CallOption) (*cloudservice.RenameCustomSearchAttributeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RenameCustomSearchAttribute", varargs...)
	ret0, _ := ret[0].(*cloudservice.RenameCustomSearchAttributeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenameCustomSearchAttribute indicates an expected call of RenameCustomSearchAttribute.
func (mr *MockCloudServiceClientMockRecorder) RenameCustomSearchAttribute(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameCustomSearchAttribute", reflect.TypeOf((*MockCloudServiceClient)(nil).RenameCustomSearchAttribute), varargs...)
}

// SetUserGroupNamespaceAccess mocks base method.
func (m *MockCloudServiceClient) SetUserGroupNamespaceAccess(ctx context.Context, in *cloudservice.SetUserGroupNamespaceAccessRequest, opts ...grpc.CallOption) (*cloudservice.SetUserGroupNamespaceAccessResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetUserGroupNamespaceAccess", varargs...)
	ret0, _ := ret[0].(*cloudservice.SetUserGroupNamespaceAccessResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetUserGroupNamespaceAccess indicates an expected call of SetUserGroupNamespaceAccess.
func (mr *MockCloudServiceClientMockRecorder) SetUserGroupNamespaceAccess(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUserGroupNamespaceAccess", reflect.TypeOf((*MockCloudServiceClient)(nil).SetUserGroupNamespaceAccess), varargs...)
}

// SetUserNamespaceAccess mocks base method.
func (m *MockCloudServiceClient) SetUserNamespaceAccess(ctx context.Context, in *cloudservice.SetUserNamespaceAccessRequest, opts ...grpc.CallOption) (*cloudservice.SetUserNamespaceAccessResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetUserNamespaceAccess", varargs...)
	ret0, _ := ret[0].(*cloudservice.SetUserNamespaceAccessResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetUserNamespaceAccess indicates an expected call of SetUserNamespaceAccess.
func (mr *MockCloudServiceClientMockRecorder) SetUserNamespaceAccess(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUserNamespaceAccess", reflect.TypeOf((*MockCloudServiceClient)(nil).SetUserNamespaceAccess), varargs...)
}

// StartMigration mocks base method.
func (m *MockCloudServiceClient) StartMigration(ctx context.Context, in *cloudservice.StartMigrationRequest, opts ...grpc.CallOption) (*cloudservice.StartMigrationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartMigration", varargs...)
	ret0, _ := ret[0].(*cloudservice.StartMigrationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartMigration indicates an expected call of StartMigration.
func (mr *MockCloudServiceClientMockRecorder) StartMigration(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartMigration", reflect.TypeOf((*MockCloudServiceClient)(nil).StartMigration), varargs...)
}

// UpdateAccount mocks base method.
func (m *MockCloudServiceClient) UpdateAccount(ctx context.Context, in *cloudservice.UpdateAccountRequest, opts ...grpc.CallOption) (*cloudservice.UpdateAccountResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAccount", varargs...)
	ret0, _ := ret[0].(*cloudservice.UpdateAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccount indicates an expected call of UpdateAccount.
func (mr *MockCloudServiceClientMockRecorder) UpdateAccount(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccount", reflect.TypeOf((*MockCloudServiceClient)(nil).UpdateAccount), varargs...)
}

// UpdateApiKey mocks base method.
func (m *MockCloudServiceClient) UpdateApiKey(ctx context.Context, in *cloudservice.UpdateApiKeyRequest, opts ...grpc.CallOption) (*cloudservice.UpdateApiKeyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateApiKey", varargs...)
	ret0, _ := ret[0].(*cloudservice.UpdateApiKeyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateApiKey indicates an expected call of UpdateApiKey.
func (mr *MockCloudServiceClientMockRecorder) UpdateApiKey(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApiKey", reflect.TypeOf((*MockCloudServiceClient)(nil).UpdateApiKey), varargs...)
}

// UpdateNamespace mocks base method.
func (m *MockCloudServiceClient) UpdateNamespace(ctx context.Context, in *cloudservice.UpdateNamespaceRequest, opts ...grpc.CallOption) (*cloudservice.UpdateNamespaceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateNamespace", varargs...)
	ret0, _ := ret[0].(*cloudservice.UpdateNamespaceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNamespace indicates an expected call of UpdateNamespace.
func (mr *MockCloudServiceClientMockRecorder) UpdateNamespace(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNamespace", reflect.TypeOf((*MockCloudServiceClient)(nil).UpdateNamespace), varargs...)
}

// UpdateNamespaceExportSink mocks base method.
func (m *MockCloudServiceClient) UpdateNamespaceExportSink(ctx context.Context, in *cloudservice.UpdateNamespaceExportSinkRequest, opts ...grpc.CallOption) (*cloudservice.UpdateNamespaceExportSinkResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateNamespaceExportSink", varargs...)
	ret0, _ := ret[0].(*cloudservice.UpdateNamespaceExportSinkResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNamespaceExportSink indicates an expected call of UpdateNamespaceExportSink.
func (mr *MockCloudServiceClientMockRecorder) UpdateNamespaceExportSink(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNamespaceExportSink", reflect.TypeOf((*MockCloudServiceClient)(nil).UpdateNamespaceExportSink), varargs...)
}

// UpdateNexusEndpoint mocks base method.
func (m *MockCloudServiceClient) UpdateNexusEndpoint(ctx context.Context, in *cloudservice.UpdateNexusEndpointRequest, opts ...grpc.CallOption) (*cloudservice.UpdateNexusEndpointResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateNexusEndpoint", varargs...)
	ret0, _ := ret[0].(*cloudservice.UpdateNexusEndpointResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNexusEndpoint indicates an expected call of UpdateNexusEndpoint.
func (mr *MockCloudServiceClientMockRecorder) UpdateNexusEndpoint(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNexusEndpoint", reflect.TypeOf((*MockCloudServiceClient)(nil).UpdateNexusEndpoint), varargs...)
}

// UpdateServiceAccount mocks base method.
func (m *MockCloudServiceClient) UpdateServiceAccount(ctx context.Context, in *cloudservice.UpdateServiceAccountRequest, opts ...grpc.CallOption) (*cloudservice.UpdateServiceAccountResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateServiceAccount", varargs...)
	ret0, _ := ret[0].(*cloudservice.UpdateServiceAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateServiceAccount indicates an expected call of UpdateServiceAccount.
func (mr *MockCloudServiceClientMockRecorder) UpdateServiceAccount(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateServiceAccount", reflect.TypeOf((*MockCloudServiceClient)(nil).UpdateServiceAccount), varargs...)
}

// UpdateUser mocks base method.
func (m *MockCloudServiceClient) UpdateUser(ctx context.Context, in *cloudservice.UpdateUserRequest, opts ...grpc.CallOption) (*cloudservice.UpdateUserResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateUser", varargs...)
	ret0, _ := ret[0].(*cloudservice.UpdateUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockCloudServiceClientMockRecorder) UpdateUser(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockCloudServiceClient)(nil).UpdateUser), varargs...)
}

// UpdateUserGroup mocks base method.
func (m *MockCloudServiceClient) UpdateUserGroup(ctx context.Context, in *cloudservice.UpdateUserGroupRequest, opts ...grpc.CallOption) (*cloudservice.UpdateUserGroupResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateUserGroup", varargs...)
	ret0, _ := ret[0].(*cloudservice.UpdateUserGroupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserGroup indicates an expected call of UpdateUserGroup.
func (mr *MockCloudServiceClientMockRecorder) UpdateUserGroup(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserGroup", reflect.TypeOf((*MockCloudServiceClient)(nil).UpdateUserGroup), varargs...)
}

// ValidateNamespaceExportSink mocks base method.
func (m *MockCloudServiceClient) ValidateNamespaceExportSink(ctx context.Context, in *cloudservice.ValidateNamespaceExportSinkRequest, opts ...grpc.CallOption) (*cloudservice.ValidateNamespaceExportSinkResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ValidateNamespaceExportSink", varargs...)
	ret0, _ := ret[0].(*cloudservice.ValidateNamespaceExportSinkResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateNamespaceExportSink indicates an expected call of ValidateNamespaceExportSink.
func (mr *MockCloudServiceClientMockRecorder) ValidateNamespaceExportSink(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateNamespaceExportSink", reflect.TypeOf((*MockCloudServiceClient)(nil).ValidateNamespaceExportSink), varargs...)
}

// MockCloudServiceServer is a mock of CloudServiceServer interface.
type MockCloudServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockCloudServiceServerMockRecorder
}

// MockCloudServiceServerMockRecorder is the mock recorder for MockCloudServiceServer.
type MockCloudServiceServerMockRecorder struct {
	mock *MockCloudServiceServer
}

// NewMockCloudServiceServer creates a new mock instance.
func NewMockCloudServiceServer(ctrl *gomock.Controller) *MockCloudServiceServer {
	mock := &MockCloudServiceServer{ctrl: ctrl}
	mock.recorder = &MockCloudServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloudServiceServer) EXPECT() *MockCloudServiceServerMockRecorder {
	return m.recorder
}

// AbortMigration mocks base method.
func (m *MockCloudServiceServer) AbortMigration(arg0 context.Context, arg1 *cloudservice.AbortMigrationRequest) (*cloudservice.AbortMigrationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AbortMigration", arg0, arg1)
	ret0, _ := ret[0].(*cloudservice.AbortMigrationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AbortMigration indicates an expected call of AbortMigration.
func (mr *MockCloudServiceServerMockRecorder) AbortMigration(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AbortMigration", reflect.TypeOf((*MockCloudServiceServer)(nil).AbortMigration), arg0, arg1)
}

// AddNamespaceRegion mocks base method.
func (m *MockCloudServiceServer) AddNamespaceRegion(arg0 context.Context, arg1 *cloudservice.AddNamespaceRegionRequest) (*cloudservice.AddNamespaceRegionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNamespaceRegion", arg0, arg1)
	ret0, _ := ret[0].(*cloudservice.AddNamespaceRegionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddNamespaceRegion indicates an expected call of AddNamespaceRegion.
func (mr *MockCloudServiceServerMockRecorder) AddNamespaceRegion(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNamespaceRegion", reflect.TypeOf((*MockCloudServiceServer)(nil).AddNamespaceRegion), arg0, arg1)
}

// ConfirmMigration mocks base method.
func (m *MockCloudServiceServer) ConfirmMigration(arg0 context.Context, arg1 *cloudservice.ConfirmMigrationRequest) (*cloudservice.ConfirmMigrationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfirmMigration", arg0, arg1)
	ret0, _ := ret[0].(*cloudservice.ConfirmMigrationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfirmMigration indicates an expected call of ConfirmMigration.
func (mr *MockCloudServiceServerMockRecorder) ConfirmMigration(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfirmMigration", reflect.TypeOf((*MockCloudServiceServer)(nil).ConfirmMigration), arg0, arg1)
}

// CreateApiKey mocks base method.
func (m *MockCloudServiceServer) CreateApiKey(arg0 context.Context, arg1 *cloudservice.CreateApiKeyRequest) (*cloudservice.CreateApiKeyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateApiKey", arg0, arg1)
	ret0, _ := ret[0].(*cloudservice.CreateApiKeyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateApiKey indicates an expected call of CreateApiKey.
func (mr *MockCloudServiceServerMockRecorder) CreateApiKey(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApiKey", reflect.TypeOf((*MockCloudServiceServer)(nil).CreateApiKey), arg0, arg1)
}

// CreateNamespace mocks base method.
func (m *MockCloudServiceServer) CreateNamespace(arg0 context.Context, arg1 *cloudservice.CreateNamespaceRequest) (*cloudservice.CreateNamespaceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNamespace", arg0, arg1)
	ret0, _ := ret[0].(*cloudservice.CreateNamespaceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNamespace indicates an expected call of CreateNamespace.
func (mr *MockCloudServiceServerMockRecorder) CreateNamespace(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNamespace", reflect.TypeOf((*MockCloudServiceServer)(nil).CreateNamespace), arg0, arg1)
}

// CreateNamespaceExportSink mocks base method.
func (m *MockCloudServiceServer) CreateNamespaceExportSink(arg0 context.Context, arg1 *cloudservice.CreateNamespaceExportSinkRequest) (*cloudservice.CreateNamespaceExportSinkResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNamespaceExportSink", arg0, arg1)
	ret0, _ := ret[0].(*cloudservice.CreateNamespaceExportSinkResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNamespaceExportSink indicates an expected call of CreateNamespaceExportSink.
func (mr *MockCloudServiceServerMockRecorder) CreateNamespaceExportSink(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNamespaceExportSink", reflect.TypeOf((*MockCloudServiceServer)(nil).CreateNamespaceExportSink), arg0, arg1)
}

// CreateNexusEndpoint mocks base method.
func (m *MockCloudServiceServer) CreateNexusEndpoint(arg0 context.Context, arg1 *cloudservice.CreateNexusEndpointRequest) (*cloudservice.CreateNexusEndpointResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNexusEndpoint", arg0, arg1)
	ret0, _ := ret[0].(*cloudservice.CreateNexusEndpointResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNexusEndpoint indicates an expected call of CreateNexusEndpoint.
func (mr *MockCloudServiceServerMockRecorder) CreateNexusEndpoint(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNexusEndpoint", reflect.TypeOf((*MockCloudServiceServer)(nil).CreateNexusEndpoint), arg0, arg1)
}

// CreateServiceAccount mocks base method.
func (m *MockCloudServiceServer) CreateServiceAccount(arg0 context.Context, arg1 *cloudservice.CreateServiceAccountRequest) (*cloudservice.CreateServiceAccountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateServiceAccount", arg0, arg1)
	ret0, _ := ret[0].(*cloudservice.CreateServiceAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateServiceAccount indicates an expected call of CreateServiceAccount.
func (mr *MockCloudServiceServerMockRecorder) CreateServiceAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServiceAccount", reflect.TypeOf((*MockCloudServiceServer)(nil).CreateServiceAccount), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockCloudServiceServer) CreateUser(arg0 context.Context, arg1 *cloudservice.CreateUserRequest) (*cloudservice.CreateUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(*cloudservice.CreateUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockCloudServiceServerMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockCloudServiceServer)(nil).CreateUser), arg0, arg1)
}

// CreateUserGroup mocks base method.
func (m *MockCloudServiceServer) CreateUserGroup(arg0 context.Context, arg1 *cloudservice.CreateUserGroupRequest) (*cloudservice.CreateUserGroupResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserGroup", arg0, arg1)
	ret0, _ := ret[0].(*cloudservice.CreateUserGroupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserGroup indicates an expected call of CreateUserGroup.
func (mr *MockCloudServiceServerMockRecorder) CreateUserGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserGroup", reflect.TypeOf((*MockCloudServiceServer)(nil).CreateUserGroup), arg0, arg1)
}

// DeleteApiKey mocks base method.
func (m *MockCloudServiceServer) DeleteApiKey(arg0 context.Context, arg1 *cloudservice.DeleteApiKeyRequest) (*cloudservice.DeleteApiKeyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApiKey", arg0, arg1)
	ret0, _ := ret[0].(*cloudservice.DeleteApiKeyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteApiKey indicates an expected call of DeleteApiKey.
func (mr *MockCloudServiceServerMockRecorder) DeleteApiKey(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApiKey", reflect.TypeOf((*MockCloudServiceServer)(nil).DeleteApiKey), arg0, arg1)
}

// DeleteNamespace mocks base method.
func (m *MockCloudServiceServer) DeleteNamespace(arg0 context.Context, arg1 *cloudservice.DeleteNamespaceRequest) (*cloudservice.DeleteNamespaceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNamespace", arg0, arg1)
	ret0, _ := ret[0].(*cloudservice.DeleteNamespaceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteNamespace indicates an expected call of DeleteNamespace.
func (mr *MockCloudServiceServerMockRecorder) DeleteNamespace(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNamespace", reflect.TypeOf((*MockCloudServiceServer)(nil).DeleteNamespace), arg0, arg1)
}

// DeleteNamespaceExportSink mocks base method.
func (m *MockCloudServiceServer) DeleteNamespaceExportSink(arg0 context.Context, arg1 *cloudservice.DeleteNamespaceExportSinkRequest) (*cloudservice.DeleteNamespaceExportSinkResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNamespaceExportSink", arg0, arg1)
	ret0, _ := ret[0].(*cloudservice.DeleteNamespaceExportSinkResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteNamespaceExportSink indicates an expected call of DeleteNamespaceExportSink.
func (mr *MockCloudServiceServerMockRecorder) DeleteNamespaceExportSink(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNamespaceExportSink", reflect.TypeOf((*MockCloudServiceServer)(nil).DeleteNamespaceExportSink), arg0, arg1)
}

// DeleteNamespaceRegion mocks base method.
func (m *MockCloudServiceServer) DeleteNamespaceRegion(arg0 context.Context, arg1 *cloudservice.DeleteNamespaceRegionRequest) (*cloudservice.DeleteNamespaceRegionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNamespaceRegion", arg0, arg1)
	ret0, _ := ret[0].(*cloudservice.DeleteNamespaceRegionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteNamespaceRegion indicates an expected call of DeleteNamespaceRegion.
func (mr *MockCloudServiceServerMockRecorder) DeleteNamespaceRegion(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNamespaceRegion", reflect.TypeOf((*MockCloudServiceServer)(nil).DeleteNamespaceRegion), arg0, arg1)
}

// DeleteNexusEndpoint mocks base method.
func (m *MockCloudServiceServer) DeleteNexusEndpoint(arg0 context.Context, arg1 *cloudservice.DeleteNexusEndpointRequest) (*cloudservice.DeleteNexusEndpointResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNexusEndpoint", arg0, arg1)
	ret0, _ := ret[0].(*cloudservice.DeleteNexusEndpointResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteNexusEndpoint indicates an expected call of DeleteNexusEndpoint.
func (mr *MockCloudServiceServerMockRecorder) DeleteNexusEndpoint(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNexusEndpoint", reflect.TypeOf((*MockCloudServiceServer)(nil).DeleteNexusEndpoint), arg0, arg1)
}

// DeleteServiceAccount mocks base method.
func (m *MockCloudServiceServer) DeleteServiceAccount(arg0 context.Context, arg1 *cloudservice.DeleteServiceAccountRequest) (*cloudservice.DeleteServiceAccountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteServiceAccount", arg0, arg1)
	ret0, _ := ret[0].(*cloudservice.DeleteServiceAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteServiceAccount indicates an expected call of DeleteServiceAccount.
func (mr *MockCloudServiceServerMockRecorder) DeleteServiceAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServiceAccount", reflect.TypeOf((*MockCloudServiceServer)(nil).DeleteServiceAccount), arg0, arg1)
}

// DeleteUser mocks base method.
func (m *MockCloudServiceServer) DeleteUser(arg0 context.Context, arg1 *cloudservice.DeleteUserRequest) (*cloudservice.DeleteUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1)
	ret0, _ := ret[0].(*cloudservice.DeleteUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockCloudServiceServerMockRecorder) DeleteUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockCloudServiceServer)(nil).DeleteUser), arg0, arg1)
}

// DeleteUserGroup mocks base method.
func (m *MockCloudServiceServer) DeleteUserGroup(arg0 context.Context, arg1 *cloudservice.DeleteUserGroupRequest) (*cloudservice.DeleteUserGroupResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserGroup", arg0, arg1)
	ret0, _ := ret[0].(*cloudservice.DeleteUserGroupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUserGroup indicates an expected call of DeleteUserGroup.
func (mr *MockCloudServiceServerMockRecorder) DeleteUserGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserGroup", reflect.TypeOf((*MockCloudServiceServer)(nil).DeleteUserGroup), arg0, arg1)
}

// FailoverNamespaceRegion mocks base method.
func (m *MockCloudServiceServer) FailoverNamespaceRegion(arg0 context.Context, arg1 *cloudservice.FailoverNamespaceRegionRequest) (*cloudservice.FailoverNamespaceRegionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FailoverNamespaceRegion", arg0, arg1)
	ret0, _ := ret[0].(*cloudservice.FailoverNamespaceRegionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FailoverNamespaceRegion indicates an expected call of FailoverNamespaceRegion.
func (mr *MockCloudServiceServerMockRecorder) FailoverNamespaceRegion(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FailoverNamespaceRegion", reflect.TypeOf((*MockCloudServiceServer)(nil).FailoverNamespaceRegion), arg0, arg1)
}

// GetAccount mocks base method.
func (m *MockCloudServiceServer) GetAccount(arg0 context.Context, arg1 *cloudservice.GetAccountRequest) (*cloudservice.GetAccountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", arg0, arg1)
	ret0, _ := ret[0].(*cloudservice.GetAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockCloudServiceServerMockRecorder) GetAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockCloudServiceServer)(nil).GetAccount), arg0, arg1)
}

// GetApiKey mocks base method.
func (m *MockCloudServiceServer) GetApiKey(arg0 context.Context, arg1 *cloudservice.GetApiKeyRequest) (*cloudservice.GetApiKeyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApiKey", arg0, arg1)
	ret0, _ := ret[0].(*cloudservice.GetApiKeyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApiKey indicates an expected call of GetApiKey.
func (mr *MockCloudServiceServerMockRecorder) GetApiKey(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApiKey", reflect.TypeOf((*MockCloudServiceServer)(nil).GetApiKey), arg0, arg1)
}

// GetApiKeys mocks base method.
func (m *MockCloudServiceServer) GetApiKeys(arg0 context.Context, arg1 *cloudservice.GetApiKeysRequest) (*cloudservice.GetApiKeysResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApiKeys", arg0, arg1)
	ret0, _ := ret[0].(*cloudservice.GetApiKeysResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApiKeys indicates an expected call of GetApiKeys.
func (mr *MockCloudServiceServerMockRecorder) GetApiKeys(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApiKeys", reflect.TypeOf((*MockCloudServiceServer)(nil).GetApiKeys), arg0, arg1)
}

// GetAsyncOperation mocks base method.
func (m *MockCloudServiceServer) GetAsyncOperation(arg0 context.Context, arg1 *cloudservice.GetAsyncOperationRequest) (*cloudservice.GetAsyncOperationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAsyncOperation", arg0, arg1)
	ret0, _ := ret[0].(*cloudservice.GetAsyncOperationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAsyncOperation indicates an expected call of GetAsyncOperation.
func (mr *MockCloudServiceServerMockRecorder) GetAsyncOperation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAsyncOperation", reflect.TypeOf((*MockCloudServiceServer)(nil).GetAsyncOperation), arg0, arg1)
}

// GetAuditLogs mocks base method.
func (m *MockCloudServiceServer) GetAuditLogs(arg0 context.Context, arg1 *cloudservice.GetAuditLogsRequest) (*cloudservice.GetAuditLogsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuditLogs", arg0, arg1)
	ret0, _ := ret[0].(*cloudservice.GetAuditLogsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuditLogs indicates an expected call of GetAuditLogs.
func (mr *MockCloudServiceServerMockRecorder) GetAuditLogs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuditLogs", reflect.TypeOf((*MockCloudServiceServer)(nil).GetAuditLogs), arg0, arg1)
}

// GetMigration mocks base method.
func (m *MockCloudServiceServer) GetMigration(arg0 context.Context, arg1 *cloudservice.GetMigrationRequest) (*cloudservice.GetMigrationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMigration", arg0, arg1)
	ret0, _ := ret[0].(*cloudservice.GetMigrationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMigration indicates an expected call of GetMigration.
func (mr *MockCloudServiceServerMockRecorder) GetMigration(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMigration", reflect.TypeOf((*MockCloudServiceServer)(nil).GetMigration), arg0, arg1)
}

// GetMigrations mocks base method.
func (m *MockCloudServiceServer) GetMigrations(arg0 context.Context, arg1 *cloudservice.GetMigrationsRequest) (*cloudservice.GetMigrationsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMigrations", arg0, arg1)
	ret0, _ := ret[0].(*cloudservice.GetMigrationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMigrations indicates an expected call of GetMigrations.
func (mr *MockCloudServiceServerMockRecorder) GetMigrations(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMigrations", reflect.TypeOf((*MockCloudServiceServer)(nil).GetMigrations), arg0, arg1)
}

// GetNamespace mocks base method.
func (m *MockCloudServiceServer) GetNamespace(arg0 context.Context, arg1 *cloudservice.GetNamespaceRequest) (*cloudservice.GetNamespaceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNamespace", arg0, arg1)
	ret0, _ := ret[0].(*cloudservice.GetNamespaceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNamespace indicates an expected call of GetNamespace.
func (mr *MockCloudServiceServerMockRecorder) GetNamespace(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNamespace", reflect.TypeOf((*MockCloudServiceServer)(nil).GetNamespace), arg0, arg1)
}

// GetNamespaceExportSink mocks base method.
func (m *MockCloudServiceServer) GetNamespaceExportSink(arg0 context.Context, arg1 *cloudservice.GetNamespaceExportSinkRequest) (*cloudservice.GetNamespaceExportSinkResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNamespaceExportSink", arg0, arg1)
	ret0, _ := ret[0].(*cloudservice.GetNamespaceExportSinkResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNamespaceExportSink indicates an expected call of GetNamespaceExportSink.
func (mr *MockCloudServiceServerMockRecorder) GetNamespaceExportSink(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNamespaceExportSink", reflect.TypeOf((*MockCloudServiceServer)(nil).GetNamespaceExportSink), arg0, arg1)
}

// GetNamespaceExportSinks mocks base method.
func (m *MockCloudServiceServer) GetNamespaceExportSinks(arg0 context.Context, arg1 *cloudservice.GetNamespaceExportSinksRequest) (*cloudservice.GetNamespaceExportSinksResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNamespaceExportSinks", arg0, arg1)
	ret0, _ := ret[0].(*cloudservice.GetNamespaceExportSinksResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNamespaceExportSinks indicates an expected call of GetNamespaceExportSinks.
func (mr *MockCloudServiceServerMockRecorder) GetNamespaceExportSinks(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNamespaceExportSinks", reflect.TypeOf((*MockCloudServiceServer)(nil).GetNamespaceExportSinks), arg0, arg1)
}

// GetNamespaces mocks base method.
func (m *MockCloudServiceServer) GetNamespaces(arg0 context.Context, arg1 *cloudservice.GetNamespacesRequest) (*cloudservice.GetNamespacesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNamespaces", arg0, arg1)
	ret0, _ := ret[0].(*cloudservice.GetNamespacesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNamespaces indicates an expected call of GetNamespaces.
func (mr *MockCloudServiceServerMockRecorder) GetNamespaces(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNamespaces", reflect.TypeOf((*MockCloudServiceServer)(nil).GetNamespaces), arg0, arg1)
}

// GetNexusEndpoint mocks base method.
func (m *MockCloudServiceServer) GetNexusEndpoint(arg0 context.Context, arg1 *cloudservice.GetNexusEndpointRequest) (*cloudservice.GetNexusEndpointResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNexusEndpoint", arg0, arg1)
	ret0, _ := ret[0].(*cloudservice.GetNexusEndpointResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNexusEndpoint indicates an expected call of GetNexusEndpoint.
func (mr *MockCloudServiceServerMockRecorder) GetNexusEndpoint(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNexusEndpoint", reflect.TypeOf((*MockCloudServiceServer)(nil).GetNexusEndpoint), arg0, arg1)
}

// GetNexusEndpoints mocks base method.
func (m *MockCloudServiceServer) GetNexusEndpoints(arg0 context.Context, arg1 *cloudservice.GetNexusEndpointsRequest) (*cloudservice.GetNexusEndpointsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNexusEndpoints", arg0, arg1)
	ret0, _ := ret[0].(*cloudservice.GetNexusEndpointsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNexusEndpoints indicates an expected call of GetNexusEndpoints.
func (mr *MockCloudServiceServerMockRecorder) GetNexusEndpoints(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNexusEndpoints", reflect.TypeOf((*MockCloudServiceServer)(nil).GetNexusEndpoints), arg0, arg1)
}

// GetRegion mocks base method.
func (m *MockCloudServiceServer) GetRegion(arg0 context.Context, arg1 *cloudservice.GetRegionRequest) (*cloudservice.GetRegionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegion", arg0, arg1)
	ret0, _ := ret[0].(*cloudservice.GetRegionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRegion indicates an expected call of GetRegion.
func (mr *MockCloudServiceServerMockRecorder) GetRegion(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegion", reflect.TypeOf((*MockCloudServiceServer)(nil).GetRegion), arg0, arg1)
}

// GetRegions mocks base method.
func (m *MockCloudServiceServer) GetRegions(arg0 context.Context, arg1 *cloudservice.GetRegionsRequest) (*cloudservice.GetRegionsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegions", arg0, arg1)
	ret0, _ := ret[0].(*cloudservice.GetRegionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRegions indicates an expected call of GetRegions.
func (mr *MockCloudServiceServerMockRecorder) GetRegions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegions", reflect.TypeOf((*MockCloudServiceServer)(nil).GetRegions), arg0, arg1)
}

// GetServiceAccount mocks base method.
func (m *MockCloudServiceServer) GetServiceAccount(arg0 context.Context, arg1 *cloudservice.GetServiceAccountRequest) (*cloudservice.GetServiceAccountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceAccount", arg0, arg1)
	ret0, _ := ret[0].(*cloudservice.GetServiceAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceAccount indicates an expected call of GetServiceAccount.
func (mr *MockCloudServiceServerMockRecorder) GetServiceAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceAccount", reflect.TypeOf((*MockCloudServiceServer)(nil).GetServiceAccount), arg0, arg1)
}

// GetServiceAccounts mocks base method.
func (m *MockCloudServiceServer) GetServiceAccounts(arg0 context.Context, arg1 *cloudservice.GetServiceAccountsRequest) (*cloudservice.GetServiceAccountsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceAccounts", arg0, arg1)
	ret0, _ := ret[0].(*cloudservice.GetServiceAccountsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceAccounts indicates an expected call of GetServiceAccounts.
func (mr *MockCloudServiceServerMockRecorder) GetServiceAccounts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceAccounts", reflect.TypeOf((*MockCloudServiceServer)(nil).GetServiceAccounts), arg0, arg1)
}

// GetUsage mocks base method.
func (m *MockCloudServiceServer) GetUsage(arg0 context.Context, arg1 *cloudservice.GetUsageRequest) (*cloudservice.GetUsageResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsage", arg0, arg1)
	ret0, _ := ret[0].(*cloudservice.GetUsageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsage indicates an expected call of GetUsage.
func (mr *MockCloudServiceServerMockRecorder) GetUsage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsage", reflect.TypeOf((*MockCloudServiceServer)(nil).GetUsage), arg0, arg1)
}

// GetUser mocks base method.
func (m *MockCloudServiceServer) GetUser(arg0 context.Context, arg1 *cloudservice.GetUserRequest) (*cloudservice.GetUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(*cloudservice.GetUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockCloudServiceServerMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockCloudServiceServer)(nil).GetUser), arg0, arg1)
}

// GetUserGroup mocks base method.
func (m *MockCloudServiceServer) GetUserGroup(arg0 context.Context, arg1 *cloudservice.GetUserGroupRequest) (*cloudservice.GetUserGroupResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserGroup", arg0, arg1)
	ret0, _ := ret[0].(*cloudservice.GetUserGroupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserGroup indicates an expected call of GetUserGroup.
func (mr *MockCloudServiceServerMockRecorder) GetUserGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserGroup", reflect.TypeOf((*MockCloudServiceServer)(nil).GetUserGroup), arg0, arg1)
}

// GetUserGroups mocks base method.
func (m *MockCloudServiceServer) GetUserGroups(arg0 context.Context, arg1 *cloudservice.GetUserGroupsRequest) (*cloudservice.GetUserGroupsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserGroups", arg0, arg1)
	ret0, _ := ret[0].(*cloudservice.GetUserGroupsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserGroups indicates an expected call of GetUserGroups.
func (mr *MockCloudServiceServerMockRecorder) GetUserGroups(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserGroups", reflect.TypeOf((*MockCloudServiceServer)(nil).GetUserGroups), arg0, arg1)
}

// GetUsers mocks base method.
func (m *MockCloudServiceServer) GetUsers(arg0 context.Context, arg1 *cloudservice.GetUsersRequest) (*cloudservice.GetUsersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", arg0, arg1)
	ret0, _ := ret[0].(*cloudservice.GetUsersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockCloudServiceServerMockRecorder) GetUsers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockCloudServiceServer)(nil).GetUsers), arg0, arg1)
}

// HandoverNamespace mocks base method.
func (m *MockCloudServiceServer) HandoverNamespace(arg0 context.Context, arg1 *cloudservice.HandoverNamespaceRequest) (*cloudservice.HandoverNamespaceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandoverNamespace", arg0, arg1)
	ret0, _ := ret[0].(*cloudservice.HandoverNamespaceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandoverNamespace indicates an expected call of HandoverNamespace.
func (mr *MockCloudServiceServerMockRecorder) HandoverNamespace(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandoverNamespace", reflect.TypeOf((*MockCloudServiceServer)(nil).HandoverNamespace), arg0, arg1)
}

// RenameCustomSearchAttribute mocks base method.
func (m *MockCloudServiceServer) RenameCustomSearchAttribute(arg0 context.Context, arg1 *cloudservice.RenameCustomSearchAttributeRequest) (*cloudservice.RenameCustomSearchAttributeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameCustomSearchAttribute", arg0, arg1)
	ret0, _ := ret[0].(*cloudservice.RenameCustomSearchAttributeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenameCustomSearchAttribute indicates an expected call of RenameCustomSearchAttribute.
func (mr *MockCloudServiceServerMockRecorder) RenameCustomSearchAttribute(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameCustomSearchAttribute", reflect.TypeOf((*MockCloudServiceServer)(nil).RenameCustomSearchAttribute), arg0, arg1)
}

// SetUserGroupNamespaceAccess mocks base method.
func (m *MockCloudServiceServer) SetUserGroupNamespaceAccess(arg0 context.Context, arg1 *cloudservice.SetUserGroupNamespaceAccessRequest) (*cloudservice.SetUserGroupNamespaceAccessResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUserGroupNamespaceAccess", arg0, arg1)
	ret0, _ := ret[0].(*cloudservice.SetUserGroupNamespaceAccessResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetUserGroupNamespaceAccess indicates an expected call of SetUserGroupNamespaceAccess.
func (mr *MockCloudServiceServerMockRecorder) SetUserGroupNamespaceAccess(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUserGroupNamespaceAccess", reflect.TypeOf((*MockCloudServiceServer)(nil).SetUserGroupNamespaceAccess), arg0, arg1)
}

// SetUserNamespaceAccess mocks base method.
func (m *MockCloudServiceServer) SetUserNamespaceAccess(arg0 context.Context, arg1 *cloudservice.SetUserNamespaceAccessRequest) (*cloudservice.SetUserNamespaceAccessResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUserNamespaceAccess", arg0, arg1)
	ret0, _ := ret[0].(*cloudservice.SetUserNamespaceAccessResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetUserNamespaceAccess indicates an expected call of SetUserNamespaceAccess.
func (mr *MockCloudServiceServerMockRecorder) SetUserNamespaceAccess(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUserNamespaceAccess", reflect.TypeOf((*MockCloudServiceServer)(nil).SetUserNamespaceAccess), arg0, arg1)
}

// StartMigration mocks base method.
func (m *MockCloudServiceServer) StartMigration(arg0 context.Context, arg1 *cloudservice.StartMigrationRequest) (*cloudservice.StartMigrationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartMigration", arg0, arg1)
	ret0, _ := ret[0].(*cloudservice.StartMigrationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartMigration indicates an expected call of StartMigration.
func (mr *MockCloudServiceServerMockRecorder) StartMigration(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartMigration", reflect.TypeOf((*MockCloudServiceServer)(nil).StartMigration), arg0, arg1)
}

// UpdateAccount mocks base method.
func (m *MockCloudServiceServer) UpdateAccount(arg0 context.Context, arg1 *cloudservice.UpdateAccountRequest) (*cloudservice.UpdateAccountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccount", arg0, arg1)
	ret0, _ := ret[0].(*cloudservice.UpdateAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccount indicates an expected call of UpdateAccount.
func (mr *MockCloudServiceServerMockRecorder) UpdateAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccount", reflect.TypeOf((*MockCloudServiceServer)(nil).UpdateAccount), arg0, arg1)
}

// UpdateApiKey mocks base method.
func (m *MockCloudServiceServer) UpdateApiKey(arg0 context.Context, arg1 *cloudservice.UpdateApiKeyRequest) (*cloudservice.UpdateApiKeyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateApiKey", arg0, arg1)
	ret0, _ := ret[0].(*cloudservice.UpdateApiKeyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateApiKey indicates an expected call of UpdateApiKey.
func (mr *MockCloudServiceServerMockRecorder) UpdateApiKey(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApiKey", reflect.TypeOf((*MockCloudServiceServer)(nil).UpdateApiKey), arg0, arg1)
}

// UpdateNamespace mocks base method.
func (m *MockCloudServiceServer) UpdateNamespace(arg0 context.Context, arg1 *cloudservice.UpdateNamespaceRequest) (*cloudservice.UpdateNamespaceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNamespace", arg0, arg1)
	ret0, _ := ret[0].(*cloudservice.UpdateNamespaceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNamespace indicates an expected call of UpdateNamespace.
func (mr *MockCloudServiceServerMockRecorder) UpdateNamespace(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNamespace", reflect.TypeOf((*MockCloudServiceServer)(nil).UpdateNamespace), arg0, arg1)
}

// UpdateNamespaceExportSink mocks base method.
func (m *MockCloudServiceServer) UpdateNamespaceExportSink(arg0 context.Context, arg1 *cloudservice.UpdateNamespaceExportSinkRequest) (*cloudservice.UpdateNamespaceExportSinkResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNamespaceExportSink", arg0, arg1)
	ret0, _ := ret[0].(*cloudservice.UpdateNamespaceExportSinkResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNamespaceExportSink indicates an expected call of UpdateNamespaceExportSink.
func (mr *MockCloudServiceServerMockRecorder) UpdateNamespaceExportSink(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNamespaceExportSink", reflect.TypeOf((*MockCloudServiceServer)(nil).UpdateNamespaceExportSink), arg0, arg1)
}

// UpdateNexusEndpoint mocks base method.
func (m *MockCloudServiceServer) UpdateNexusEndpoint(arg0 context.Context, arg1 *cloudservice.UpdateNexusEndpointRequest) (*cloudservice.UpdateNexusEndpointResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNexusEndpoint", arg0, arg1)
	ret0, _ := ret[0].(*cloudservice.UpdateNexusEndpointResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNexusEndpoint indicates an expected call of UpdateNexusEndpoint.
func (mr *MockCloudServiceServerMockRecorder) UpdateNexusEndpoint(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNexusEndpoint", reflect.TypeOf((*MockCloudServiceServer)(nil).UpdateNexusEndpoint), arg0, arg1)
}

// UpdateServiceAccount mocks base method.
func (m *MockCloudServiceServer) UpdateServiceAccount(arg0 context.Context, arg1 *cloudservice.UpdateServiceAccountRequest) (*cloudservice.UpdateServiceAccountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateServiceAccount", arg0, arg1)
	ret0, _ := ret[0].(*cloudservice.UpdateServiceAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateServiceAccount indicates an expected call of UpdateServiceAccount.
func (mr *MockCloudServiceServerMockRecorder) UpdateServiceAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateServiceAccount", reflect.TypeOf((*MockCloudServiceServer)(nil).UpdateServiceAccount), arg0, arg1)
}

// UpdateUser mocks base method.
func (m *MockCloudServiceServer) UpdateUser(arg0 context.Context, arg1 *cloudservice.UpdateUserRequest) (*cloudservice.UpdateUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1)
	ret0, _ := ret[0].(*cloudservice.UpdateUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockCloudServiceServerMockRecorder) UpdateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockCloudServiceServer)(nil).UpdateUser), arg0, arg1)
}

// UpdateUserGroup mocks base method.
func (m *MockCloudServiceServer) UpdateUserGroup(arg0 context.Context, arg1 *cloudservice.UpdateUserGroupRequest) (*cloudservice.UpdateUserGroupResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserGroup", arg0, arg1)
	ret0, _ := ret[0].(*cloudservice.UpdateUserGroupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserGroup indicates an expected call of UpdateUserGroup.
func (mr *MockCloudServiceServerMockRecorder) UpdateUserGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserGroup", reflect.TypeOf((*MockCloudServiceServer)(nil).UpdateUserGroup), arg0, arg1)
}

// ValidateNamespaceExportSink mocks base method.
func (m *MockCloudServiceServer) ValidateNamespaceExportSink(arg0 context.Context, arg1 *cloudservice.ValidateNamespaceExportSinkRequest) (*cloudservice.ValidateNamespaceExportSinkResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateNamespaceExportSink", arg0, arg1)
	ret0, _ := ret[0].(*cloudservice.ValidateNamespaceExportSinkResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateNamespaceExportSink indicates an expected call of ValidateNamespaceExportSink.
func (mr *MockCloudServiceServerMockRecorder) ValidateNamespaceExportSink(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateNamespaceExportSink", reflect.TypeOf((*MockCloudServiceServer)(nil).ValidateNamespaceExportSink), arg0, arg1)
}
