// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/auditlog/v1/message.proto

package auditlog

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type LogCategory int32

const (
	LOG_CATEGORY_UNSPECIFIED LogCategory = 0
	LOG_CATEGORY_ADMIN       LogCategory = 1
	LOG_CATEGORY_SYSTEM      LogCategory = 2
)

var LogCategory_name = map[int32]string{
	0: "Unspecified",
	1: "Admin",
	2: "System",
}

var LogCategory_value = map[string]int32{
	"Unspecified": 0,
	"Admin":       1,
	"System":      2,
}

func (LogCategory) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8e3907a7549dbc61, []int{0}
}

type LogLevel int32

const (
	LOG_LEVEL_UNSPECIFIED LogLevel = 0
	LOG_LEVEL_INFO        LogLevel = 1
	LOG_LEVEL_DEBUG       LogLevel = 2
	LOG_LEVEL_WARN        LogLevel = 3
	LOG_LEVEL_ERROR       LogLevel = 4
	LOG_LEVEL_FATAL       LogLevel = 5
)

var LogLevel_name = map[int32]string{
	0: "Unspecified",
	1: "Info",
	2: "Debug",
	3: "Warn",
	4: "Error",
	5: "Fatal",
}

var LogLevel_value = map[string]int32{
	"Unspecified": 0,
	"Info":        1,
	"Debug":       2,
	"Warn":        3,
	"Error":       4,
	"Fatal":       5,
}

func (LogLevel) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8e3907a7549dbc61, []int{1}
}

type LogRecord struct {
	// log record id.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Version of the log entry, starting from "0".
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// admin or system
	Category LogCategory `protobuf:"varint,3,opt,name=category,proto3,enum=api.auditlog.v1.LogCategory" json:"category,omitempty"`
	// when does this log get generated from the source
	EmitTime *types.Timestamp `protobuf:"bytes,4,opt,name=emit_time,json=emitTime,proto3" json:"emit_time,omitempty"`
	// customer ip address or server name, if it's "Temporal Internal", the real ip address will be hidden.
	CallerIpAddress string `protobuf:"bytes,5,opt,name=caller_ip_address,json=callerIpAddress,proto3" json:"caller_ip_address,omitempty"`
	// which namespace
	Namespace string `protobuf:"bytes,6,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// what operation
	Operation string `protobuf:"bytes,7,opt,name=operation,proto3" json:"operation,omitempty"`
	// operation status from API call
	Status string `protobuf:"bytes,8,opt,name=status,proto3" json:"status,omitempty"`
	// level of the log, i.e. info, warn, error etc
	Level LogLevel `protobuf:"varint,9,opt,name=level,proto3,enum=api.auditlog.v1.LogLevel" json:"level,omitempty"`
	// additional message
	Message string `protobuf:"bytes,10,opt,name=message,proto3" json:"message,omitempty"`
	// example: CN=actions-workflow-engine.service.consul
	Identity string `protobuf:"bytes,11,opt,name=identity,proto3" json:"identity,omitempty"`
	// namespace's region.
	Region            string               `protobuf:"bytes,12,opt,name=region,proto3" json:"region,omitempty"`
	ThirdPartyDetails *ThirdPartyLogDetail `protobuf:"bytes,13,opt,name=third_party_details,json=thirdPartyDetails,proto3" json:"third_party_details,omitempty"`
	Tags              []string             `protobuf:"bytes,14,rep,name=tags,proto3" json:"tags,omitempty"`
	// If it's customer/user's operator, use email address; if it's temporal's support to run operation on behalf of
	// the customer, use "Temporal Internal" instead
	UserEmail string `protobuf:"bytes,15,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	// Detailed information about the operation.  For example, it could be the invited user email for "InviteUser" operation,
	// could be "enable audit logging" for UpdateAccount operation
	OperationDetails string `protobuf:"bytes,16,opt,name=operation_details,json=operationDetails,proto3" json:"operation_details,omitempty"`
}

func (m *LogRecord) Reset()      { *m = LogRecord{} }
func (*LogRecord) ProtoMessage() {}
func (*LogRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e3907a7549dbc61, []int{0}
}
func (m *LogRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LogRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LogRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LogRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogRecord.Merge(m, src)
}
func (m *LogRecord) XXX_Size() int {
	return m.Size()
}
func (m *LogRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_LogRecord.DiscardUnknown(m)
}

var xxx_messageInfo_LogRecord proto.InternalMessageInfo

func (m *LogRecord) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *LogRecord) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *LogRecord) GetCategory() LogCategory {
	if m != nil {
		return m.Category
	}
	return LOG_CATEGORY_UNSPECIFIED
}

func (m *LogRecord) GetEmitTime() *types.Timestamp {
	if m != nil {
		return m.EmitTime
	}
	return nil
}

func (m *LogRecord) GetCallerIpAddress() string {
	if m != nil {
		return m.CallerIpAddress
	}
	return ""
}

func (m *LogRecord) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *LogRecord) GetOperation() string {
	if m != nil {
		return m.Operation
	}
	return ""
}

func (m *LogRecord) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *LogRecord) GetLevel() LogLevel {
	if m != nil {
		return m.Level
	}
	return LOG_LEVEL_UNSPECIFIED
}

func (m *LogRecord) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *LogRecord) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

func (m *LogRecord) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *LogRecord) GetThirdPartyDetails() *ThirdPartyLogDetail {
	if m != nil {
		return m.ThirdPartyDetails
	}
	return nil
}

func (m *LogRecord) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *LogRecord) GetUserEmail() string {
	if m != nil {
		return m.UserEmail
	}
	return ""
}

func (m *LogRecord) GetOperationDetails() string {
	if m != nil {
		return m.OperationDetails
	}
	return ""
}

type ThirdPartyLogDetail struct {
	Id       string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	EmitTime *types.Timestamp `protobuf:"bytes,2,opt,name=emit_time,json=emitTime,proto3" json:"emit_time,omitempty"`
	// Description of the action, if any.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// The ID of the client which initiated the action.
	ClientId string `protobuf:"bytes,4,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// The origin ip address of the action (i.e. api call)
	IpAddress string `protobuf:"bytes,5,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	// Including the original log message from the third party app
	RawMessage string `protobuf:"bytes,6,opt,name=raw_message,json=rawMessage,proto3" json:"raw_message,omitempty"`
}

func (m *ThirdPartyLogDetail) Reset()      { *m = ThirdPartyLogDetail{} }
func (*ThirdPartyLogDetail) ProtoMessage() {}
func (*ThirdPartyLogDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e3907a7549dbc61, []int{1}
}
func (m *ThirdPartyLogDetail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ThirdPartyLogDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ThirdPartyLogDetail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ThirdPartyLogDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ThirdPartyLogDetail.Merge(m, src)
}
func (m *ThirdPartyLogDetail) XXX_Size() int {
	return m.Size()
}
func (m *ThirdPartyLogDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_ThirdPartyLogDetail.DiscardUnknown(m)
}

var xxx_messageInfo_ThirdPartyLogDetail proto.InternalMessageInfo

func (m *ThirdPartyLogDetail) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ThirdPartyLogDetail) GetEmitTime() *types.Timestamp {
	if m != nil {
		return m.EmitTime
	}
	return nil
}

func (m *ThirdPartyLogDetail) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ThirdPartyLogDetail) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func (m *ThirdPartyLogDetail) GetIpAddress() string {
	if m != nil {
		return m.IpAddress
	}
	return ""
}

func (m *ThirdPartyLogDetail) GetRawMessage() string {
	if m != nil {
		return m.RawMessage
	}
	return ""
}

func init() {
	proto.RegisterEnum("api.auditlog.v1.LogCategory", LogCategory_name, LogCategory_value)
	proto.RegisterEnum("api.auditlog.v1.LogLevel", LogLevel_name, LogLevel_value)
	proto.RegisterType((*LogRecord)(nil), "api.auditlog.v1.LogRecord")
	proto.RegisterType((*ThirdPartyLogDetail)(nil), "api.auditlog.v1.ThirdPartyLogDetail")
}

func init() { proto.RegisterFile("api/auditlog/v1/message.proto", fileDescriptor_8e3907a7549dbc61) }

var fileDescriptor_8e3907a7549dbc61 = []byte{
	// 701 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xc1, 0x4e, 0xdb, 0x4a,
	0x14, 0x8d, 0x93, 0x00, 0xf1, 0xcd, 0x7b, 0x89, 0x99, 0xe8, 0xf1, 0x0c, 0x05, 0x13, 0x21, 0x16,
	0x11, 0x95, 0x1c, 0x41, 0x17, 0xad, 0xd4, 0x55, 0x20, 0x06, 0x45, 0x32, 0x09, 0x32, 0xa1, 0x15,
	0xa8, 0x92, 0x35, 0xc4, 0x53, 0x77, 0x24, 0x27, 0xb6, 0xc6, 0x93, 0x20, 0x76, 0xfd, 0x80, 0x2e,
	0xfa, 0x19, 0xfd, 0x94, 0x2e, 0x59, 0xb2, 0x41, 0x2a, 0x61, 0xd3, 0x25, 0x9f, 0x50, 0xcd, 0x38,
	0x31, 0x04, 0xd8, 0x74, 0x37, 0xf7, 0x9c, 0xe3, 0x99, 0x73, 0xef, 0x3d, 0x32, 0xac, 0xe1, 0x88,
	0xd6, 0xf1, 0xd0, 0xa3, 0x3c, 0x08, 0xfd, 0xfa, 0x68, 0xbb, 0xde, 0x27, 0x71, 0x8c, 0x7d, 0x62,
	0x46, 0x2c, 0xe4, 0x21, 0x2a, 0xe3, 0x88, 0x9a, 0x53, 0xda, 0x1c, 0x6d, 0xaf, 0xac, 0xfb, 0x61,
	0xe8, 0x07, 0xa4, 0x2e, 0xe9, 0xf3, 0xe1, 0xe7, 0x3a, 0xa7, 0x7d, 0x12, 0x73, 0xdc, 0x8f, 0x92,
	0x2f, 0x36, 0x6e, 0xf2, 0xa0, 0xda, 0xa1, 0xef, 0x90, 0x5e, 0xc8, 0x3c, 0x54, 0x82, 0x2c, 0xf5,
	0x74, 0xa5, 0xaa, 0xd4, 0x54, 0x27, 0x4b, 0x3d, 0xa4, 0xc3, 0xc2, 0x88, 0xb0, 0x98, 0x86, 0x03,
	0x3d, 0x2b, 0xc1, 0x69, 0x89, 0xde, 0x41, 0xa1, 0x87, 0x39, 0xf1, 0x43, 0x76, 0xa9, 0xe7, 0xaa,
	0x4a, 0xad, 0xb4, 0xb3, 0x6a, 0x3e, 0x79, 0xdc, 0xb4, 0x43, 0x7f, 0x6f, 0xa2, 0x71, 0x52, 0x35,
	0x7a, 0x0b, 0x2a, 0xe9, 0x53, 0xee, 0x0a, 0x27, 0x7a, 0xbe, 0xaa, 0xd4, 0x8a, 0x3b, 0x2b, 0x66,
	0x62, 0xd3, 0x9c, 0xda, 0x34, 0xbb, 0x53, 0x9b, 0x4e, 0x41, 0x88, 0x45, 0x89, 0xb6, 0x60, 0xb1,
	0x87, 0x83, 0x80, 0x30, 0x97, 0x46, 0x2e, 0xf6, 0x3c, 0x46, 0xe2, 0x58, 0x9f, 0x93, 0xb6, 0xca,
	0x09, 0xd1, 0x8a, 0x1a, 0x09, 0x8c, 0x56, 0x41, 0x1d, 0xe0, 0x3e, 0x89, 0x23, 0xdc, 0x23, 0xfa,
	0xbc, 0xd4, 0x3c, 0x00, 0x82, 0x0d, 0x23, 0xc2, 0x30, 0x17, 0x8d, 0x2d, 0x24, 0x6c, 0x0a, 0xa0,
	0x25, 0x98, 0x8f, 0x39, 0xe6, 0xc3, 0x58, 0x2f, 0x48, 0x6a, 0x52, 0xa1, 0x3a, 0xcc, 0x05, 0x64,
	0x44, 0x02, 0x5d, 0x95, 0xfd, 0x2e, 0xbf, 0xd4, 0xaf, 0x2d, 0x04, 0x4e, 0xa2, 0x13, 0xd3, 0x9b,
	0xac, 0x47, 0x87, 0x64, 0x7a, 0x93, 0x12, 0xad, 0x40, 0x81, 0x7a, 0x64, 0xc0, 0x29, 0xbf, 0xd4,
	0x8b, 0x92, 0x4a, 0x6b, 0xf1, 0x3c, 0x23, 0xbe, 0x70, 0xf6, 0x4f, 0xf2, 0x7c, 0x52, 0xa1, 0x2e,
	0x54, 0xf8, 0x17, 0xca, 0x3c, 0x37, 0xc2, 0x8c, 0x5f, 0xba, 0x1e, 0xe1, 0x98, 0x06, 0xb1, 0xfe,
	0xaf, 0x9c, 0xe0, 0xe6, 0x33, 0x33, 0x5d, 0xa1, 0x3d, 0x12, 0x52, 0x3b, 0xf4, 0x9b, 0x52, 0xec,
	0x2c, 0xf2, 0x14, 0x4c, 0x90, 0x18, 0x21, 0xc8, 0x73, 0xec, 0xc7, 0x7a, 0xa9, 0x9a, 0xab, 0xa9,
	0x8e, 0x3c, 0xa3, 0x35, 0x80, 0x61, 0x4c, 0x98, 0x4b, 0xfa, 0x98, 0x06, 0x7a, 0x39, 0x99, 0x8f,
	0x40, 0x2c, 0x01, 0xa0, 0xd7, 0xb0, 0x98, 0x0e, 0x2b, 0xb5, 0xa1, 0x49, 0x95, 0x96, 0x12, 0x93,
	0xfb, 0x37, 0x6e, 0x14, 0xa8, 0xbc, 0x60, 0xe5, 0x59, 0xd2, 0x66, 0x52, 0x91, 0xfd, 0x8b, 0x54,
	0x54, 0xa1, 0xe8, 0x91, 0xb8, 0xc7, 0x68, 0x24, 0xb7, 0x99, 0x93, 0x37, 0x3e, 0x86, 0xd0, 0x2b,
	0x50, 0x7b, 0x01, 0x25, 0x03, 0xee, 0x52, 0x4f, 0x06, 0x4e, 0x75, 0x0a, 0x09, 0xd0, 0xf2, 0x44,
	0xaf, 0xcf, 0xd2, 0xa4, 0xd2, 0x34, 0x47, 0xeb, 0x50, 0x64, 0xf8, 0xc2, 0x9d, 0xae, 0x31, 0x49,
	0x12, 0x30, 0x7c, 0x71, 0x98, 0x20, 0x5b, 0x9f, 0xa0, 0xf8, 0x28, 0xe6, 0x68, 0x15, 0x74, 0xbb,
	0x73, 0xe0, 0xee, 0x35, 0xba, 0xd6, 0x41, 0xc7, 0x39, 0x75, 0x4f, 0xda, 0xc7, 0x47, 0xd6, 0x5e,
	0x6b, 0xbf, 0x65, 0x35, 0xb5, 0x0c, 0x5a, 0x02, 0x34, 0xc3, 0x36, 0x9a, 0x87, 0xad, 0xb6, 0xa6,
	0xa0, 0xff, 0xa1, 0x32, 0x83, 0x1f, 0x9f, 0x1e, 0x77, 0xad, 0x43, 0x2d, 0xbb, 0xf5, 0x4d, 0x81,
	0xc2, 0x34, 0x55, 0x68, 0x19, 0xfe, 0x13, 0x2a, 0xdb, 0xfa, 0x60, 0xd9, 0x4f, 0x2e, 0x46, 0x50,
	0x7a, 0xa0, 0x5a, 0xed, 0xfd, 0x8e, 0xa6, 0xa0, 0x0a, 0x94, 0x1f, 0xb0, 0xa6, 0xb5, 0x7b, 0x72,
	0xa0, 0x65, 0x67, 0x85, 0x1f, 0x1b, 0x4e, 0x5b, 0xcb, 0xcd, 0x0a, 0x2d, 0xc7, 0xe9, 0x38, 0x5a,
	0x7e, 0x16, 0xdc, 0x6f, 0x74, 0x1b, 0xb6, 0x36, 0xb7, 0x7b, 0x76, 0x75, 0x6b, 0x64, 0xae, 0x6f,
	0x8d, 0xcc, 0xfd, 0xad, 0xa1, 0x7c, 0x1d, 0x1b, 0xca, 0x8f, 0xb1, 0xa1, 0xfc, 0x1c, 0x1b, 0xca,
	0xd5, 0xd8, 0x50, 0x7e, 0x8d, 0x0d, 0xe5, 0xf7, 0xd8, 0xc8, 0xdc, 0x8f, 0x0d, 0xe5, 0xfb, 0x9d,
	0x91, 0xb9, 0xba, 0x33, 0x32, 0xd7, 0x77, 0x46, 0xe6, 0x6c, 0x93, 0xf7, 0x23, 0x16, 0x98, 0xbd,
	0x20, 0x1c, 0x7a, 0xf5, 0x27, 0xff, 0xaf, 0xf7, 0xd3, 0xf3, 0xf9, 0xbc, 0xdc, 0xf2, 0x9b, 0x3f,
	0x01, 0x00, 0x00, 0xff, 0xff, 0x40, 0x94, 0xb7, 0xb5, 0xe2, 0x04, 0x00, 0x00,
}

func (x LogCategory) String() string {
	s, ok := LogCategory_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x LogLevel) String() string {
	s, ok := LogLevel_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *LogRecord) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LogRecord)
	if !ok {
		that2, ok := that.(LogRecord)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	if this.Category != that1.Category {
		return false
	}
	if !this.EmitTime.Equal(that1.EmitTime) {
		return false
	}
	if this.CallerIpAddress != that1.CallerIpAddress {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Operation != that1.Operation {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.Level != that1.Level {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	if this.Identity != that1.Identity {
		return false
	}
	if this.Region != that1.Region {
		return false
	}
	if !this.ThirdPartyDetails.Equal(that1.ThirdPartyDetails) {
		return false
	}
	if len(this.Tags) != len(that1.Tags) {
		return false
	}
	for i := range this.Tags {
		if this.Tags[i] != that1.Tags[i] {
			return false
		}
	}
	if this.UserEmail != that1.UserEmail {
		return false
	}
	if this.OperationDetails != that1.OperationDetails {
		return false
	}
	return true
}
func (this *ThirdPartyLogDetail) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ThirdPartyLogDetail)
	if !ok {
		that2, ok := that.(ThirdPartyLogDetail)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if !this.EmitTime.Equal(that1.EmitTime) {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.ClientId != that1.ClientId {
		return false
	}
	if this.IpAddress != that1.IpAddress {
		return false
	}
	if this.RawMessage != that1.RawMessage {
		return false
	}
	return true
}
func (this *LogRecord) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 20)
	s = append(s, "&auditlog.LogRecord{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	s = append(s, "Category: "+fmt.Sprintf("%#v", this.Category)+",\n")
	if this.EmitTime != nil {
		s = append(s, "EmitTime: "+fmt.Sprintf("%#v", this.EmitTime)+",\n")
	}
	s = append(s, "CallerIpAddress: "+fmt.Sprintf("%#v", this.CallerIpAddress)+",\n")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Operation: "+fmt.Sprintf("%#v", this.Operation)+",\n")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "Level: "+fmt.Sprintf("%#v", this.Level)+",\n")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	s = append(s, "Identity: "+fmt.Sprintf("%#v", this.Identity)+",\n")
	s = append(s, "Region: "+fmt.Sprintf("%#v", this.Region)+",\n")
	if this.ThirdPartyDetails != nil {
		s = append(s, "ThirdPartyDetails: "+fmt.Sprintf("%#v", this.ThirdPartyDetails)+",\n")
	}
	s = append(s, "Tags: "+fmt.Sprintf("%#v", this.Tags)+",\n")
	s = append(s, "UserEmail: "+fmt.Sprintf("%#v", this.UserEmail)+",\n")
	s = append(s, "OperationDetails: "+fmt.Sprintf("%#v", this.OperationDetails)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ThirdPartyLogDetail) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&auditlog.ThirdPartyLogDetail{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	if this.EmitTime != nil {
		s = append(s, "EmitTime: "+fmt.Sprintf("%#v", this.EmitTime)+",\n")
	}
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "ClientId: "+fmt.Sprintf("%#v", this.ClientId)+",\n")
	s = append(s, "IpAddress: "+fmt.Sprintf("%#v", this.IpAddress)+",\n")
	s = append(s, "RawMessage: "+fmt.Sprintf("%#v", this.RawMessage)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringMessage(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *LogRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LogRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OperationDetails) > 0 {
		i -= len(m.OperationDetails)
		copy(dAtA[i:], m.OperationDetails)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.OperationDetails)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.UserEmail) > 0 {
		i -= len(m.UserEmail)
		copy(dAtA[i:], m.UserEmail)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.UserEmail)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.Tags) > 0 {
		for iNdEx := len(m.Tags) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Tags[iNdEx])
			copy(dAtA[i:], m.Tags[iNdEx])
			i = encodeVarintMessage(dAtA, i, uint64(len(m.Tags[iNdEx])))
			i--
			dAtA[i] = 0x72
		}
	}
	if m.ThirdPartyDetails != nil {
		{
			size, err := m.ThirdPartyDetails.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if len(m.Region) > 0 {
		i -= len(m.Region)
		copy(dAtA[i:], m.Region)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Region)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x52
	}
	if m.Level != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x48
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Operation) > 0 {
		i -= len(m.Operation)
		copy(dAtA[i:], m.Operation)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Operation)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.CallerIpAddress) > 0 {
		i -= len(m.CallerIpAddress)
		copy(dAtA[i:], m.CallerIpAddress)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.CallerIpAddress)))
		i--
		dAtA[i] = 0x2a
	}
	if m.EmitTime != nil {
		{
			size, err := m.EmitTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Category != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Category))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ThirdPartyLogDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ThirdPartyLogDetail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ThirdPartyLogDetail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RawMessage) > 0 {
		i -= len(m.RawMessage)
		copy(dAtA[i:], m.RawMessage)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.RawMessage)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.IpAddress) > 0 {
		i -= len(m.IpAddress)
		copy(dAtA[i:], m.IpAddress)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.IpAddress)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ClientId) > 0 {
		i -= len(m.ClientId)
		copy(dAtA[i:], m.ClientId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.ClientId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if m.EmitTime != nil {
		{
			size, err := m.EmitTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMessage(dAtA []byte, offset int, v uint64) int {
	offset -= sovMessage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LogRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Category != 0 {
		n += 1 + sovMessage(uint64(m.Category))
	}
	if m.EmitTime != nil {
		l = m.EmitTime.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.CallerIpAddress)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Operation)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Level != 0 {
		n += 1 + sovMessage(uint64(m.Level))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Region)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.ThirdPartyDetails != nil {
		l = m.ThirdPartyDetails.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			l = len(s)
			n += 1 + l + sovMessage(uint64(l))
		}
	}
	l = len(m.UserEmail)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.OperationDetails)
	if l > 0 {
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *ThirdPartyLogDetail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.EmitTime != nil {
		l = m.EmitTime.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.ClientId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.IpAddress)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.RawMessage)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func sovMessage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMessage(x uint64) (n int) {
	return sovMessage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *LogRecord) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LogRecord{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`Category:` + fmt.Sprintf("%v", this.Category) + `,`,
		`EmitTime:` + strings.Replace(fmt.Sprintf("%v", this.EmitTime), "Timestamp", "types.Timestamp", 1) + `,`,
		`CallerIpAddress:` + fmt.Sprintf("%v", this.CallerIpAddress) + `,`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Operation:` + fmt.Sprintf("%v", this.Operation) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`Level:` + fmt.Sprintf("%v", this.Level) + `,`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`Identity:` + fmt.Sprintf("%v", this.Identity) + `,`,
		`Region:` + fmt.Sprintf("%v", this.Region) + `,`,
		`ThirdPartyDetails:` + strings.Replace(this.ThirdPartyDetails.String(), "ThirdPartyLogDetail", "ThirdPartyLogDetail", 1) + `,`,
		`Tags:` + fmt.Sprintf("%v", this.Tags) + `,`,
		`UserEmail:` + fmt.Sprintf("%v", this.UserEmail) + `,`,
		`OperationDetails:` + fmt.Sprintf("%v", this.OperationDetails) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ThirdPartyLogDetail) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ThirdPartyLogDetail{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`EmitTime:` + strings.Replace(fmt.Sprintf("%v", this.EmitTime), "Timestamp", "types.Timestamp", 1) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`ClientId:` + fmt.Sprintf("%v", this.ClientId) + `,`,
		`IpAddress:` + fmt.Sprintf("%v", this.IpAddress) + `,`,
		`RawMessage:` + fmt.Sprintf("%v", this.RawMessage) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringMessage(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *LogRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Category", wireType)
			}
			m.Category = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Category |= LogCategory(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmitTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EmitTime == nil {
				m.EmitTime = &types.Timestamp{}
			}
			if err := m.EmitTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallerIpAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CallerIpAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operation = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= LogLevel(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Region = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThirdPartyDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ThirdPartyDetails == nil {
				m.ThirdPartyDetails = &ThirdPartyLogDetail{}
			}
			if err := m.ThirdPartyDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserEmail", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserEmail = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperationDetails", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperationDetails = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ThirdPartyLogDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ThirdPartyLogDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ThirdPartyLogDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmitTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EmitTime == nil {
				m.EmitTime = &types.Timestamp{}
			}
			if err := m.EmitTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IpAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RawMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMessage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMessage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMessage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMessage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMessage = fmt.Errorf("proto: unexpected end of group")
)
