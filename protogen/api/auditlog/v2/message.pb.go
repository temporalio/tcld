// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/auditlog/v2/message.proto

package auditlog

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type LogCategory int32

const (
	LOG_CATEGORY_UNSPECIFIED LogCategory = 0
	LOG_CATEGORY_ADMIN       LogCategory = 1
	LOG_CATEGORY_SYSTEM      LogCategory = 2
)

var LogCategory_name = map[int32]string{
	0: "Unspecified",
	1: "Admin",
	2: "System",
}

var LogCategory_value = map[string]int32{
	"Unspecified": 0,
	"Admin":       1,
	"System":      2,
}

func (LogCategory) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_49e745c9699c01c8, []int{0}
}

type LogLevel int32

const (
	LOG_LEVEL_UNSPECIFIED LogLevel = 0
	LOG_LEVEL_INFO        LogLevel = 1
	LOG_LEVEL_DEBUG       LogLevel = 2
	LOG_LEVEL_WARN        LogLevel = 3
	LOG_LEVEL_ERROR       LogLevel = 4
	LOG_LEVEL_FATAL       LogLevel = 5
)

var LogLevel_name = map[int32]string{
	0: "Unspecified",
	1: "Info",
	2: "Debug",
	3: "Warn",
	4: "Error",
	5: "Fatal",
}

var LogLevel_value = map[string]int32{
	"Unspecified": 0,
	"Info":        1,
	"Debug":       2,
	"Warn":        3,
	"Error":       4,
	"Fatal":       5,
}

func (LogLevel) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_49e745c9699c01c8, []int{1}
}

// LogRecord is the top level audit log message.  The logs from Temporal will be transformed into LogRecord and sent
// to user in some unmarshalled format, i.e. json.  The message is structured following some common log formats.  It has
// the order of emit_time | level | user_email | caller_ip | operation | operation_details | status | category | version.
// Example:
// 2022-10-24T15:09:25.744Z INFO xyz@temporal.io 127.0.0.1 DeleteNamespace test-auditlog.temporal-account OK Admin 0
type LogRecord struct {
	// when does this log get generated from the source
	EmitTime *types.Timestamp `protobuf:"bytes,1,opt,name=emit_time,json=emitTime,proto3" json:"emit_time,omitempty"`
	// level of the log, i.e. info, warn, error etc
	Level LogLevel `protobuf:"varint,2,opt,name=level,proto3,enum=api.auditlog.v2.LogLevel" json:"level,omitempty"`
	// If it's customer/user's operator, use email address; if it's Temporal's support to run operation on behalf of
	// the customer, use "support@temoral.io" instead
	UserEmail string `protobuf:"bytes,3,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	// customer ip address or server name, if it's "Temporal Internal", the real ip address will be hidden.
	CallerIpAddress string `protobuf:"bytes,4,opt,name=caller_ip_address,json=callerIpAddress,proto3" json:"caller_ip_address,omitempty"`
	// what operation
	Operation string `protobuf:"bytes,5,opt,name=operation,proto3" json:"operation,omitempty"`
	// Detailed information about the operation.  For example, it could be the invited user email for "InviteUser" operation,
	// could be "enable audit logging" for UpdateAccount operation
	Details *OperationDetail `protobuf:"bytes,6,opt,name=details,proto3" json:"details,omitempty"`
	// operation status from API call
	Status string `protobuf:"bytes,7,opt,name=status,proto3" json:"status,omitempty"`
	// admin or system
	Category LogCategory `protobuf:"varint,8,opt,name=category,proto3,enum=api.auditlog.v2.LogCategory" json:"category,omitempty"`
	// Version of the log entry, starting from 0.  The version will be updated when there is a backfill/resend of the same
	// logs
	Version int32 `protobuf:"varint,9,opt,name=version,proto3" json:"version,omitempty"`
	// Unique ID for the log record.
	LogId string `protobuf:"bytes,10,opt,name=log_id,json=logId,proto3" json:"log_id,omitempty"`
}

func (m *LogRecord) Reset()      { *m = LogRecord{} }
func (*LogRecord) ProtoMessage() {}
func (*LogRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_49e745c9699c01c8, []int{0}
}
func (m *LogRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LogRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LogRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LogRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogRecord.Merge(m, src)
}
func (m *LogRecord) XXX_Size() int {
	return m.Size()
}
func (m *LogRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_LogRecord.DiscardUnknown(m)
}

var xxx_messageInfo_LogRecord proto.InternalMessageInfo

func (m *LogRecord) GetEmitTime() *types.Timestamp {
	if m != nil {
		return m.EmitTime
	}
	return nil
}

func (m *LogRecord) GetLevel() LogLevel {
	if m != nil {
		return m.Level
	}
	return LOG_LEVEL_UNSPECIFIED
}

func (m *LogRecord) GetUserEmail() string {
	if m != nil {
		return m.UserEmail
	}
	return ""
}

func (m *LogRecord) GetCallerIpAddress() string {
	if m != nil {
		return m.CallerIpAddress
	}
	return ""
}

func (m *LogRecord) GetOperation() string {
	if m != nil {
		return m.Operation
	}
	return ""
}

func (m *LogRecord) GetDetails() *OperationDetail {
	if m != nil {
		return m.Details
	}
	return nil
}

func (m *LogRecord) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *LogRecord) GetCategory() LogCategory {
	if m != nil {
		return m.Category
	}
	return LOG_CATEGORY_UNSPECIFIED
}

func (m *LogRecord) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *LogRecord) GetLogId() string {
	if m != nil {
		return m.LogId
	}
	return ""
}

// OperationDetails includes potential more detailed operation logs extracted from the different fields in the
// Temporal API logs or third party logs, e.g. auth0
type OperationDetail struct {
	// the namespace the operation was performed on
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// the users the operation was performed on
	TargetUsers []string `protobuf:"bytes,2,rep,name=target_users,json=targetUsers,proto3" json:"target_users,omitempty"`
	// if any role is processed, we provide the role information
	Roles []string `protobuf:"bytes,3,rep,name=roles,proto3" json:"roles,omitempty"`
	// if client ca is included, we provide the fingerprints
	ClientCaFingerprints []string `protobuf:"bytes,4,rep,name=client_ca_fingerprints,json=clientCaFingerprints,proto3" json:"client_ca_fingerprints,omitempty"`
	// if search attribute is processed, we provide the search attributes
	SearchAttributeUpdate *SearchAttributeUpdate `protobuf:"bytes,5,opt,name=search_attribute_update,json=searchAttributeUpdate,proto3" json:"search_attribute_update,omitempty"`
	// additional message if there is any
	AdditionalMessage string `protobuf:"bytes,6,opt,name=additional_message,json=additionalMessage,proto3" json:"additional_message,omitempty"`
	// namespace's region if available
	Region string `protobuf:"bytes,7,opt,name=region,proto3" json:"region,omitempty"`
	// if there are account features changed, i.e. external metrics, audit logging sink etc.
	AccountFeatures []string `protobuf:"bytes,8,rep,name=account_features,json=accountFeatures,proto3" json:"account_features,omitempty"`
	// some third party log details, i.e. auth0
	ThirdPartyDetails *ThirdPartyLogDetail `protobuf:"bytes,9,opt,name=third_party_details,json=thirdPartyDetails,proto3" json:"third_party_details,omitempty"`
}

func (m *OperationDetail) Reset()      { *m = OperationDetail{} }
func (*OperationDetail) ProtoMessage() {}
func (*OperationDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_49e745c9699c01c8, []int{1}
}
func (m *OperationDetail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OperationDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OperationDetail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OperationDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OperationDetail.Merge(m, src)
}
func (m *OperationDetail) XXX_Size() int {
	return m.Size()
}
func (m *OperationDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_OperationDetail.DiscardUnknown(m)
}

var xxx_messageInfo_OperationDetail proto.InternalMessageInfo

func (m *OperationDetail) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *OperationDetail) GetTargetUsers() []string {
	if m != nil {
		return m.TargetUsers
	}
	return nil
}

func (m *OperationDetail) GetRoles() []string {
	if m != nil {
		return m.Roles
	}
	return nil
}

func (m *OperationDetail) GetClientCaFingerprints() []string {
	if m != nil {
		return m.ClientCaFingerprints
	}
	return nil
}

func (m *OperationDetail) GetSearchAttributeUpdate() *SearchAttributeUpdate {
	if m != nil {
		return m.SearchAttributeUpdate
	}
	return nil
}

func (m *OperationDetail) GetAdditionalMessage() string {
	if m != nil {
		return m.AdditionalMessage
	}
	return ""
}

func (m *OperationDetail) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *OperationDetail) GetAccountFeatures() []string {
	if m != nil {
		return m.AccountFeatures
	}
	return nil
}

func (m *OperationDetail) GetThirdPartyDetails() *ThirdPartyLogDetail {
	if m != nil {
		return m.ThirdPartyDetails
	}
	return nil
}

type SearchAttributeUpdate struct {
	ExistingAttribute string `protobuf:"bytes,1,opt,name=existing_attribute,json=existingAttribute,proto3" json:"existing_attribute,omitempty"`
	NewAttribute      string `protobuf:"bytes,2,opt,name=new_attribute,json=newAttribute,proto3" json:"new_attribute,omitempty"`
}

func (m *SearchAttributeUpdate) Reset()      { *m = SearchAttributeUpdate{} }
func (*SearchAttributeUpdate) ProtoMessage() {}
func (*SearchAttributeUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_49e745c9699c01c8, []int{2}
}
func (m *SearchAttributeUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SearchAttributeUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SearchAttributeUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SearchAttributeUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchAttributeUpdate.Merge(m, src)
}
func (m *SearchAttributeUpdate) XXX_Size() int {
	return m.Size()
}
func (m *SearchAttributeUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchAttributeUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_SearchAttributeUpdate proto.InternalMessageInfo

func (m *SearchAttributeUpdate) GetExistingAttribute() string {
	if m != nil {
		return m.ExistingAttribute
	}
	return ""
}

func (m *SearchAttributeUpdate) GetNewAttribute() string {
	if m != nil {
		return m.NewAttribute
	}
	return ""
}

type ThirdPartyLogDetail struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// the third party source, e.g. auth0
	Source string `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	// the raw log message from the third party app, e.g. the whole auth0 event log
	RawMessage string `protobuf:"bytes,3,opt,name=raw_message,json=rawMessage,proto3" json:"raw_message,omitempty"`
}

func (m *ThirdPartyLogDetail) Reset()      { *m = ThirdPartyLogDetail{} }
func (*ThirdPartyLogDetail) ProtoMessage() {}
func (*ThirdPartyLogDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_49e745c9699c01c8, []int{3}
}
func (m *ThirdPartyLogDetail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ThirdPartyLogDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ThirdPartyLogDetail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ThirdPartyLogDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ThirdPartyLogDetail.Merge(m, src)
}
func (m *ThirdPartyLogDetail) XXX_Size() int {
	return m.Size()
}
func (m *ThirdPartyLogDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_ThirdPartyLogDetail.DiscardUnknown(m)
}

var xxx_messageInfo_ThirdPartyLogDetail proto.InternalMessageInfo

func (m *ThirdPartyLogDetail) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ThirdPartyLogDetail) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *ThirdPartyLogDetail) GetRawMessage() string {
	if m != nil {
		return m.RawMessage
	}
	return ""
}

func init() {
	proto.RegisterEnum("api.auditlog.v2.LogCategory", LogCategory_name, LogCategory_value)
	proto.RegisterEnum("api.auditlog.v2.LogLevel", LogLevel_name, LogLevel_value)
	proto.RegisterType((*LogRecord)(nil), "api.auditlog.v2.LogRecord")
	proto.RegisterType((*OperationDetail)(nil), "api.auditlog.v2.OperationDetail")
	proto.RegisterType((*SearchAttributeUpdate)(nil), "api.auditlog.v2.SearchAttributeUpdate")
	proto.RegisterType((*ThirdPartyLogDetail)(nil), "api.auditlog.v2.ThirdPartyLogDetail")
}

func init() { proto.RegisterFile("api/auditlog/v2/message.proto", fileDescriptor_49e745c9699c01c8) }

var fileDescriptor_49e745c9699c01c8 = []byte{
	// 841 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x94, 0xcb, 0x6e, 0xdb, 0x46,
	0x14, 0x86, 0x45, 0x29, 0xb2, 0xcd, 0xa3, 0xd4, 0xa2, 0xc7, 0xb1, 0xc3, 0x04, 0x0e, 0xa3, 0xba,
	0x41, 0xa1, 0x1a, 0x28, 0x05, 0xa8, 0x05, 0x5a, 0xb4, 0x2b, 0xc5, 0xa6, 0x0c, 0x01, 0xb2, 0x15,
	0x50, 0x72, 0x8b, 0x04, 0x45, 0x88, 0x31, 0x39, 0x66, 0x06, 0xa5, 0x38, 0xc4, 0xcc, 0xd0, 0x6e,
	0x76, 0x7d, 0x80, 0x2e, 0xfa, 0x02, 0xdd, 0xf7, 0x49, 0x8a, 0x2e, 0xbd, 0xcc, 0xb2, 0x96, 0x37,
	0x5d, 0xe6, 0x11, 0x8a, 0xe1, 0x45, 0xb2, 0x6c, 0x77, 0xa7, 0xf3, 0xff, 0xdf, 0x1c, 0xcd, 0xb9,
	0x70, 0xe0, 0x19, 0x4e, 0x68, 0x07, 0xa7, 0x01, 0x95, 0x11, 0x0b, 0x3b, 0xe7, 0xdd, 0xce, 0x94,
	0x08, 0x81, 0x43, 0x62, 0x27, 0x9c, 0x49, 0x86, 0x9a, 0x38, 0xa1, 0x76, 0x69, 0xdb, 0xe7, 0xdd,
	0xa7, 0xcf, 0x43, 0xc6, 0xc2, 0x88, 0x74, 0x32, 0xfb, 0x34, 0x3d, 0xeb, 0x48, 0x3a, 0x25, 0x42,
	0xe2, 0x69, 0x92, 0x9f, 0xd8, 0xfd, 0xa3, 0x06, 0xfa, 0x90, 0x85, 0x2e, 0xf1, 0x19, 0x0f, 0xd0,
	0x37, 0xa0, 0x93, 0x29, 0x95, 0x9e, 0xa2, 0x4c, 0xad, 0xa5, 0xb5, 0x1b, 0xdd, 0xa7, 0x76, 0x9e,
	0xc2, 0x2e, 0x53, 0xd8, 0x93, 0x32, 0x85, 0xbb, 0xa6, 0x60, 0x15, 0xa2, 0x0e, 0xd4, 0x23, 0x72,
	0x4e, 0x22, 0xb3, 0xda, 0xd2, 0xda, 0xeb, 0xdd, 0x27, 0xf6, 0xad, 0x8b, 0xd8, 0x43, 0x16, 0x0e,
	0x15, 0xe0, 0xe6, 0x1c, 0x7a, 0x06, 0x90, 0x0a, 0xc2, 0x3d, 0x32, 0xc5, 0x34, 0x32, 0x6b, 0x2d,
	0xad, 0xad, 0xbb, 0xba, 0x52, 0x1c, 0x25, 0xa0, 0x3d, 0xd8, 0xf0, 0x71, 0x14, 0x11, 0xee, 0xd1,
	0xc4, 0xc3, 0x41, 0xc0, 0x89, 0x10, 0xe6, 0x83, 0x8c, 0x6a, 0xe6, 0xc6, 0x20, 0xe9, 0xe5, 0x32,
	0xda, 0x01, 0x9d, 0x25, 0x84, 0x63, 0x49, 0x59, 0x6c, 0xd6, 0xf3, 0x4c, 0x73, 0x01, 0x7d, 0x07,
	0xab, 0x01, 0x91, 0x98, 0x46, 0xc2, 0x5c, 0xc9, 0x0a, 0x6a, 0xdd, 0xb9, 0xdb, 0xa8, 0x84, 0x0f,
	0x32, 0xd0, 0x2d, 0x0f, 0xa0, 0x6d, 0x58, 0x11, 0x12, 0xcb, 0x54, 0x98, 0xab, 0x59, 0xda, 0x22,
	0x42, 0xdf, 0xc2, 0x9a, 0x8f, 0x25, 0x09, 0x19, 0x7f, 0x6f, 0xae, 0x65, 0x05, 0xef, 0xdc, 0x57,
	0xf0, 0x7e, 0xc1, 0xb8, 0x73, 0x1a, 0x99, 0xb0, 0x7a, 0x4e, 0xb8, 0x50, 0x37, 0xd5, 0x5b, 0x5a,
	0xbb, 0xee, 0x96, 0x21, 0xda, 0x82, 0x95, 0x88, 0x85, 0x1e, 0x0d, 0x4c, 0xc8, 0xfe, 0xab, 0x1e,
	0xb1, 0x70, 0x10, 0xec, 0xfe, 0x55, 0x83, 0xe6, 0xad, 0xfb, 0xa9, 0x82, 0x63, 0x3c, 0x25, 0x22,
	0xc1, 0x7e, 0x3e, 0x25, 0xdd, 0x5d, 0x08, 0xe8, 0x53, 0x78, 0x28, 0x31, 0x0f, 0x89, 0xf4, 0x54,
	0x3b, 0x85, 0x59, 0x6d, 0xd5, 0xda, 0xba, 0xdb, 0xc8, 0xb5, 0x13, 0x25, 0xa1, 0x47, 0x50, 0xe7,
	0x2c, 0x22, 0xc2, 0xac, 0x65, 0x5e, 0x1e, 0xa0, 0xaf, 0x61, 0xdb, 0x8f, 0x28, 0x89, 0xa5, 0xe7,
	0x63, 0xef, 0x8c, 0xc6, 0x21, 0xe1, 0x09, 0xa7, 0xb1, 0x54, 0x8d, 0x57, 0xd8, 0xa3, 0xdc, 0xdd,
	0xc7, 0xfd, 0x1b, 0x1e, 0x7a, 0x0b, 0x8f, 0x05, 0xc1, 0xdc, 0x7f, 0xe7, 0x61, 0x29, 0x39, 0x3d,
	0x4d, 0x25, 0xf1, 0xd2, 0x24, 0xc0, 0x92, 0x64, 0xb3, 0x68, 0x74, 0x3f, 0xbf, 0xd3, 0x9a, 0x71,
	0xc6, 0xf7, 0x4a, 0xfc, 0x24, 0xa3, 0xdd, 0x2d, 0x71, 0x9f, 0x8c, 0xbe, 0x04, 0x84, 0x83, 0x80,
	0xaa, 0xf2, 0x71, 0xe4, 0x15, 0xeb, 0x9e, 0x8d, 0x52, 0x77, 0x37, 0x16, 0xce, 0x51, 0x6e, 0xa8,
	0x91, 0x71, 0x12, 0xaa, 0xfe, 0x16, 0x23, 0xcb, 0x23, 0xf4, 0x05, 0x18, 0xd8, 0xf7, 0x59, 0x1a,
	0x4b, 0xef, 0x8c, 0x60, 0x99, 0x72, 0x22, 0xcc, 0xb5, 0xac, 0xac, 0x66, 0xa1, 0xf7, 0x0b, 0x19,
	0x4d, 0x60, 0x53, 0xbe, 0xa3, 0x3c, 0xf0, 0x12, 0xcc, 0xe5, 0x7b, 0xaf, 0xdc, 0x1e, 0x3d, 0xab,
	0xe6, 0xc5, 0x9d, 0x6a, 0x26, 0x8a, 0x7d, 0xa5, 0xd0, 0x21, 0x0b, 0x8b, 0x0d, 0xda, 0x90, 0x73,
	0x31, 0x57, 0xc4, 0xee, 0xcf, 0xb0, 0x35, 0xfe, 0xbf, 0x02, 0xc9, 0x2f, 0x54, 0x48, 0x1a, 0x87,
	0x8b, 0x16, 0x16, 0x63, 0xdd, 0x28, 0x9d, 0xf9, 0x21, 0xf4, 0x19, 0x7c, 0x12, 0x93, 0x8b, 0x1b,
	0x64, 0x35, 0x23, 0x1f, 0xc6, 0xe4, 0x62, 0x0e, 0xed, 0xbe, 0x85, 0xcd, 0x7b, 0xae, 0x85, 0xd6,
	0xa1, 0x4a, 0x83, 0x22, 0x75, 0x95, 0x06, 0xd9, 0x7e, 0xb3, 0x94, 0xfb, 0x65, 0x92, 0x22, 0x42,
	0xcf, 0xa1, 0xc1, 0xf1, 0xc5, 0xbc, 0xd9, 0xf9, 0xd7, 0x09, 0x1c, 0x5f, 0x14, 0x5d, 0xde, 0xfb,
	0x09, 0x1a, 0x37, 0xf6, 0x1b, 0xed, 0x80, 0x39, 0x1c, 0x1d, 0x7a, 0xfb, 0xbd, 0x89, 0x73, 0x38,
	0x72, 0x5f, 0x7b, 0x27, 0xc7, 0xe3, 0x57, 0xce, 0xfe, 0xa0, 0x3f, 0x70, 0x0e, 0x8c, 0x0a, 0xda,
	0x06, 0xb4, 0xe4, 0xf6, 0x0e, 0x8e, 0x06, 0xc7, 0x86, 0x86, 0x1e, 0xc3, 0xe6, 0x92, 0x3e, 0x7e,
	0x3d, 0x9e, 0x38, 0x47, 0x46, 0x75, 0xef, 0x37, 0x0d, 0xd6, 0xca, 0xf7, 0x02, 0x3d, 0x81, 0x2d,
	0x45, 0x0d, 0x9d, 0x1f, 0x9c, 0xe1, 0xad, 0xc4, 0x08, 0xd6, 0x17, 0xd6, 0xe0, 0xb8, 0x3f, 0x32,
	0x34, 0xb4, 0x09, 0xcd, 0x85, 0x76, 0xe0, 0xbc, 0x3c, 0x39, 0x34, 0xaa, 0xcb, 0xe0, 0x8f, 0x3d,
	0xf7, 0xd8, 0xa8, 0x2d, 0x83, 0x8e, 0xeb, 0x8e, 0x5c, 0xe3, 0xc1, 0xb2, 0xd8, 0xef, 0x4d, 0x7a,
	0x43, 0xa3, 0xfe, 0xf2, 0xcd, 0xe5, 0x95, 0x55, 0xf9, 0x70, 0x65, 0x55, 0x3e, 0x5e, 0x59, 0xda,
	0xaf, 0x33, 0x4b, 0xfb, 0x73, 0x66, 0x69, 0x7f, 0xcf, 0x2c, 0xed, 0x72, 0x66, 0x69, 0xff, 0xcc,
	0x2c, 0xed, 0xdf, 0x99, 0x55, 0xf9, 0x38, 0xb3, 0xb4, 0xdf, 0xaf, 0xad, 0xca, 0xe5, 0xb5, 0x55,
	0xf9, 0x70, 0x6d, 0x55, 0xde, 0xbc, 0x90, 0xd3, 0x84, 0x47, 0xb6, 0x1f, 0xb1, 0x34, 0xe8, 0xdc,
	0x7a, 0xb5, 0xbf, 0x2f, 0x7f, 0x9f, 0xae, 0x64, 0xaf, 0xea, 0x57, 0xff, 0x05, 0x00, 0x00, 0xff,
	0xff, 0x4c, 0x30, 0x6c, 0x17, 0xd8, 0x05, 0x00, 0x00,
}

func (x LogCategory) String() string {
	s, ok := LogCategory_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x LogLevel) String() string {
	s, ok := LogLevel_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *LogRecord) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LogRecord)
	if !ok {
		that2, ok := that.(LogRecord)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EmitTime.Equal(that1.EmitTime) {
		return false
	}
	if this.Level != that1.Level {
		return false
	}
	if this.UserEmail != that1.UserEmail {
		return false
	}
	if this.CallerIpAddress != that1.CallerIpAddress {
		return false
	}
	if this.Operation != that1.Operation {
		return false
	}
	if !this.Details.Equal(that1.Details) {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.Category != that1.Category {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	if this.LogId != that1.LogId {
		return false
	}
	return true
}
func (this *OperationDetail) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OperationDetail)
	if !ok {
		that2, ok := that.(OperationDetail)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if len(this.TargetUsers) != len(that1.TargetUsers) {
		return false
	}
	for i := range this.TargetUsers {
		if this.TargetUsers[i] != that1.TargetUsers[i] {
			return false
		}
	}
	if len(this.Roles) != len(that1.Roles) {
		return false
	}
	for i := range this.Roles {
		if this.Roles[i] != that1.Roles[i] {
			return false
		}
	}
	if len(this.ClientCaFingerprints) != len(that1.ClientCaFingerprints) {
		return false
	}
	for i := range this.ClientCaFingerprints {
		if this.ClientCaFingerprints[i] != that1.ClientCaFingerprints[i] {
			return false
		}
	}
	if !this.SearchAttributeUpdate.Equal(that1.SearchAttributeUpdate) {
		return false
	}
	if this.AdditionalMessage != that1.AdditionalMessage {
		return false
	}
	if this.Region != that1.Region {
		return false
	}
	if len(this.AccountFeatures) != len(that1.AccountFeatures) {
		return false
	}
	for i := range this.AccountFeatures {
		if this.AccountFeatures[i] != that1.AccountFeatures[i] {
			return false
		}
	}
	if !this.ThirdPartyDetails.Equal(that1.ThirdPartyDetails) {
		return false
	}
	return true
}
func (this *SearchAttributeUpdate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SearchAttributeUpdate)
	if !ok {
		that2, ok := that.(SearchAttributeUpdate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ExistingAttribute != that1.ExistingAttribute {
		return false
	}
	if this.NewAttribute != that1.NewAttribute {
		return false
	}
	return true
}
func (this *ThirdPartyLogDetail) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ThirdPartyLogDetail)
	if !ok {
		that2, ok := that.(ThirdPartyLogDetail)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Source != that1.Source {
		return false
	}
	if this.RawMessage != that1.RawMessage {
		return false
	}
	return true
}
func (this *LogRecord) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&auditlog.LogRecord{")
	if this.EmitTime != nil {
		s = append(s, "EmitTime: "+fmt.Sprintf("%#v", this.EmitTime)+",\n")
	}
	s = append(s, "Level: "+fmt.Sprintf("%#v", this.Level)+",\n")
	s = append(s, "UserEmail: "+fmt.Sprintf("%#v", this.UserEmail)+",\n")
	s = append(s, "CallerIpAddress: "+fmt.Sprintf("%#v", this.CallerIpAddress)+",\n")
	s = append(s, "Operation: "+fmt.Sprintf("%#v", this.Operation)+",\n")
	if this.Details != nil {
		s = append(s, "Details: "+fmt.Sprintf("%#v", this.Details)+",\n")
	}
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "Category: "+fmt.Sprintf("%#v", this.Category)+",\n")
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	s = append(s, "LogId: "+fmt.Sprintf("%#v", this.LogId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OperationDetail) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&auditlog.OperationDetail{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "TargetUsers: "+fmt.Sprintf("%#v", this.TargetUsers)+",\n")
	s = append(s, "Roles: "+fmt.Sprintf("%#v", this.Roles)+",\n")
	s = append(s, "ClientCaFingerprints: "+fmt.Sprintf("%#v", this.ClientCaFingerprints)+",\n")
	if this.SearchAttributeUpdate != nil {
		s = append(s, "SearchAttributeUpdate: "+fmt.Sprintf("%#v", this.SearchAttributeUpdate)+",\n")
	}
	s = append(s, "AdditionalMessage: "+fmt.Sprintf("%#v", this.AdditionalMessage)+",\n")
	s = append(s, "Region: "+fmt.Sprintf("%#v", this.Region)+",\n")
	s = append(s, "AccountFeatures: "+fmt.Sprintf("%#v", this.AccountFeatures)+",\n")
	if this.ThirdPartyDetails != nil {
		s = append(s, "ThirdPartyDetails: "+fmt.Sprintf("%#v", this.ThirdPartyDetails)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SearchAttributeUpdate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&auditlog.SearchAttributeUpdate{")
	s = append(s, "ExistingAttribute: "+fmt.Sprintf("%#v", this.ExistingAttribute)+",\n")
	s = append(s, "NewAttribute: "+fmt.Sprintf("%#v", this.NewAttribute)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ThirdPartyLogDetail) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&auditlog.ThirdPartyLogDetail{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Source: "+fmt.Sprintf("%#v", this.Source)+",\n")
	s = append(s, "RawMessage: "+fmt.Sprintf("%#v", this.RawMessage)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringMessage(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *LogRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LogRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LogId) > 0 {
		i -= len(m.LogId)
		copy(dAtA[i:], m.LogId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.LogId)))
		i--
		dAtA[i] = 0x52
	}
	if m.Version != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x48
	}
	if m.Category != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Category))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Details != nil {
		{
			size, err := m.Details.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.Operation) > 0 {
		i -= len(m.Operation)
		copy(dAtA[i:], m.Operation)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Operation)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.CallerIpAddress) > 0 {
		i -= len(m.CallerIpAddress)
		copy(dAtA[i:], m.CallerIpAddress)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.CallerIpAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.UserEmail) > 0 {
		i -= len(m.UserEmail)
		copy(dAtA[i:], m.UserEmail)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.UserEmail)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Level != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x10
	}
	if m.EmitTime != nil {
		{
			size, err := m.EmitTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OperationDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OperationDetail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OperationDetail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ThirdPartyDetails != nil {
		{
			size, err := m.ThirdPartyDetails.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if len(m.AccountFeatures) > 0 {
		for iNdEx := len(m.AccountFeatures) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AccountFeatures[iNdEx])
			copy(dAtA[i:], m.AccountFeatures[iNdEx])
			i = encodeVarintMessage(dAtA, i, uint64(len(m.AccountFeatures[iNdEx])))
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.Region) > 0 {
		i -= len(m.Region)
		copy(dAtA[i:], m.Region)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Region)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.AdditionalMessage) > 0 {
		i -= len(m.AdditionalMessage)
		copy(dAtA[i:], m.AdditionalMessage)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.AdditionalMessage)))
		i--
		dAtA[i] = 0x32
	}
	if m.SearchAttributeUpdate != nil {
		{
			size, err := m.SearchAttributeUpdate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ClientCaFingerprints) > 0 {
		for iNdEx := len(m.ClientCaFingerprints) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ClientCaFingerprints[iNdEx])
			copy(dAtA[i:], m.ClientCaFingerprints[iNdEx])
			i = encodeVarintMessage(dAtA, i, uint64(len(m.ClientCaFingerprints[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Roles) > 0 {
		for iNdEx := len(m.Roles) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Roles[iNdEx])
			copy(dAtA[i:], m.Roles[iNdEx])
			i = encodeVarintMessage(dAtA, i, uint64(len(m.Roles[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.TargetUsers) > 0 {
		for iNdEx := len(m.TargetUsers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TargetUsers[iNdEx])
			copy(dAtA[i:], m.TargetUsers[iNdEx])
			i = encodeVarintMessage(dAtA, i, uint64(len(m.TargetUsers[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SearchAttributeUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchAttributeUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SearchAttributeUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NewAttribute) > 0 {
		i -= len(m.NewAttribute)
		copy(dAtA[i:], m.NewAttribute)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.NewAttribute)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ExistingAttribute) > 0 {
		i -= len(m.ExistingAttribute)
		copy(dAtA[i:], m.ExistingAttribute)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.ExistingAttribute)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ThirdPartyLogDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ThirdPartyLogDetail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ThirdPartyLogDetail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RawMessage) > 0 {
		i -= len(m.RawMessage)
		copy(dAtA[i:], m.RawMessage)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.RawMessage)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Source) > 0 {
		i -= len(m.Source)
		copy(dAtA[i:], m.Source)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Source)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMessage(dAtA []byte, offset int, v uint64) int {
	offset -= sovMessage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LogRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EmitTime != nil {
		l = m.EmitTime.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Level != 0 {
		n += 1 + sovMessage(uint64(m.Level))
	}
	l = len(m.UserEmail)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.CallerIpAddress)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Operation)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Details != nil {
		l = m.Details.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Category != 0 {
		n += 1 + sovMessage(uint64(m.Category))
	}
	if m.Version != 0 {
		n += 1 + sovMessage(uint64(m.Version))
	}
	l = len(m.LogId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *OperationDetail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if len(m.TargetUsers) > 0 {
		for _, s := range m.TargetUsers {
			l = len(s)
			n += 1 + l + sovMessage(uint64(l))
		}
	}
	if len(m.Roles) > 0 {
		for _, s := range m.Roles {
			l = len(s)
			n += 1 + l + sovMessage(uint64(l))
		}
	}
	if len(m.ClientCaFingerprints) > 0 {
		for _, s := range m.ClientCaFingerprints {
			l = len(s)
			n += 1 + l + sovMessage(uint64(l))
		}
	}
	if m.SearchAttributeUpdate != nil {
		l = m.SearchAttributeUpdate.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.AdditionalMessage)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Region)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if len(m.AccountFeatures) > 0 {
		for _, s := range m.AccountFeatures {
			l = len(s)
			n += 1 + l + sovMessage(uint64(l))
		}
	}
	if m.ThirdPartyDetails != nil {
		l = m.ThirdPartyDetails.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *SearchAttributeUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ExistingAttribute)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.NewAttribute)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *ThirdPartyLogDetail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Source)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.RawMessage)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func sovMessage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMessage(x uint64) (n int) {
	return sovMessage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *LogRecord) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LogRecord{`,
		`EmitTime:` + strings.Replace(fmt.Sprintf("%v", this.EmitTime), "Timestamp", "types.Timestamp", 1) + `,`,
		`Level:` + fmt.Sprintf("%v", this.Level) + `,`,
		`UserEmail:` + fmt.Sprintf("%v", this.UserEmail) + `,`,
		`CallerIpAddress:` + fmt.Sprintf("%v", this.CallerIpAddress) + `,`,
		`Operation:` + fmt.Sprintf("%v", this.Operation) + `,`,
		`Details:` + strings.Replace(this.Details.String(), "OperationDetail", "OperationDetail", 1) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`Category:` + fmt.Sprintf("%v", this.Category) + `,`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`LogId:` + fmt.Sprintf("%v", this.LogId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OperationDetail) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OperationDetail{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`TargetUsers:` + fmt.Sprintf("%v", this.TargetUsers) + `,`,
		`Roles:` + fmt.Sprintf("%v", this.Roles) + `,`,
		`ClientCaFingerprints:` + fmt.Sprintf("%v", this.ClientCaFingerprints) + `,`,
		`SearchAttributeUpdate:` + strings.Replace(this.SearchAttributeUpdate.String(), "SearchAttributeUpdate", "SearchAttributeUpdate", 1) + `,`,
		`AdditionalMessage:` + fmt.Sprintf("%v", this.AdditionalMessage) + `,`,
		`Region:` + fmt.Sprintf("%v", this.Region) + `,`,
		`AccountFeatures:` + fmt.Sprintf("%v", this.AccountFeatures) + `,`,
		`ThirdPartyDetails:` + strings.Replace(this.ThirdPartyDetails.String(), "ThirdPartyLogDetail", "ThirdPartyLogDetail", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SearchAttributeUpdate) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SearchAttributeUpdate{`,
		`ExistingAttribute:` + fmt.Sprintf("%v", this.ExistingAttribute) + `,`,
		`NewAttribute:` + fmt.Sprintf("%v", this.NewAttribute) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ThirdPartyLogDetail) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ThirdPartyLogDetail{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Source:` + fmt.Sprintf("%v", this.Source) + `,`,
		`RawMessage:` + fmt.Sprintf("%v", this.RawMessage) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringMessage(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *LogRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmitTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EmitTime == nil {
				m.EmitTime = &types.Timestamp{}
			}
			if err := m.EmitTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= LogLevel(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserEmail", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserEmail = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallerIpAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CallerIpAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operation = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Details == nil {
				m.Details = &OperationDetail{}
			}
			if err := m.Details.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Category", wireType)
			}
			m.Category = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Category |= LogCategory(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LogId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OperationDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OperationDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OperationDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetUsers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetUsers = append(m.TargetUsers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roles", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Roles = append(m.Roles, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientCaFingerprints", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientCaFingerprints = append(m.ClientCaFingerprints, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SearchAttributeUpdate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SearchAttributeUpdate == nil {
				m.SearchAttributeUpdate = &SearchAttributeUpdate{}
			}
			if err := m.SearchAttributeUpdate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdditionalMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdditionalMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Region = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountFeatures", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountFeatures = append(m.AccountFeatures, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThirdPartyDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ThirdPartyDetails == nil {
				m.ThirdPartyDetails = &ThirdPartyLogDetail{}
			}
			if err := m.ThirdPartyDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchAttributeUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchAttributeUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchAttributeUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExistingAttribute", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExistingAttribute = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewAttribute", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewAttribute = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ThirdPartyLogDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ThirdPartyLogDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ThirdPartyLogDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Source = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RawMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMessage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMessage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMessage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMessage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMessage = fmt.Errorf("proto: unexpected end of group")
)
