// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/namespaceservice/v1/request_response.proto

package namespaceservice

import (
	bytes "bytes"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
	v11 "github.com/temporalio/tcld/protogen/api/auth/v1"
	v13 "github.com/temporalio/tcld/protogen/api/common/v1"
	v1 "github.com/temporalio/tcld/protogen/api/namespace/v1"
	v12 "github.com/temporalio/tcld/protogen/api/request/v1"
	v14 "github.com/temporalio/tcld/protogen/api/sink/v1"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CreateNamespaceRequest struct {
	// the namespace
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// the namespace specification
	Spec *v1.NamespaceSpec `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	// the request id to use for this operation - optional
	RequestId string `protobuf:"bytes,3,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// once the namespace is created, assigns namespace roles to these users; it is guaranteed that the user sending
	// this request will be assigned to admin role of the namespace
	UserNamespacePermissions []*v11.UserNamespacePermissions `protobuf:"bytes,4,rep,name=user_namespace_permissions,json=userNamespacePermissions,proto3" json:"user_namespace_permissions,omitempty"`
	// once the namespace is created, assigns namespace roles to these identities; it is guaranteed that the principal sending
	// this request will be assigned to admin role of the namespace
	IdentityNamespacePermissions []*v11.IdentityNamespacePermissions `protobuf:"bytes,5,rep,name=identity_namespace_permissions,json=identityNamespacePermissions,proto3" json:"identity_namespace_permissions,omitempty"`
	// the tags to add to the namespace - can be set by global admins or account owners only
	// temporal:dev
	Tags map[string]string `protobuf:"bytes,6,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *CreateNamespaceRequest) Reset()      { *m = CreateNamespaceRequest{} }
func (*CreateNamespaceRequest) ProtoMessage() {}
func (*CreateNamespaceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_667e39c23eb47b7c, []int{0}
}
func (m *CreateNamespaceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateNamespaceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateNamespaceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateNamespaceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateNamespaceRequest.Merge(m, src)
}
func (m *CreateNamespaceRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateNamespaceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateNamespaceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateNamespaceRequest proto.InternalMessageInfo

func (m *CreateNamespaceRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *CreateNamespaceRequest) GetSpec() *v1.NamespaceSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *CreateNamespaceRequest) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

func (m *CreateNamespaceRequest) GetUserNamespacePermissions() []*v11.UserNamespacePermissions {
	if m != nil {
		return m.UserNamespacePermissions
	}
	return nil
}

func (m *CreateNamespaceRequest) GetIdentityNamespacePermissions() []*v11.IdentityNamespacePermissions {
	if m != nil {
		return m.IdentityNamespacePermissions
	}
	return nil
}

func (m *CreateNamespaceRequest) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

type CreateNamespaceResponse struct {
	// the request status of the provisioning operation
	RequestStatus *v12.RequestStatus `protobuf:"bytes,1,opt,name=request_status,json=requestStatus,proto3" json:"request_status,omitempty"`
}

func (m *CreateNamespaceResponse) Reset()      { *m = CreateNamespaceResponse{} }
func (*CreateNamespaceResponse) ProtoMessage() {}
func (*CreateNamespaceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_667e39c23eb47b7c, []int{1}
}
func (m *CreateNamespaceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateNamespaceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateNamespaceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateNamespaceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateNamespaceResponse.Merge(m, src)
}
func (m *CreateNamespaceResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateNamespaceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateNamespaceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateNamespaceResponse proto.InternalMessageInfo

func (m *CreateNamespaceResponse) GetRequestStatus() *v12.RequestStatus {
	if m != nil {
		return m.RequestStatus
	}
	return nil
}

type ListNamespacesFilter struct {
	// Cloud provider filter
	CloudProviders []v13.RegionID_CloudProvider `protobuf:"varint,1,rep,packed,name=cloud_providers,json=cloudProviders,proto3,enum=api.common.v1.RegionID_CloudProvider" json:"cloud_providers,omitempty"`
	// filter for namespaces associated with the connectivity rule.
	ConnectivityRuleId string `protobuf:"bytes,2,opt,name=connectivity_rule_id,json=connectivityRuleId,proto3" json:"connectivity_rule_id,omitempty"`
}

func (m *ListNamespacesFilter) Reset()      { *m = ListNamespacesFilter{} }
func (*ListNamespacesFilter) ProtoMessage() {}
func (*ListNamespacesFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_667e39c23eb47b7c, []int{2}
}
func (m *ListNamespacesFilter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListNamespacesFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListNamespacesFilter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListNamespacesFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListNamespacesFilter.Merge(m, src)
}
func (m *ListNamespacesFilter) XXX_Size() int {
	return m.Size()
}
func (m *ListNamespacesFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_ListNamespacesFilter.DiscardUnknown(m)
}

var xxx_messageInfo_ListNamespacesFilter proto.InternalMessageInfo

func (m *ListNamespacesFilter) GetCloudProviders() []v13.RegionID_CloudProvider {
	if m != nil {
		return m.CloudProviders
	}
	return nil
}

func (m *ListNamespacesFilter) GetConnectivityRuleId() string {
	if m != nil {
		return m.ConnectivityRuleId
	}
	return ""
}

type ListNamespacesRequest struct {
	// the requested size of the page to retrieve
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// the page token
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// the filter for listing the namespaces
	Filter *ListNamespacesFilter `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (m *ListNamespacesRequest) Reset()      { *m = ListNamespacesRequest{} }
func (*ListNamespacesRequest) ProtoMessage() {}
func (*ListNamespacesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_667e39c23eb47b7c, []int{3}
}
func (m *ListNamespacesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListNamespacesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListNamespacesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListNamespacesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListNamespacesRequest.Merge(m, src)
}
func (m *ListNamespacesRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListNamespacesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListNamespacesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListNamespacesRequest proto.InternalMessageInfo

func (m *ListNamespacesRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListNamespacesRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

func (m *ListNamespacesRequest) GetFilter() *ListNamespacesFilter {
	if m != nil {
		return m.Filter
	}
	return nil
}

type ListNamespacesResponse struct {
	// the list of namespaces
	Namespaces []string `protobuf:"bytes,1,rep,name=namespaces,proto3" json:"namespaces,omitempty"`
	// the next page's token
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (m *ListNamespacesResponse) Reset()      { *m = ListNamespacesResponse{} }
func (*ListNamespacesResponse) ProtoMessage() {}
func (*ListNamespacesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_667e39c23eb47b7c, []int{4}
}
func (m *ListNamespacesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListNamespacesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListNamespacesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListNamespacesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListNamespacesResponse.Merge(m, src)
}
func (m *ListNamespacesResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListNamespacesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListNamespacesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListNamespacesResponse proto.InternalMessageInfo

func (m *ListNamespacesResponse) GetNamespaces() []string {
	if m != nil {
		return m.Namespaces
	}
	return nil
}

func (m *ListNamespacesResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

type GetNamespacesRequest struct {
	// the requested size of the page to retrieve
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// the page token
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (m *GetNamespacesRequest) Reset()      { *m = GetNamespacesRequest{} }
func (*GetNamespacesRequest) ProtoMessage() {}
func (*GetNamespacesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_667e39c23eb47b7c, []int{5}
}
func (m *GetNamespacesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetNamespacesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetNamespacesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetNamespacesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNamespacesRequest.Merge(m, src)
}
func (m *GetNamespacesRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetNamespacesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNamespacesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetNamespacesRequest proto.InternalMessageInfo

func (m *GetNamespacesRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *GetNamespacesRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

type GetNamespacesResponse struct {
	// the list of namespaces
	Namespaces []*v1.Namespace `protobuf:"bytes,1,rep,name=namespaces,proto3" json:"namespaces,omitempty"`
	// the next page's token
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (m *GetNamespacesResponse) Reset()      { *m = GetNamespacesResponse{} }
func (*GetNamespacesResponse) ProtoMessage() {}
func (*GetNamespacesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_667e39c23eb47b7c, []int{6}
}
func (m *GetNamespacesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetNamespacesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetNamespacesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetNamespacesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNamespacesResponse.Merge(m, src)
}
func (m *GetNamespacesResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetNamespacesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNamespacesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetNamespacesResponse proto.InternalMessageInfo

func (m *GetNamespacesResponse) GetNamespaces() []*v1.Namespace {
	if m != nil {
		return m.Namespaces
	}
	return nil
}

func (m *GetNamespacesResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

type GetNamespaceRequest struct {
	// the namespace
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (m *GetNamespaceRequest) Reset()      { *m = GetNamespaceRequest{} }
func (*GetNamespaceRequest) ProtoMessage() {}
func (*GetNamespaceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_667e39c23eb47b7c, []int{7}
}
func (m *GetNamespaceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetNamespaceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetNamespaceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetNamespaceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNamespaceRequest.Merge(m, src)
}
func (m *GetNamespaceRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetNamespaceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNamespaceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetNamespaceRequest proto.InternalMessageInfo

func (m *GetNamespaceRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

type GetNamespaceResponse struct {
	// the namespace
	Namespace *v1.Namespace `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (m *GetNamespaceResponse) Reset()      { *m = GetNamespaceResponse{} }
func (*GetNamespaceResponse) ProtoMessage() {}
func (*GetNamespaceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_667e39c23eb47b7c, []int{8}
}
func (m *GetNamespaceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetNamespaceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetNamespaceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetNamespaceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNamespaceResponse.Merge(m, src)
}
func (m *GetNamespaceResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetNamespaceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNamespaceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetNamespaceResponse proto.InternalMessageInfo

func (m *GetNamespaceResponse) GetNamespace() *v1.Namespace {
	if m != nil {
		return m.Namespace
	}
	return nil
}

type UpdateNamespaceRequest struct {
	// the namespace
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// the new namespace specification
	Spec *v1.NamespaceSpec `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	// the version of the namespace for which this update is intended for
	// the latest version can be found in the namespace status
	ResourceVersion string `protobuf:"bytes,3,opt,name=resource_version,json=resourceVersion,proto3" json:"resource_version,omitempty"`
	// the request id to use for this operation - optional
	RequestId string `protobuf:"bytes,4,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (m *UpdateNamespaceRequest) Reset()      { *m = UpdateNamespaceRequest{} }
func (*UpdateNamespaceRequest) ProtoMessage() {}
func (*UpdateNamespaceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_667e39c23eb47b7c, []int{9}
}
func (m *UpdateNamespaceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateNamespaceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateNamespaceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateNamespaceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateNamespaceRequest.Merge(m, src)
}
func (m *UpdateNamespaceRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateNamespaceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateNamespaceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateNamespaceRequest proto.InternalMessageInfo

func (m *UpdateNamespaceRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *UpdateNamespaceRequest) GetSpec() *v1.NamespaceSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *UpdateNamespaceRequest) GetResourceVersion() string {
	if m != nil {
		return m.ResourceVersion
	}
	return ""
}

func (m *UpdateNamespaceRequest) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

type UpdateNamespaceResponse struct {
	// the request status of the update operation
	RequestStatus *v12.RequestStatus `protobuf:"bytes,1,opt,name=request_status,json=requestStatus,proto3" json:"request_status,omitempty"`
}

func (m *UpdateNamespaceResponse) Reset()      { *m = UpdateNamespaceResponse{} }
func (*UpdateNamespaceResponse) ProtoMessage() {}
func (*UpdateNamespaceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_667e39c23eb47b7c, []int{10}
}
func (m *UpdateNamespaceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateNamespaceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateNamespaceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateNamespaceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateNamespaceResponse.Merge(m, src)
}
func (m *UpdateNamespaceResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateNamespaceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateNamespaceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateNamespaceResponse proto.InternalMessageInfo

func (m *UpdateNamespaceResponse) GetRequestStatus() *v12.RequestStatus {
	if m != nil {
		return m.RequestStatus
	}
	return nil
}

type RenameCustomSearchAttributeRequest struct {
	// the namespace
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// the existing name of the custom search attribute to be renamed
	ExistingCustomSearchAttributeName string `protobuf:"bytes,2,opt,name=existing_custom_search_attribute_name,json=existingCustomSearchAttributeName,proto3" json:"existing_custom_search_attribute_name,omitempty"`
	// the new name of the custom search attribute
	NewCustomSearchAttributeName string `protobuf:"bytes,3,opt,name=new_custom_search_attribute_name,json=newCustomSearchAttributeName,proto3" json:"new_custom_search_attribute_name,omitempty"`
	// the version of the namespace for which this update is intended for
	// the latest version can be found in the namespace status
	ResourceVersion string `protobuf:"bytes,4,opt,name=resource_version,json=resourceVersion,proto3" json:"resource_version,omitempty"`
	// the request id to use for this operation - optional
	RequestId string `protobuf:"bytes,5,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (m *RenameCustomSearchAttributeRequest) Reset()      { *m = RenameCustomSearchAttributeRequest{} }
func (*RenameCustomSearchAttributeRequest) ProtoMessage() {}
func (*RenameCustomSearchAttributeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_667e39c23eb47b7c, []int{11}
}
func (m *RenameCustomSearchAttributeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RenameCustomSearchAttributeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RenameCustomSearchAttributeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RenameCustomSearchAttributeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RenameCustomSearchAttributeRequest.Merge(m, src)
}
func (m *RenameCustomSearchAttributeRequest) XXX_Size() int {
	return m.Size()
}
func (m *RenameCustomSearchAttributeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RenameCustomSearchAttributeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RenameCustomSearchAttributeRequest proto.InternalMessageInfo

func (m *RenameCustomSearchAttributeRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *RenameCustomSearchAttributeRequest) GetExistingCustomSearchAttributeName() string {
	if m != nil {
		return m.ExistingCustomSearchAttributeName
	}
	return ""
}

func (m *RenameCustomSearchAttributeRequest) GetNewCustomSearchAttributeName() string {
	if m != nil {
		return m.NewCustomSearchAttributeName
	}
	return ""
}

func (m *RenameCustomSearchAttributeRequest) GetResourceVersion() string {
	if m != nil {
		return m.ResourceVersion
	}
	return ""
}

func (m *RenameCustomSearchAttributeRequest) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

type RenameCustomSearchAttributeResponse struct {
	// the request status of the rename operation
	RequestStatus *v12.RequestStatus `protobuf:"bytes,1,opt,name=request_status,json=requestStatus,proto3" json:"request_status,omitempty"`
}

func (m *RenameCustomSearchAttributeResponse) Reset()      { *m = RenameCustomSearchAttributeResponse{} }
func (*RenameCustomSearchAttributeResponse) ProtoMessage() {}
func (*RenameCustomSearchAttributeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_667e39c23eb47b7c, []int{12}
}
func (m *RenameCustomSearchAttributeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RenameCustomSearchAttributeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RenameCustomSearchAttributeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RenameCustomSearchAttributeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RenameCustomSearchAttributeResponse.Merge(m, src)
}
func (m *RenameCustomSearchAttributeResponse) XXX_Size() int {
	return m.Size()
}
func (m *RenameCustomSearchAttributeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RenameCustomSearchAttributeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RenameCustomSearchAttributeResponse proto.InternalMessageInfo

func (m *RenameCustomSearchAttributeResponse) GetRequestStatus() *v12.RequestStatus {
	if m != nil {
		return m.RequestStatus
	}
	return nil
}

type DeleteNamespaceRequest struct {
	// the namespace
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// the version of the namespace for which this delete is intended for
	// the latest version can be found in the namespace status
	ResourceVersion string `protobuf:"bytes,2,opt,name=resource_version,json=resourceVersion,proto3" json:"resource_version,omitempty"`
	// the request id to use for this operation - optional
	RequestId string `protobuf:"bytes,3,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (m *DeleteNamespaceRequest) Reset()      { *m = DeleteNamespaceRequest{} }
func (*DeleteNamespaceRequest) ProtoMessage() {}
func (*DeleteNamespaceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_667e39c23eb47b7c, []int{13}
}
func (m *DeleteNamespaceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteNamespaceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteNamespaceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteNamespaceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteNamespaceRequest.Merge(m, src)
}
func (m *DeleteNamespaceRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteNamespaceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteNamespaceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteNamespaceRequest proto.InternalMessageInfo

func (m *DeleteNamespaceRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *DeleteNamespaceRequest) GetResourceVersion() string {
	if m != nil {
		return m.ResourceVersion
	}
	return ""
}

func (m *DeleteNamespaceRequest) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

type DeleteNamespaceResponse struct {
	// the request status of the delete operation
	RequestStatus *v12.RequestStatus `protobuf:"bytes,1,opt,name=request_status,json=requestStatus,proto3" json:"request_status,omitempty"`
}

func (m *DeleteNamespaceResponse) Reset()      { *m = DeleteNamespaceResponse{} }
func (*DeleteNamespaceResponse) ProtoMessage() {}
func (*DeleteNamespaceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_667e39c23eb47b7c, []int{14}
}
func (m *DeleteNamespaceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteNamespaceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteNamespaceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteNamespaceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteNamespaceResponse.Merge(m, src)
}
func (m *DeleteNamespaceResponse) XXX_Size() int {
	return m.Size()
}
func (m *DeleteNamespaceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteNamespaceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteNamespaceResponse proto.InternalMessageInfo

func (m *DeleteNamespaceResponse) GetRequestStatus() *v12.RequestStatus {
	if m != nil {
		return m.RequestStatus
	}
	return nil
}

type CreateExportSinkRequest struct {
	// the namespace the sink is configured under
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// the spec for the sink
	Spec *v14.ExportSinkSpec `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	// the request id to use for this operation - optional
	RequestId string `protobuf:"bytes,3,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (m *CreateExportSinkRequest) Reset()      { *m = CreateExportSinkRequest{} }
func (*CreateExportSinkRequest) ProtoMessage() {}
func (*CreateExportSinkRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_667e39c23eb47b7c, []int{15}
}
func (m *CreateExportSinkRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateExportSinkRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateExportSinkRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateExportSinkRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateExportSinkRequest.Merge(m, src)
}
func (m *CreateExportSinkRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateExportSinkRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateExportSinkRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateExportSinkRequest proto.InternalMessageInfo

func (m *CreateExportSinkRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *CreateExportSinkRequest) GetSpec() *v14.ExportSinkSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *CreateExportSinkRequest) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

type CreateExportSinkResponse struct {
	// the request status of the create operation
	RequestStatus *v12.RequestStatus `protobuf:"bytes,1,opt,name=request_status,json=requestStatus,proto3" json:"request_status,omitempty"`
}

func (m *CreateExportSinkResponse) Reset()      { *m = CreateExportSinkResponse{} }
func (*CreateExportSinkResponse) ProtoMessage() {}
func (*CreateExportSinkResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_667e39c23eb47b7c, []int{16}
}
func (m *CreateExportSinkResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateExportSinkResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateExportSinkResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateExportSinkResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateExportSinkResponse.Merge(m, src)
}
func (m *CreateExportSinkResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateExportSinkResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateExportSinkResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateExportSinkResponse proto.InternalMessageInfo

func (m *CreateExportSinkResponse) GetRequestStatus() *v12.RequestStatus {
	if m != nil {
		return m.RequestStatus
	}
	return nil
}

type GetExportSinkRequest struct {
	// the namespace the sink is scoped to
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// the sink name under the namespace to retrieve
	SinkName string `protobuf:"bytes,2,opt,name=sink_name,json=sinkName,proto3" json:"sink_name,omitempty"`
}

func (m *GetExportSinkRequest) Reset()      { *m = GetExportSinkRequest{} }
func (*GetExportSinkRequest) ProtoMessage() {}
func (*GetExportSinkRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_667e39c23eb47b7c, []int{17}
}
func (m *GetExportSinkRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetExportSinkRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetExportSinkRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetExportSinkRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetExportSinkRequest.Merge(m, src)
}
func (m *GetExportSinkRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetExportSinkRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetExportSinkRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetExportSinkRequest proto.InternalMessageInfo

func (m *GetExportSinkRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *GetExportSinkRequest) GetSinkName() string {
	if m != nil {
		return m.SinkName
	}
	return ""
}

type GetExportSinkResponse struct {
	// the sink
	Sink *v14.ExportSink `protobuf:"bytes,1,opt,name=sink,proto3" json:"sink,omitempty"`
}

func (m *GetExportSinkResponse) Reset()      { *m = GetExportSinkResponse{} }
func (*GetExportSinkResponse) ProtoMessage() {}
func (*GetExportSinkResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_667e39c23eb47b7c, []int{18}
}
func (m *GetExportSinkResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetExportSinkResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetExportSinkResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetExportSinkResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetExportSinkResponse.Merge(m, src)
}
func (m *GetExportSinkResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetExportSinkResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetExportSinkResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetExportSinkResponse proto.InternalMessageInfo

func (m *GetExportSinkResponse) GetSink() *v14.ExportSink {
	if m != nil {
		return m.Sink
	}
	return nil
}

type DeleteExportSinkRequest struct {
	// the namespace the sink is scoped to
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// the sink name under the namespace to delete
	SinkName string `protobuf:"bytes,2,opt,name=sink_name,json=sinkName,proto3" json:"sink_name,omitempty"`
	// the version of the sink for which this delete is intended for
	// the latest version can be found by getting the sink
	ResourceVersion string `protobuf:"bytes,3,opt,name=resource_version,json=resourceVersion,proto3" json:"resource_version,omitempty"`
	// the request id to use for this operation - optional
	RequestId string `protobuf:"bytes,4,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (m *DeleteExportSinkRequest) Reset()      { *m = DeleteExportSinkRequest{} }
func (*DeleteExportSinkRequest) ProtoMessage() {}
func (*DeleteExportSinkRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_667e39c23eb47b7c, []int{19}
}
func (m *DeleteExportSinkRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteExportSinkRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteExportSinkRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteExportSinkRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteExportSinkRequest.Merge(m, src)
}
func (m *DeleteExportSinkRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteExportSinkRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteExportSinkRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteExportSinkRequest proto.InternalMessageInfo

func (m *DeleteExportSinkRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *DeleteExportSinkRequest) GetSinkName() string {
	if m != nil {
		return m.SinkName
	}
	return ""
}

func (m *DeleteExportSinkRequest) GetResourceVersion() string {
	if m != nil {
		return m.ResourceVersion
	}
	return ""
}

func (m *DeleteExportSinkRequest) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

type DeleteExportSinkResponse struct {
	// the request status of the delete operation
	RequestStatus *v12.RequestStatus `protobuf:"bytes,1,opt,name=request_status,json=requestStatus,proto3" json:"request_status,omitempty"`
}

func (m *DeleteExportSinkResponse) Reset()      { *m = DeleteExportSinkResponse{} }
func (*DeleteExportSinkResponse) ProtoMessage() {}
func (*DeleteExportSinkResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_667e39c23eb47b7c, []int{20}
}
func (m *DeleteExportSinkResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteExportSinkResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteExportSinkResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteExportSinkResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteExportSinkResponse.Merge(m, src)
}
func (m *DeleteExportSinkResponse) XXX_Size() int {
	return m.Size()
}
func (m *DeleteExportSinkResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteExportSinkResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteExportSinkResponse proto.InternalMessageInfo

func (m *DeleteExportSinkResponse) GetRequestStatus() *v12.RequestStatus {
	if m != nil {
		return m.RequestStatus
	}
	return nil
}

type UpdateExportSinkRequest struct {
	// the namespace the sink is scoped to
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// the updated sink specification
	Spec *v14.ExportSinkSpec `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	// the version of the sink for which this update is intended for
	// the latest version can be found by getting the sink
	ResourceVersion string `protobuf:"bytes,3,opt,name=resource_version,json=resourceVersion,proto3" json:"resource_version,omitempty"`
	// the request id to use for this operation - optional
	RequestId string `protobuf:"bytes,4,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (m *UpdateExportSinkRequest) Reset()      { *m = UpdateExportSinkRequest{} }
func (*UpdateExportSinkRequest) ProtoMessage() {}
func (*UpdateExportSinkRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_667e39c23eb47b7c, []int{21}
}
func (m *UpdateExportSinkRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateExportSinkRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateExportSinkRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateExportSinkRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateExportSinkRequest.Merge(m, src)
}
func (m *UpdateExportSinkRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateExportSinkRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateExportSinkRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateExportSinkRequest proto.InternalMessageInfo

func (m *UpdateExportSinkRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *UpdateExportSinkRequest) GetSpec() *v14.ExportSinkSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *UpdateExportSinkRequest) GetResourceVersion() string {
	if m != nil {
		return m.ResourceVersion
	}
	return ""
}

func (m *UpdateExportSinkRequest) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

type UpdateExportSinkResponse struct {
	// the request status of the update operation
	RequestStatus *v12.RequestStatus `protobuf:"bytes,1,opt,name=request_status,json=requestStatus,proto3" json:"request_status,omitempty"`
}

func (m *UpdateExportSinkResponse) Reset()      { *m = UpdateExportSinkResponse{} }
func (*UpdateExportSinkResponse) ProtoMessage() {}
func (*UpdateExportSinkResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_667e39c23eb47b7c, []int{22}
}
func (m *UpdateExportSinkResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateExportSinkResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateExportSinkResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateExportSinkResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateExportSinkResponse.Merge(m, src)
}
func (m *UpdateExportSinkResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateExportSinkResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateExportSinkResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateExportSinkResponse proto.InternalMessageInfo

func (m *UpdateExportSinkResponse) GetRequestStatus() *v12.RequestStatus {
	if m != nil {
		return m.RequestStatus
	}
	return nil
}

type ListExportSinksRequest struct {
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// the requested size of the page to retrieve
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// the page token
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (m *ListExportSinksRequest) Reset()      { *m = ListExportSinksRequest{} }
func (*ListExportSinksRequest) ProtoMessage() {}
func (*ListExportSinksRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_667e39c23eb47b7c, []int{23}
}
func (m *ListExportSinksRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListExportSinksRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListExportSinksRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListExportSinksRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListExportSinksRequest.Merge(m, src)
}
func (m *ListExportSinksRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListExportSinksRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListExportSinksRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListExportSinksRequest proto.InternalMessageInfo

func (m *ListExportSinksRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ListExportSinksRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListExportSinksRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

type ListExportSinksResponse struct {
	// the list of export sink names
	SinkNames []string `protobuf:"bytes,1,rep,name=sink_names,json=sinkNames,proto3" json:"sink_names,omitempty"`
	// the next page's token
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (m *ListExportSinksResponse) Reset()      { *m = ListExportSinksResponse{} }
func (*ListExportSinksResponse) ProtoMessage() {}
func (*ListExportSinksResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_667e39c23eb47b7c, []int{24}
}
func (m *ListExportSinksResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListExportSinksResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListExportSinksResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListExportSinksResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListExportSinksResponse.Merge(m, src)
}
func (m *ListExportSinksResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListExportSinksResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListExportSinksResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListExportSinksResponse proto.InternalMessageInfo

func (m *ListExportSinksResponse) GetSinkNames() []string {
	if m != nil {
		return m.SinkNames
	}
	return nil
}

func (m *ListExportSinksResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

type GetExportSinksRequest struct {
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// the requested size of the page to retrieve
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// the page token
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (m *GetExportSinksRequest) Reset()      { *m = GetExportSinksRequest{} }
func (*GetExportSinksRequest) ProtoMessage() {}
func (*GetExportSinksRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_667e39c23eb47b7c, []int{25}
}
func (m *GetExportSinksRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetExportSinksRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetExportSinksRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetExportSinksRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetExportSinksRequest.Merge(m, src)
}
func (m *GetExportSinksRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetExportSinksRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetExportSinksRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetExportSinksRequest proto.InternalMessageInfo

func (m *GetExportSinksRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *GetExportSinksRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *GetExportSinksRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

type GetExportSinksResponse struct {
	// the list of export sinks
	Sinks []*v14.ExportSink `protobuf:"bytes,1,rep,name=sinks,proto3" json:"sinks,omitempty"`
	// the next page's token
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (m *GetExportSinksResponse) Reset()      { *m = GetExportSinksResponse{} }
func (*GetExportSinksResponse) ProtoMessage() {}
func (*GetExportSinksResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_667e39c23eb47b7c, []int{26}
}
func (m *GetExportSinksResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetExportSinksResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetExportSinksResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetExportSinksResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetExportSinksResponse.Merge(m, src)
}
func (m *GetExportSinksResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetExportSinksResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetExportSinksResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetExportSinksResponse proto.InternalMessageInfo

func (m *GetExportSinksResponse) GetSinks() []*v14.ExportSink {
	if m != nil {
		return m.Sinks
	}
	return nil
}

func (m *GetExportSinksResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

type ValidateExportSinkRequest struct {
	// the namespace the sink is scoped to
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// the sink specification needs to be validated
	Spec *v14.ExportSinkSpec `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (m *ValidateExportSinkRequest) Reset()      { *m = ValidateExportSinkRequest{} }
func (*ValidateExportSinkRequest) ProtoMessage() {}
func (*ValidateExportSinkRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_667e39c23eb47b7c, []int{27}
}
func (m *ValidateExportSinkRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidateExportSinkRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidateExportSinkRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidateExportSinkRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidateExportSinkRequest.Merge(m, src)
}
func (m *ValidateExportSinkRequest) XXX_Size() int {
	return m.Size()
}
func (m *ValidateExportSinkRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidateExportSinkRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ValidateExportSinkRequest proto.InternalMessageInfo

func (m *ValidateExportSinkRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ValidateExportSinkRequest) GetSpec() *v14.ExportSinkSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

type ValidateExportSinkResponse struct {
}

func (m *ValidateExportSinkResponse) Reset()      { *m = ValidateExportSinkResponse{} }
func (*ValidateExportSinkResponse) ProtoMessage() {}
func (*ValidateExportSinkResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_667e39c23eb47b7c, []int{28}
}
func (m *ValidateExportSinkResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidateExportSinkResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidateExportSinkResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidateExportSinkResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidateExportSinkResponse.Merge(m, src)
}
func (m *ValidateExportSinkResponse) XXX_Size() int {
	return m.Size()
}
func (m *ValidateExportSinkResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidateExportSinkResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ValidateExportSinkResponse proto.InternalMessageInfo

type FailoverNamespaceRequest struct {
	// The namespace to be failed over.
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// the request id to use for this operation - optional
	RequestId string `protobuf:"bytes,2,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// The target region is the region to be primary after the failover.
	TargetRegion *v13.RegionID `protobuf:"bytes,3,opt,name=target_region,json=targetRegion,proto3" json:"target_region,omitempty"`
	// This will skip graceful failover and fail over namespace without any condition.
	SkipGracefulFailover bool `protobuf:"varint,4,opt,name=skip_graceful_failover,json=skipGracefulFailover,proto3" json:"skip_graceful_failover,omitempty"`
}

func (m *FailoverNamespaceRequest) Reset()      { *m = FailoverNamespaceRequest{} }
func (*FailoverNamespaceRequest) ProtoMessage() {}
func (*FailoverNamespaceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_667e39c23eb47b7c, []int{29}
}
func (m *FailoverNamespaceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FailoverNamespaceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FailoverNamespaceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FailoverNamespaceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FailoverNamespaceRequest.Merge(m, src)
}
func (m *FailoverNamespaceRequest) XXX_Size() int {
	return m.Size()
}
func (m *FailoverNamespaceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FailoverNamespaceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FailoverNamespaceRequest proto.InternalMessageInfo

func (m *FailoverNamespaceRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *FailoverNamespaceRequest) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

func (m *FailoverNamespaceRequest) GetTargetRegion() *v13.RegionID {
	if m != nil {
		return m.TargetRegion
	}
	return nil
}

func (m *FailoverNamespaceRequest) GetSkipGracefulFailover() bool {
	if m != nil {
		return m.SkipGracefulFailover
	}
	return false
}

type FailoverNamespaceResponse struct {
	// Failover status
	RequestStatus *v12.RequestStatus `protobuf:"bytes,1,opt,name=request_status,json=requestStatus,proto3" json:"request_status,omitempty"`
}

func (m *FailoverNamespaceResponse) Reset()      { *m = FailoverNamespaceResponse{} }
func (*FailoverNamespaceResponse) ProtoMessage() {}
func (*FailoverNamespaceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_667e39c23eb47b7c, []int{30}
}
func (m *FailoverNamespaceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FailoverNamespaceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FailoverNamespaceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FailoverNamespaceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FailoverNamespaceResponse.Merge(m, src)
}
func (m *FailoverNamespaceResponse) XXX_Size() int {
	return m.Size()
}
func (m *FailoverNamespaceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FailoverNamespaceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FailoverNamespaceResponse proto.InternalMessageInfo

func (m *FailoverNamespaceResponse) GetRequestStatus() *v12.RequestStatus {
	if m != nil {
		return m.RequestStatus
	}
	return nil
}

type ReplicationStatus struct {
	// The region data is replicating from.
	SourceRegion *v13.RegionID `protobuf:"bytes,1,opt,name=source_region,json=sourceRegion,proto3" json:"source_region,omitempty"`
	// The region data is replicating to.
	TargetRegion *v13.RegionID `protobuf:"bytes,2,opt,name=target_region,json=targetRegion,proto3" json:"target_region,omitempty"`
	// The max replication lag.
	ReplicationLag *types.Duration `protobuf:"bytes,3,opt,name=replication_lag,json=replicationLag,proto3" json:"replication_lag,omitempty"`
}

func (m *ReplicationStatus) Reset()      { *m = ReplicationStatus{} }
func (*ReplicationStatus) ProtoMessage() {}
func (*ReplicationStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_667e39c23eb47b7c, []int{31}
}
func (m *ReplicationStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplicationStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReplicationStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReplicationStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplicationStatus.Merge(m, src)
}
func (m *ReplicationStatus) XXX_Size() int {
	return m.Size()
}
func (m *ReplicationStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplicationStatus.DiscardUnknown(m)
}

var xxx_messageInfo_ReplicationStatus proto.InternalMessageInfo

func (m *ReplicationStatus) GetSourceRegion() *v13.RegionID {
	if m != nil {
		return m.SourceRegion
	}
	return nil
}

func (m *ReplicationStatus) GetTargetRegion() *v13.RegionID {
	if m != nil {
		return m.TargetRegion
	}
	return nil
}

func (m *ReplicationStatus) GetReplicationLag() *types.Duration {
	if m != nil {
		return m.ReplicationLag
	}
	return nil
}

type ListFailoverHistoryByNamespaceRequest struct {
	// The namespace to get failover history.
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// List request pagination size, defaults to 100, max 1000
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Next pagination token.
	NextPageToken []byte `protobuf:"bytes,3,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (m *ListFailoverHistoryByNamespaceRequest) Reset()      { *m = ListFailoverHistoryByNamespaceRequest{} }
func (*ListFailoverHistoryByNamespaceRequest) ProtoMessage() {}
func (*ListFailoverHistoryByNamespaceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_667e39c23eb47b7c, []int{32}
}
func (m *ListFailoverHistoryByNamespaceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListFailoverHistoryByNamespaceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListFailoverHistoryByNamespaceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListFailoverHistoryByNamespaceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListFailoverHistoryByNamespaceRequest.Merge(m, src)
}
func (m *ListFailoverHistoryByNamespaceRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListFailoverHistoryByNamespaceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListFailoverHistoryByNamespaceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListFailoverHistoryByNamespaceRequest proto.InternalMessageInfo

func (m *ListFailoverHistoryByNamespaceRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ListFailoverHistoryByNamespaceRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListFailoverHistoryByNamespaceRequest) GetNextPageToken() []byte {
	if m != nil {
		return m.NextPageToken
	}
	return nil
}

type ListFailoverHistoryByNamespaceResponse struct {
	// A list of failover records
	FailoverHistory []*FailoverRecord `protobuf:"bytes,1,rep,name=failover_history,json=failoverHistory,proto3" json:"failover_history,omitempty"`
	// Next pagination token.
	NextPageToken []byte `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (m *ListFailoverHistoryByNamespaceResponse) Reset() {
	*m = ListFailoverHistoryByNamespaceResponse{}
}
func (*ListFailoverHistoryByNamespaceResponse) ProtoMessage() {}
func (*ListFailoverHistoryByNamespaceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_667e39c23eb47b7c, []int{33}
}
func (m *ListFailoverHistoryByNamespaceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListFailoverHistoryByNamespaceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListFailoverHistoryByNamespaceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListFailoverHistoryByNamespaceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListFailoverHistoryByNamespaceResponse.Merge(m, src)
}
func (m *ListFailoverHistoryByNamespaceResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListFailoverHistoryByNamespaceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListFailoverHistoryByNamespaceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListFailoverHistoryByNamespaceResponse proto.InternalMessageInfo

func (m *ListFailoverHistoryByNamespaceResponse) GetFailoverHistory() []*FailoverRecord {
	if m != nil {
		return m.FailoverHistory
	}
	return nil
}

func (m *ListFailoverHistoryByNamespaceResponse) GetNextPageToken() []byte {
	if m != nil {
		return m.NextPageToken
	}
	return nil
}

type FailoverRecord struct {
	FailoverType v13.FailoverType   `protobuf:"varint,1,opt,name=failover_type,json=failoverType,proto3,enum=api.common.v1.FailoverType" json:"failover_type,omitempty"`
	SourceRegion *v13.RegionID      `protobuf:"bytes,2,opt,name=source_region,json=sourceRegion,proto3" json:"source_region,omitempty"`
	TargetRegion *v13.RegionID      `protobuf:"bytes,3,opt,name=target_region,json=targetRegion,proto3" json:"target_region,omitempty"`
	StartTimeUtc *types.Timestamp   `protobuf:"bytes,4,opt,name=start_time_utc,json=startTimeUtc,proto3" json:"start_time_utc,omitempty"`
	EndTimeUtc   *types.Timestamp   `protobuf:"bytes,5,opt,name=end_time_utc,json=endTimeUtc,proto3" json:"end_time_utc,omitempty"`
	Status       v13.FailoverStatus `protobuf:"varint,6,opt,name=status,proto3,enum=api.common.v1.FailoverStatus" json:"status,omitempty"`
	Operator     string             `protobuf:"bytes,7,opt,name=operator,proto3" json:"operator,omitempty"`
	Reason       string             `protobuf:"bytes,8,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (m *FailoverRecord) Reset()      { *m = FailoverRecord{} }
func (*FailoverRecord) ProtoMessage() {}
func (*FailoverRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_667e39c23eb47b7c, []int{34}
}
func (m *FailoverRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FailoverRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FailoverRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FailoverRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FailoverRecord.Merge(m, src)
}
func (m *FailoverRecord) XXX_Size() int {
	return m.Size()
}
func (m *FailoverRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_FailoverRecord.DiscardUnknown(m)
}

var xxx_messageInfo_FailoverRecord proto.InternalMessageInfo

func (m *FailoverRecord) GetFailoverType() v13.FailoverType {
	if m != nil {
		return m.FailoverType
	}
	return v13.FAILOVER_TYPE_UNSPECIFIED
}

func (m *FailoverRecord) GetSourceRegion() *v13.RegionID {
	if m != nil {
		return m.SourceRegion
	}
	return nil
}

func (m *FailoverRecord) GetTargetRegion() *v13.RegionID {
	if m != nil {
		return m.TargetRegion
	}
	return nil
}

func (m *FailoverRecord) GetStartTimeUtc() *types.Timestamp {
	if m != nil {
		return m.StartTimeUtc
	}
	return nil
}

func (m *FailoverRecord) GetEndTimeUtc() *types.Timestamp {
	if m != nil {
		return m.EndTimeUtc
	}
	return nil
}

func (m *FailoverRecord) GetStatus() v13.FailoverStatus {
	if m != nil {
		return m.Status
	}
	return v13.FAILOVER_STATUS_UNSPECIFIED
}

func (m *FailoverRecord) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *FailoverRecord) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type GlobalizeNamespaceRequest struct {
	// The namespace to be globalize.
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// The request id to use for this operation - optional
	RequestId string `protobuf:"bytes,2,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// The target region to be added into global namespace.
	TargetRegion *v13.RegionID `protobuf:"bytes,3,opt,name=target_region,json=targetRegion,proto3" json:"target_region,omitempty"`
	// the version of the namespace for which this update is intended for
	// the latest version can be found in the namespace status.
	ResourceVersion string `protobuf:"bytes,4,opt,name=resource_version,json=resourceVersion,proto3" json:"resource_version,omitempty"`
}

func (m *GlobalizeNamespaceRequest) Reset()      { *m = GlobalizeNamespaceRequest{} }
func (*GlobalizeNamespaceRequest) ProtoMessage() {}
func (*GlobalizeNamespaceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_667e39c23eb47b7c, []int{35}
}
func (m *GlobalizeNamespaceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalizeNamespaceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GlobalizeNamespaceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GlobalizeNamespaceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalizeNamespaceRequest.Merge(m, src)
}
func (m *GlobalizeNamespaceRequest) XXX_Size() int {
	return m.Size()
}
func (m *GlobalizeNamespaceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalizeNamespaceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalizeNamespaceRequest proto.InternalMessageInfo

func (m *GlobalizeNamespaceRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *GlobalizeNamespaceRequest) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

func (m *GlobalizeNamespaceRequest) GetTargetRegion() *v13.RegionID {
	if m != nil {
		return m.TargetRegion
	}
	return nil
}

func (m *GlobalizeNamespaceRequest) GetResourceVersion() string {
	if m != nil {
		return m.ResourceVersion
	}
	return ""
}

type GlobalizeNamespaceResponse struct {
	// Request status
	RequestStatus *v12.RequestStatus `protobuf:"bytes,1,opt,name=request_status,json=requestStatus,proto3" json:"request_status,omitempty"`
}

func (m *GlobalizeNamespaceResponse) Reset()      { *m = GlobalizeNamespaceResponse{} }
func (*GlobalizeNamespaceResponse) ProtoMessage() {}
func (*GlobalizeNamespaceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_667e39c23eb47b7c, []int{36}
}
func (m *GlobalizeNamespaceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalizeNamespaceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GlobalizeNamespaceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GlobalizeNamespaceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalizeNamespaceResponse.Merge(m, src)
}
func (m *GlobalizeNamespaceResponse) XXX_Size() int {
	return m.Size()
}
func (m *GlobalizeNamespaceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalizeNamespaceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalizeNamespaceResponse proto.InternalMessageInfo

func (m *GlobalizeNamespaceResponse) GetRequestStatus() *v12.RequestStatus {
	if m != nil {
		return m.RequestStatus
	}
	return nil
}

type ValidateGlobalizeNamespaceRequest struct {
	// The namespace to be validated
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (m *ValidateGlobalizeNamespaceRequest) Reset()      { *m = ValidateGlobalizeNamespaceRequest{} }
func (*ValidateGlobalizeNamespaceRequest) ProtoMessage() {}
func (*ValidateGlobalizeNamespaceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_667e39c23eb47b7c, []int{37}
}
func (m *ValidateGlobalizeNamespaceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidateGlobalizeNamespaceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidateGlobalizeNamespaceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidateGlobalizeNamespaceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidateGlobalizeNamespaceRequest.Merge(m, src)
}
func (m *ValidateGlobalizeNamespaceRequest) XXX_Size() int {
	return m.Size()
}
func (m *ValidateGlobalizeNamespaceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidateGlobalizeNamespaceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ValidateGlobalizeNamespaceRequest proto.InternalMessageInfo

func (m *ValidateGlobalizeNamespaceRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

type ValidateGlobalizeNamespaceResponse struct {
	// The flag indicates if the validation succeed.
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	// The failure reason when the validation failed.
	FailureReason string `protobuf:"bytes,2,opt,name=failure_reason,json=failureReason,proto3" json:"failure_reason,omitempty"`
}

func (m *ValidateGlobalizeNamespaceResponse) Reset()      { *m = ValidateGlobalizeNamespaceResponse{} }
func (*ValidateGlobalizeNamespaceResponse) ProtoMessage() {}
func (*ValidateGlobalizeNamespaceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_667e39c23eb47b7c, []int{38}
}
func (m *ValidateGlobalizeNamespaceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidateGlobalizeNamespaceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidateGlobalizeNamespaceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidateGlobalizeNamespaceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidateGlobalizeNamespaceResponse.Merge(m, src)
}
func (m *ValidateGlobalizeNamespaceResponse) XXX_Size() int {
	return m.Size()
}
func (m *ValidateGlobalizeNamespaceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidateGlobalizeNamespaceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ValidateGlobalizeNamespaceResponse proto.InternalMessageInfo

func (m *ValidateGlobalizeNamespaceResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *ValidateGlobalizeNamespaceResponse) GetFailureReason() string {
	if m != nil {
		return m.FailureReason
	}
	return ""
}

type ListReplicaStatusRequest struct {
	// The namespace to get replica status from.
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// the requested size of the page to retrieve
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// the page token
	PageToken []byte `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (m *ListReplicaStatusRequest) Reset()      { *m = ListReplicaStatusRequest{} }
func (*ListReplicaStatusRequest) ProtoMessage() {}
func (*ListReplicaStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_667e39c23eb47b7c, []int{39}
}
func (m *ListReplicaStatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListReplicaStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListReplicaStatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListReplicaStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListReplicaStatusRequest.Merge(m, src)
}
func (m *ListReplicaStatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListReplicaStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListReplicaStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListReplicaStatusRequest proto.InternalMessageInfo

func (m *ListReplicaStatusRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ListReplicaStatusRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListReplicaStatusRequest) GetPageToken() []byte {
	if m != nil {
		return m.PageToken
	}
	return nil
}

type ListReplicaStatusResponse struct {
	// A list of replica status group by region
	Statuses []*v13.ReplicaStatus `protobuf:"bytes,1,rep,name=statuses,proto3" json:"statuses,omitempty"`
	// the page token
	PageToken []byte `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (m *ListReplicaStatusResponse) Reset()      { *m = ListReplicaStatusResponse{} }
func (*ListReplicaStatusResponse) ProtoMessage() {}
func (*ListReplicaStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_667e39c23eb47b7c, []int{40}
}
func (m *ListReplicaStatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListReplicaStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListReplicaStatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListReplicaStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListReplicaStatusResponse.Merge(m, src)
}
func (m *ListReplicaStatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListReplicaStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListReplicaStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListReplicaStatusResponse proto.InternalMessageInfo

func (m *ListReplicaStatusResponse) GetStatuses() []*v13.ReplicaStatus {
	if m != nil {
		return m.Statuses
	}
	return nil
}

func (m *ListReplicaStatusResponse) GetPageToken() []byte {
	if m != nil {
		return m.PageToken
	}
	return nil
}

func init() {
	proto.RegisterType((*CreateNamespaceRequest)(nil), "api.namespaceservice.v1.CreateNamespaceRequest")
	proto.RegisterMapType((map[string]string)(nil), "api.namespaceservice.v1.CreateNamespaceRequest.TagsEntry")
	proto.RegisterType((*CreateNamespaceResponse)(nil), "api.namespaceservice.v1.CreateNamespaceResponse")
	proto.RegisterType((*ListNamespacesFilter)(nil), "api.namespaceservice.v1.ListNamespacesFilter")
	proto.RegisterType((*ListNamespacesRequest)(nil), "api.namespaceservice.v1.ListNamespacesRequest")
	proto.RegisterType((*ListNamespacesResponse)(nil), "api.namespaceservice.v1.ListNamespacesResponse")
	proto.RegisterType((*GetNamespacesRequest)(nil), "api.namespaceservice.v1.GetNamespacesRequest")
	proto.RegisterType((*GetNamespacesResponse)(nil), "api.namespaceservice.v1.GetNamespacesResponse")
	proto.RegisterType((*GetNamespaceRequest)(nil), "api.namespaceservice.v1.GetNamespaceRequest")
	proto.RegisterType((*GetNamespaceResponse)(nil), "api.namespaceservice.v1.GetNamespaceResponse")
	proto.RegisterType((*UpdateNamespaceRequest)(nil), "api.namespaceservice.v1.UpdateNamespaceRequest")
	proto.RegisterType((*UpdateNamespaceResponse)(nil), "api.namespaceservice.v1.UpdateNamespaceResponse")
	proto.RegisterType((*RenameCustomSearchAttributeRequest)(nil), "api.namespaceservice.v1.RenameCustomSearchAttributeRequest")
	proto.RegisterType((*RenameCustomSearchAttributeResponse)(nil), "api.namespaceservice.v1.RenameCustomSearchAttributeResponse")
	proto.RegisterType((*DeleteNamespaceRequest)(nil), "api.namespaceservice.v1.DeleteNamespaceRequest")
	proto.RegisterType((*DeleteNamespaceResponse)(nil), "api.namespaceservice.v1.DeleteNamespaceResponse")
	proto.RegisterType((*CreateExportSinkRequest)(nil), "api.namespaceservice.v1.CreateExportSinkRequest")
	proto.RegisterType((*CreateExportSinkResponse)(nil), "api.namespaceservice.v1.CreateExportSinkResponse")
	proto.RegisterType((*GetExportSinkRequest)(nil), "api.namespaceservice.v1.GetExportSinkRequest")
	proto.RegisterType((*GetExportSinkResponse)(nil), "api.namespaceservice.v1.GetExportSinkResponse")
	proto.RegisterType((*DeleteExportSinkRequest)(nil), "api.namespaceservice.v1.DeleteExportSinkRequest")
	proto.RegisterType((*DeleteExportSinkResponse)(nil), "api.namespaceservice.v1.DeleteExportSinkResponse")
	proto.RegisterType((*UpdateExportSinkRequest)(nil), "api.namespaceservice.v1.UpdateExportSinkRequest")
	proto.RegisterType((*UpdateExportSinkResponse)(nil), "api.namespaceservice.v1.UpdateExportSinkResponse")
	proto.RegisterType((*ListExportSinksRequest)(nil), "api.namespaceservice.v1.ListExportSinksRequest")
	proto.RegisterType((*ListExportSinksResponse)(nil), "api.namespaceservice.v1.ListExportSinksResponse")
	proto.RegisterType((*GetExportSinksRequest)(nil), "api.namespaceservice.v1.GetExportSinksRequest")
	proto.RegisterType((*GetExportSinksResponse)(nil), "api.namespaceservice.v1.GetExportSinksResponse")
	proto.RegisterType((*ValidateExportSinkRequest)(nil), "api.namespaceservice.v1.ValidateExportSinkRequest")
	proto.RegisterType((*ValidateExportSinkResponse)(nil), "api.namespaceservice.v1.ValidateExportSinkResponse")
	proto.RegisterType((*FailoverNamespaceRequest)(nil), "api.namespaceservice.v1.FailoverNamespaceRequest")
	proto.RegisterType((*FailoverNamespaceResponse)(nil), "api.namespaceservice.v1.FailoverNamespaceResponse")
	proto.RegisterType((*ReplicationStatus)(nil), "api.namespaceservice.v1.ReplicationStatus")
	proto.RegisterType((*ListFailoverHistoryByNamespaceRequest)(nil), "api.namespaceservice.v1.ListFailoverHistoryByNamespaceRequest")
	proto.RegisterType((*ListFailoverHistoryByNamespaceResponse)(nil), "api.namespaceservice.v1.ListFailoverHistoryByNamespaceResponse")
	proto.RegisterType((*FailoverRecord)(nil), "api.namespaceservice.v1.FailoverRecord")
	proto.RegisterType((*GlobalizeNamespaceRequest)(nil), "api.namespaceservice.v1.GlobalizeNamespaceRequest")
	proto.RegisterType((*GlobalizeNamespaceResponse)(nil), "api.namespaceservice.v1.GlobalizeNamespaceResponse")
	proto.RegisterType((*ValidateGlobalizeNamespaceRequest)(nil), "api.namespaceservice.v1.ValidateGlobalizeNamespaceRequest")
	proto.RegisterType((*ValidateGlobalizeNamespaceResponse)(nil), "api.namespaceservice.v1.ValidateGlobalizeNamespaceResponse")
	proto.RegisterType((*ListReplicaStatusRequest)(nil), "api.namespaceservice.v1.ListReplicaStatusRequest")
	proto.RegisterType((*ListReplicaStatusResponse)(nil), "api.namespaceservice.v1.ListReplicaStatusResponse")
}

func init() {
	proto.RegisterFile("api/namespaceservice/v1/request_response.proto", fileDescriptor_667e39c23eb47b7c)
}

var fileDescriptor_667e39c23eb47b7c = []byte{
	// 1552 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x58, 0xcd, 0x6f, 0xd4, 0x46,
	0x1b, 0x8f, 0x77, 0x93, 0x90, 0x7d, 0x92, 0x6c, 0x78, 0xfd, 0x86, 0x64, 0xb3, 0x49, 0x4c, 0xf0,
	0xab, 0xf0, 0x06, 0x55, 0x38, 0x25, 0x50, 0x15, 0x0a, 0x07, 0x3e, 0x02, 0x34, 0x12, 0x45, 0xa9,
	0x13, 0x38, 0xf4, 0xe2, 0x38, 0xde, 0xc9, 0x32, 0xc4, 0x6b, 0x9b, 0x99, 0xf1, 0x42, 0x50, 0x0f,
	0xdc, 0x2a, 0xf5, 0xd4, 0x63, 0xd5, 0x43, 0x4f, 0x55, 0xd5, 0x73, 0xa5, 0x1e, 0x7a, 0xec, 0xad,
	0x52, 0x2f, 0x48, 0xbd, 0x70, 0x2c, 0xcb, 0x85, 0x23, 0x7f, 0x42, 0x35, 0xe3, 0xf1, 0x7e, 0xd8,
	0xde, 0xcd, 0x86, 0x2e, 0xa8, 0xb7, 0x9d, 0x79, 0x9e, 0x79, 0x9e, 0xdf, 0xef, 0xf9, 0xda, 0xf1,
	0x80, 0x61, 0x07, 0x78, 0xd5, 0xb3, 0x6b, 0x88, 0x06, 0xb6, 0x83, 0x28, 0x22, 0x75, 0xec, 0xa0,
	0xd5, 0xfa, 0xb9, 0x55, 0x82, 0x1e, 0x85, 0x88, 0x32, 0x8b, 0x20, 0x1a, 0xf8, 0x1e, 0x45, 0x46,
	0x40, 0x7c, 0xe6, 0xab, 0xb3, 0x76, 0x80, 0x8d, 0xa4, 0xbe, 0x51, 0x3f, 0x57, 0x9e, 0xe3, 0x86,
	0xec, 0x90, 0x3d, 0xe0, 0x87, 0x6b, 0x88, 0x52, 0xbb, 0x2a, 0xcf, 0x94, 0xe7, 0xb9, 0xc8, 0xf1,
	0x6b, 0x35, 0xdf, 0x4b, 0x0b, 0xb5, 0x0e, 0x00, 0x69, 0xf9, 0x02, 0x97, 0x4b, 0x30, 0x69, 0xa9,
	0xf0, 0x4a, 0xb1, 0xb7, 0x9f, 0x16, 0x9d, 0xac, 0xfa, 0x7e, 0xd5, 0x45, 0xab, 0x62, 0xb5, 0x1b,
	0xee, 0xad, 0x32, 0x5c, 0x43, 0x94, 0xd9, 0xb5, 0x20, 0xf6, 0x9c, 0x54, 0xa8, 0x84, 0xc4, 0x66,
	0xd8, 0xf7, 0x22, 0xb9, 0xfe, 0x3a, 0x0f, 0x33, 0x37, 0x08, 0xb2, 0x19, 0xba, 0x1b, 0xc3, 0x33,
	0x23, 0x1c, 0xea, 0x02, 0x14, 0x9a, 0x90, 0x4b, 0xca, 0x92, 0xb2, 0x52, 0x30, 0x5b, 0x1b, 0xea,
	0x79, 0x18, 0xa6, 0x01, 0x72, 0x4a, 0xb9, 0x25, 0x65, 0x65, 0x7c, 0xed, 0xa4, 0xd1, 0x11, 0x32,
	0xa3, 0x7e, 0xce, 0x68, 0xda, 0xdb, 0x0a, 0x90, 0x63, 0x0a, 0x65, 0x75, 0x11, 0x20, 0x0e, 0x39,
	0xae, 0x94, 0xf2, 0x91, 0x4d, 0xb9, 0xb3, 0x51, 0x51, 0x1d, 0x28, 0x87, 0x14, 0x11, 0xab, 0x69,
	0xc7, 0x0a, 0x10, 0xa9, 0x61, 0x4a, 0xb1, 0xef, 0xd1, 0xd2, 0xf0, 0x52, 0x7e, 0x65, 0x7c, 0x6d,
	0x59, 0x78, 0xe2, 0x39, 0xe0, 0x4e, 0xee, 0x51, 0x44, 0x9a, 0x8e, 0x36, 0x5b, 0xca, 0x66, 0x29,
	0xec, 0x22, 0x51, 0x7d, 0xd0, 0x70, 0x05, 0x79, 0x0c, 0xb3, 0x83, 0x2e, 0x8e, 0x46, 0x84, 0xa3,
	0x33, 0x1d, 0x8e, 0x36, 0xe4, 0x91, 0x4c, 0x67, 0x0b, 0xb8, 0x87, 0x54, 0xfd, 0x0c, 0x86, 0x99,
	0x5d, 0xa5, 0xa5, 0x51, 0x61, 0xf6, 0x92, 0xd1, 0xa5, 0xb8, 0x8c, 0xec, 0x34, 0x18, 0xdb, 0x76,
	0x95, 0xde, 0xf4, 0x18, 0x39, 0x30, 0x85, 0x99, 0xf2, 0xc7, 0x50, 0x68, 0x6e, 0xa9, 0xc7, 0x21,
	0xbf, 0x8f, 0x0e, 0x64, 0x76, 0xf8, 0x4f, 0x75, 0x1a, 0x46, 0xea, 0xb6, 0x1b, 0x22, 0x91, 0x98,
	0x82, 0x19, 0x2d, 0x3e, 0xc9, 0x5d, 0x54, 0x74, 0x0b, 0x66, 0x53, 0x2e, 0xa2, 0xb2, 0x57, 0xd7,
	0xa1, 0x18, 0xe7, 0x85, 0x32, 0x9b, 0x85, 0x54, 0x58, 0x1c, 0x5f, 0x5b, 0x14, 0x60, 0xa5, 0x88,
	0x63, 0x94, 0xa0, 0xb6, 0x84, 0x92, 0x39, 0x49, 0xda, 0x97, 0xfa, 0xb7, 0x0a, 0x4c, 0xdf, 0xc1,
	0x94, 0x35, 0xed, 0xd3, 0x5b, 0xd8, 0x65, 0x88, 0xa8, 0x77, 0x61, 0xca, 0x71, 0xfd, 0xb0, 0x62,
	0x05, 0xc4, 0xaf, 0xe3, 0x0a, 0x22, 0xdc, 0x7e, 0x7e, 0xa5, 0x28, 0x93, 0x19, 0x75, 0x4d, 0x64,
	0xbe, 0x8a, 0x7d, 0x6f, 0x63, 0xdd, 0xb8, 0xc1, 0xd5, 0x37, 0xa5, 0xb6, 0x59, 0x74, 0xda, 0x97,
	0x54, 0xfd, 0x10, 0xa6, 0x1d, 0xdf, 0xf3, 0x90, 0xc3, 0x70, 0x9d, 0xa7, 0x91, 0x84, 0x2e, 0xe2,
	0x05, 0x15, 0x51, 0x56, 0xdb, 0x65, 0x66, 0xe8, 0xa2, 0x8d, 0x8a, 0xfe, 0x9d, 0x02, 0x27, 0x3a,
	0xa1, 0xc5, 0x55, 0x3e, 0x0f, 0x85, 0xc0, 0xae, 0x22, 0x8b, 0xe2, 0xa7, 0x51, 0x95, 0x8f, 0x98,
	0x63, 0x7c, 0x63, 0x0b, 0x3f, 0x45, 0xbc, 0x5e, 0x85, 0x90, 0xf9, 0xfb, 0xc8, 0x93, 0xe6, 0x85,
	0xfa, 0x36, 0xdf, 0x50, 0x6f, 0xc2, 0xe8, 0x9e, 0x60, 0x28, 0x4a, 0x79, 0x7c, 0xed, 0x6c, 0xd7,
	0xdc, 0x66, 0x85, 0xc5, 0x94, 0x87, 0xf5, 0x1d, 0x98, 0x49, 0x62, 0x93, 0x79, 0xd1, 0x00, 0x5a,
	0xd6, 0x44, 0xcc, 0x0a, 0x66, 0xdb, 0x8e, 0x7a, 0x1a, 0xa6, 0x3c, 0xf4, 0x84, 0x59, 0x29, 0x90,
	0x93, 0x7c, 0x7b, 0x33, 0x06, 0xaa, 0x9b, 0x30, 0x7d, 0x1b, 0x0d, 0x96, 0xbc, 0xfe, 0x25, 0x9c,
	0x48, 0xd8, 0x94, 0xa0, 0x2f, 0xa7, 0x40, 0x8f, 0xaf, 0xcd, 0xf7, 0x98, 0x0f, 0x6f, 0xc5, 0xe8,
	0x3c, 0xfc, 0xb7, 0xdd, 0x7b, 0x5f, 0x33, 0x4b, 0xff, 0xbc, 0x33, 0x0c, 0x4d, 0xc4, 0x97, 0x92,
	0xa7, 0x0e, 0x01, 0xdc, 0x66, 0xf2, 0x17, 0x05, 0x66, 0xee, 0x05, 0x95, 0xf7, 0x34, 0x3f, 0xcf,
	0xc0, 0x71, 0x82, 0xa8, 0x1f, 0x12, 0x07, 0x59, 0x75, 0x44, 0xf8, 0x7c, 0x91, 0x53, 0x74, 0x2a,
	0xde, 0xbf, 0x1f, 0x6d, 0x27, 0x46, 0xed, 0x70, 0x62, 0xd4, 0xf2, 0x61, 0x90, 0x82, 0x3d, 0xd0,
	0x61, 0xf0, 0x63, 0x0e, 0x74, 0x13, 0x71, 0x46, 0x37, 0x42, 0xca, 0xfc, 0xda, 0x16, 0xb2, 0x89,
	0xf3, 0xe0, 0x1a, 0x63, 0x04, 0xef, 0x86, 0xac, 0xcf, 0x20, 0x6d, 0xc2, 0x32, 0x7a, 0x82, 0x29,
	0xc3, 0x5e, 0xd5, 0x72, 0x84, 0x19, 0x8b, 0x0a, 0x3b, 0x96, 0x1d, 0x1b, 0x12, 0x33, 0x5c, 0xd6,
	0xc8, 0xa9, 0x58, 0x39, 0xd3, 0x25, 0x67, 0xaa, 0xde, 0x82, 0x25, 0x0f, 0x3d, 0xee, 0x6d, 0x2c,
	0x8a, 0xe8, 0x82, 0x87, 0x1e, 0x77, 0xb7, 0x93, 0x95, 0x89, 0xe1, 0x7e, 0x32, 0x31, 0x92, 0xcc,
	0xc4, 0x3e, 0xfc, 0xaf, 0x67, 0x9c, 0x06, 0x9a, 0x95, 0x67, 0x0a, 0xcc, 0xac, 0x23, 0x17, 0x1d,
	0xb9, 0x5c, 0xb3, 0xf8, 0xe6, 0xfa, 0xe1, 0x9b, 0xcf, 0xa8, 0xbc, 0x14, 0x82, 0x81, 0x72, 0xfc,
	0x4a, 0x89, 0xff, 0xe8, 0x6e, 0x3e, 0x09, 0x7c, 0xc2, 0xb6, 0xb0, 0xb7, 0xdf, 0x1f, 0xc9, 0xd5,
	0x8e, 0x9e, 0x8c, 0x46, 0x00, 0xbf, 0x77, 0x71, 0x97, 0x2d, 0x5b, 0x7d, 0xdf, 0x67, 0xf4, 0x1d,
	0x28, 0xa5, 0x81, 0x0c, 0x94, 0x6b, 0x34, 0xd1, 0x8e, 0xca, 0x73, 0x1e, 0x0a, 0x9c, 0x56, 0x7b,
	0xeb, 0x8c, 0xf1, 0x0d, 0x9e, 0x11, 0x7d, 0x5d, 0xcc, 0xf5, 0x0c, 0xc4, 0x1f, 0xc0, 0x30, 0x57,
	0x92, 0x38, 0x67, 0xbb, 0x44, 0xc7, 0x14, 0x4a, 0xfa, 0xf7, 0x4a, 0x9c, 0xe6, 0x41, 0x82, 0x1b,
	0xe0, 0x00, 0xdc, 0x81, 0x52, 0x1a, 0xdf, 0x40, 0x73, 0xf3, 0xb3, 0x12, 0xcf, 0xd8, 0x77, 0x5e,
	0x87, 0x03, 0x0d, 0x4b, 0x1a, 0xf3, 0x40, 0xc3, 0x42, 0xa2, 0xdb, 0x4e, 0xcb, 0x3e, 0xed, 0xbb,
	0x2e, 0x5a, 0x77, 0x95, 0x5c, 0xcf, 0xbb, 0x4a, 0x3e, 0x79, 0x57, 0xd9, 0x81, 0xd9, 0x94, 0x4f,
	0x49, 0x6a, 0x11, 0xa0, 0x59, 0x6e, 0xf1, 0x15, 0xab, 0x10, 0xd7, 0x5b, 0xff, 0xf7, 0x91, 0x47,
	0x89, 0xae, 0x79, 0x0f, 0xa4, 0x7c, 0x98, 0x49, 0xba, 0x94, 0x9c, 0xce, 0xc2, 0x08, 0x67, 0x10,
	0x5f, 0xbe, 0xba, 0xb6, 0x6a, 0xa4, 0xd5, 0x37, 0xc7, 0x87, 0x30, 0x77, 0xdf, 0x76, 0xf1, 0xfb,
	0xa8, 0x68, 0x7d, 0x01, 0xca, 0x59, 0xbe, 0x22, 0x82, 0xfa, 0x1f, 0x0a, 0x94, 0x6e, 0xd9, 0xd8,
	0xf5, 0xeb, 0x6d, 0x1f, 0x79, 0xfd, 0x21, 0xe9, 0xac, 0xff, 0x5c, 0xf2, 0x13, 0xf4, 0x0a, 0x4c,
	0x32, 0x9b, 0x54, 0x11, 0xb3, 0x88, 0xf8, 0x16, 0x91, 0x37, 0xfb, 0xd9, 0x2e, 0x1f, 0x2a, 0xe6,
	0x44, 0xa4, 0x1d, 0xad, 0xd5, 0x0b, 0x30, 0x43, 0xf7, 0x71, 0x60, 0x55, 0x89, 0xed, 0xa0, 0xbd,
	0xd0, 0xb5, 0xf6, 0x24, 0x48, 0xd1, 0x68, 0x63, 0xe6, 0x34, 0x97, 0xde, 0x96, 0xc2, 0x98, 0x80,
	0x6e, 0xc3, 0x5c, 0x06, 0x99, 0x81, 0x36, 0xdd, 0x9f, 0x0a, 0xfc, 0xc7, 0x44, 0x81, 0x8b, 0x1d,
	0xf1, 0xf1, 0x1f, 0xed, 0x72, 0xb2, 0x72, 0x68, 0x48, 0xb2, 0xca, 0x21, 0x64, 0x23, 0x6d, 0x49,
	0x36, 0x15, 0xaa, 0xdc, 0x51, 0x42, 0x75, 0x1d, 0xa6, 0x48, 0x0b, 0x90, 0xe5, 0xda, 0x55, 0x19,
	0xea, 0x39, 0x23, 0x7a, 0xb2, 0x30, 0xe2, 0x27, 0x0b, 0x63, 0x5d, 0x3e, 0x59, 0x98, 0xc5, 0xb6,
	0x13, 0x77, 0xec, 0xaa, 0xfe, 0xb5, 0x02, 0xcb, 0xbc, 0xaf, 0xe3, 0xe8, 0x7d, 0x8a, 0x29, 0xf3,
	0xc9, 0xc1, 0xf5, 0x83, 0x23, 0xd6, 0x44, 0xcf, 0x2e, 0xcc, 0xe8, 0x0e, 0x0e, 0x74, 0x22, 0xd9,
	0x1d, 0x3f, 0x28, 0x70, 0xfa, 0x30, 0x30, 0x32, 0xa7, 0x26, 0x1c, 0x8f, 0x0b, 0xc3, 0x7a, 0x10,
	0xa9, 0xc9, 0x56, 0xfd, 0x7f, 0xd7, 0x2f, 0xc8, 0xd8, 0xac, 0x89, 0x1c, 0x9f, 0x54, 0xcc, 0xa9,
	0xbd, 0x4e, 0x37, 0xdd, 0x9a, 0x38, 0x05, 0xf3, 0xd7, 0x3c, 0x14, 0x3b, 0x6d, 0xa9, 0x57, 0x61,
	0xb2, 0x09, 0x87, 0x1d, 0x04, 0x51, 0x80, 0x8a, 0xb2, 0x4b, 0x5b, 0x89, 0x8c, 0x4f, 0x6d, 0x1f,
	0x04, 0xc8, 0x9c, 0xd8, 0x6b, 0x5b, 0xa5, 0x0b, 0x29, 0xf7, 0x8f, 0x0a, 0xe9, 0x48, 0x3d, 0x77,
	0x15, 0x8a, 0x94, 0xd9, 0x84, 0x59, 0x0c, 0xd7, 0x90, 0x15, 0x32, 0x47, 0xf4, 0xda, 0xf8, 0x5a,
	0x39, 0x55, 0x47, 0xdb, 0xf1, 0xdb, 0x98, 0x39, 0x21, 0x4e, 0xf0, 0xf5, 0x3d, 0xe6, 0xa8, 0x57,
	0x60, 0x02, 0x79, 0x95, 0xd6, 0xf9, 0x91, 0x43, 0xcf, 0x03, 0xf2, 0x2a, 0xf1, 0xe9, 0x8f, 0x60,
	0x54, 0x36, 0xe6, 0xa8, 0x08, 0xdb, 0x62, 0x97, 0xb0, 0xc9, 0xc6, 0x94, 0xca, 0x6a, 0x19, 0xc6,
	0xfc, 0x00, 0x11, 0x9b, 0xf9, 0xa4, 0x74, 0x2c, 0xba, 0xe5, 0xc4, 0x6b, 0x75, 0x06, 0x46, 0x09,
	0xb2, 0xa9, 0xef, 0x95, 0xc6, 0x84, 0x44, 0xae, 0xf4, 0xdf, 0x14, 0x98, 0xbb, 0xed, 0xfa, 0xbb,
	0xb6, 0x8b, 0x9f, 0xa2, 0x7f, 0xd3, 0xdc, 0xeb, 0xff, 0x6b, 0x48, 0xdf, 0x85, 0x72, 0x16, 0x85,
	0x81, 0x4e, 0xbb, 0x6b, 0x70, 0x2a, 0xfe, 0xf3, 0x78, 0xcb, 0x70, 0xe9, 0x08, 0xf4, 0x5e, 0x26,
	0x24, 0xdc, 0x12, 0x1c, 0xa3, 0xa1, 0xe3, 0x20, 0x1a, 0xe1, 0x1c, 0x33, 0xe3, 0xa5, 0xba, 0x0c,
	0x45, 0xde, 0x21, 0x21, 0xe1, 0x2d, 0x21, 0x52, 0x29, 0xff, 0x52, 0xe5, 0xae, 0x19, 0x65, 0x94,
	0x41, 0x89, 0xcf, 0x0c, 0x39, 0x9a, 0x25, 0x9b, 0x77, 0x71, 0x73, 0x98, 0x68, 0xbf, 0x39, 0x30,
	0x98, 0xcb, 0xf0, 0x2a, 0x39, 0x5d, 0x84, 0xb1, 0x28, 0xf4, 0xcd, 0xc7, 0x9b, 0x85, 0x54, 0x11,
	0xb4, 0x9f, 0x6b, 0x6a, 0x67, 0x3c, 0x18, 0xb5, 0x7b, 0xbd, 0xfe, 0xf0, 0xf9, 0x4b, 0x6d, 0xe8,
	0xc5, 0x4b, 0x6d, 0xe8, 0xcd, 0x4b, 0x4d, 0x79, 0xd6, 0xd0, 0x94, 0x9f, 0x1a, 0x9a, 0xf2, 0x7b,
	0x43, 0x53, 0x9e, 0x37, 0x34, 0xe5, 0xaf, 0x86, 0xa6, 0xbc, 0x6e, 0x68, 0x43, 0x6f, 0x1a, 0x9a,
	0xf2, 0xcd, 0x2b, 0x6d, 0xe8, 0xf9, 0x2b, 0x6d, 0xe8, 0xc5, 0x2b, 0x6d, 0xe8, 0x8b, 0x0b, 0xac,
	0x16, 0x10, 0xd7, 0x10, 0x2f, 0x80, 0xab, 0x5d, 0xde, 0xf1, 0x2f, 0x27, 0xf7, 0x76, 0x47, 0x45,
	0xd3, 0x9e, 0xff, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x99, 0xdc, 0xcf, 0x82, 0xfa, 0x17, 0x00, 0x00,
}

func (this *CreateNamespaceRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateNamespaceRequest)
	if !ok {
		that2, ok := that.(CreateNamespaceRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if !this.Spec.Equal(that1.Spec) {
		return false
	}
	if this.RequestId != that1.RequestId {
		return false
	}
	if len(this.UserNamespacePermissions) != len(that1.UserNamespacePermissions) {
		return false
	}
	for i := range this.UserNamespacePermissions {
		if !this.UserNamespacePermissions[i].Equal(that1.UserNamespacePermissions[i]) {
			return false
		}
	}
	if len(this.IdentityNamespacePermissions) != len(that1.IdentityNamespacePermissions) {
		return false
	}
	for i := range this.IdentityNamespacePermissions {
		if !this.IdentityNamespacePermissions[i].Equal(that1.IdentityNamespacePermissions[i]) {
			return false
		}
	}
	if len(this.Tags) != len(that1.Tags) {
		return false
	}
	for i := range this.Tags {
		if this.Tags[i] != that1.Tags[i] {
			return false
		}
	}
	return true
}
func (this *CreateNamespaceResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateNamespaceResponse)
	if !ok {
		that2, ok := that.(CreateNamespaceResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RequestStatus.Equal(that1.RequestStatus) {
		return false
	}
	return true
}
func (this *ListNamespacesFilter) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListNamespacesFilter)
	if !ok {
		that2, ok := that.(ListNamespacesFilter)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.CloudProviders) != len(that1.CloudProviders) {
		return false
	}
	for i := range this.CloudProviders {
		if this.CloudProviders[i] != that1.CloudProviders[i] {
			return false
		}
	}
	if this.ConnectivityRuleId != that1.ConnectivityRuleId {
		return false
	}
	return true
}
func (this *ListNamespacesRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListNamespacesRequest)
	if !ok {
		that2, ok := that.(ListNamespacesRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PageSize != that1.PageSize {
		return false
	}
	if this.PageToken != that1.PageToken {
		return false
	}
	if !this.Filter.Equal(that1.Filter) {
		return false
	}
	return true
}
func (this *ListNamespacesResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListNamespacesResponse)
	if !ok {
		that2, ok := that.(ListNamespacesResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Namespaces) != len(that1.Namespaces) {
		return false
	}
	for i := range this.Namespaces {
		if this.Namespaces[i] != that1.Namespaces[i] {
			return false
		}
	}
	if this.NextPageToken != that1.NextPageToken {
		return false
	}
	return true
}
func (this *GetNamespacesRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetNamespacesRequest)
	if !ok {
		that2, ok := that.(GetNamespacesRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PageSize != that1.PageSize {
		return false
	}
	if this.PageToken != that1.PageToken {
		return false
	}
	return true
}
func (this *GetNamespacesResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetNamespacesResponse)
	if !ok {
		that2, ok := that.(GetNamespacesResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Namespaces) != len(that1.Namespaces) {
		return false
	}
	for i := range this.Namespaces {
		if !this.Namespaces[i].Equal(that1.Namespaces[i]) {
			return false
		}
	}
	if this.NextPageToken != that1.NextPageToken {
		return false
	}
	return true
}
func (this *GetNamespaceRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetNamespaceRequest)
	if !ok {
		that2, ok := that.(GetNamespaceRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	return true
}
func (this *GetNamespaceResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetNamespaceResponse)
	if !ok {
		that2, ok := that.(GetNamespaceResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Namespace.Equal(that1.Namespace) {
		return false
	}
	return true
}
func (this *UpdateNamespaceRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateNamespaceRequest)
	if !ok {
		that2, ok := that.(UpdateNamespaceRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if !this.Spec.Equal(that1.Spec) {
		return false
	}
	if this.ResourceVersion != that1.ResourceVersion {
		return false
	}
	if this.RequestId != that1.RequestId {
		return false
	}
	return true
}
func (this *UpdateNamespaceResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateNamespaceResponse)
	if !ok {
		that2, ok := that.(UpdateNamespaceResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RequestStatus.Equal(that1.RequestStatus) {
		return false
	}
	return true
}
func (this *RenameCustomSearchAttributeRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RenameCustomSearchAttributeRequest)
	if !ok {
		that2, ok := that.(RenameCustomSearchAttributeRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.ExistingCustomSearchAttributeName != that1.ExistingCustomSearchAttributeName {
		return false
	}
	if this.NewCustomSearchAttributeName != that1.NewCustomSearchAttributeName {
		return false
	}
	if this.ResourceVersion != that1.ResourceVersion {
		return false
	}
	if this.RequestId != that1.RequestId {
		return false
	}
	return true
}
func (this *RenameCustomSearchAttributeResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RenameCustomSearchAttributeResponse)
	if !ok {
		that2, ok := that.(RenameCustomSearchAttributeResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RequestStatus.Equal(that1.RequestStatus) {
		return false
	}
	return true
}
func (this *DeleteNamespaceRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteNamespaceRequest)
	if !ok {
		that2, ok := that.(DeleteNamespaceRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.ResourceVersion != that1.ResourceVersion {
		return false
	}
	if this.RequestId != that1.RequestId {
		return false
	}
	return true
}
func (this *DeleteNamespaceResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteNamespaceResponse)
	if !ok {
		that2, ok := that.(DeleteNamespaceResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RequestStatus.Equal(that1.RequestStatus) {
		return false
	}
	return true
}
func (this *CreateExportSinkRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateExportSinkRequest)
	if !ok {
		that2, ok := that.(CreateExportSinkRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if !this.Spec.Equal(that1.Spec) {
		return false
	}
	if this.RequestId != that1.RequestId {
		return false
	}
	return true
}
func (this *CreateExportSinkResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateExportSinkResponse)
	if !ok {
		that2, ok := that.(CreateExportSinkResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RequestStatus.Equal(that1.RequestStatus) {
		return false
	}
	return true
}
func (this *GetExportSinkRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetExportSinkRequest)
	if !ok {
		that2, ok := that.(GetExportSinkRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.SinkName != that1.SinkName {
		return false
	}
	return true
}
func (this *GetExportSinkResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetExportSinkResponse)
	if !ok {
		that2, ok := that.(GetExportSinkResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Sink.Equal(that1.Sink) {
		return false
	}
	return true
}
func (this *DeleteExportSinkRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteExportSinkRequest)
	if !ok {
		that2, ok := that.(DeleteExportSinkRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.SinkName != that1.SinkName {
		return false
	}
	if this.ResourceVersion != that1.ResourceVersion {
		return false
	}
	if this.RequestId != that1.RequestId {
		return false
	}
	return true
}
func (this *DeleteExportSinkResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteExportSinkResponse)
	if !ok {
		that2, ok := that.(DeleteExportSinkResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RequestStatus.Equal(that1.RequestStatus) {
		return false
	}
	return true
}
func (this *UpdateExportSinkRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateExportSinkRequest)
	if !ok {
		that2, ok := that.(UpdateExportSinkRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if !this.Spec.Equal(that1.Spec) {
		return false
	}
	if this.ResourceVersion != that1.ResourceVersion {
		return false
	}
	if this.RequestId != that1.RequestId {
		return false
	}
	return true
}
func (this *UpdateExportSinkResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateExportSinkResponse)
	if !ok {
		that2, ok := that.(UpdateExportSinkResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RequestStatus.Equal(that1.RequestStatus) {
		return false
	}
	return true
}
func (this *ListExportSinksRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListExportSinksRequest)
	if !ok {
		that2, ok := that.(ListExportSinksRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.PageSize != that1.PageSize {
		return false
	}
	if this.PageToken != that1.PageToken {
		return false
	}
	return true
}
func (this *ListExportSinksResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListExportSinksResponse)
	if !ok {
		that2, ok := that.(ListExportSinksResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.SinkNames) != len(that1.SinkNames) {
		return false
	}
	for i := range this.SinkNames {
		if this.SinkNames[i] != that1.SinkNames[i] {
			return false
		}
	}
	if this.NextPageToken != that1.NextPageToken {
		return false
	}
	return true
}
func (this *GetExportSinksRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetExportSinksRequest)
	if !ok {
		that2, ok := that.(GetExportSinksRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.PageSize != that1.PageSize {
		return false
	}
	if this.PageToken != that1.PageToken {
		return false
	}
	return true
}
func (this *GetExportSinksResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetExportSinksResponse)
	if !ok {
		that2, ok := that.(GetExportSinksResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Sinks) != len(that1.Sinks) {
		return false
	}
	for i := range this.Sinks {
		if !this.Sinks[i].Equal(that1.Sinks[i]) {
			return false
		}
	}
	if this.NextPageToken != that1.NextPageToken {
		return false
	}
	return true
}
func (this *ValidateExportSinkRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ValidateExportSinkRequest)
	if !ok {
		that2, ok := that.(ValidateExportSinkRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if !this.Spec.Equal(that1.Spec) {
		return false
	}
	return true
}
func (this *ValidateExportSinkResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ValidateExportSinkResponse)
	if !ok {
		that2, ok := that.(ValidateExportSinkResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *FailoverNamespaceRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FailoverNamespaceRequest)
	if !ok {
		that2, ok := that.(FailoverNamespaceRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.RequestId != that1.RequestId {
		return false
	}
	if !this.TargetRegion.Equal(that1.TargetRegion) {
		return false
	}
	if this.SkipGracefulFailover != that1.SkipGracefulFailover {
		return false
	}
	return true
}
func (this *FailoverNamespaceResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FailoverNamespaceResponse)
	if !ok {
		that2, ok := that.(FailoverNamespaceResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RequestStatus.Equal(that1.RequestStatus) {
		return false
	}
	return true
}
func (this *ReplicationStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplicationStatus)
	if !ok {
		that2, ok := that.(ReplicationStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SourceRegion.Equal(that1.SourceRegion) {
		return false
	}
	if !this.TargetRegion.Equal(that1.TargetRegion) {
		return false
	}
	if !this.ReplicationLag.Equal(that1.ReplicationLag) {
		return false
	}
	return true
}
func (this *ListFailoverHistoryByNamespaceRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListFailoverHistoryByNamespaceRequest)
	if !ok {
		that2, ok := that.(ListFailoverHistoryByNamespaceRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.PageSize != that1.PageSize {
		return false
	}
	if !bytes.Equal(this.NextPageToken, that1.NextPageToken) {
		return false
	}
	return true
}
func (this *ListFailoverHistoryByNamespaceResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListFailoverHistoryByNamespaceResponse)
	if !ok {
		that2, ok := that.(ListFailoverHistoryByNamespaceResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.FailoverHistory) != len(that1.FailoverHistory) {
		return false
	}
	for i := range this.FailoverHistory {
		if !this.FailoverHistory[i].Equal(that1.FailoverHistory[i]) {
			return false
		}
	}
	if !bytes.Equal(this.NextPageToken, that1.NextPageToken) {
		return false
	}
	return true
}
func (this *FailoverRecord) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FailoverRecord)
	if !ok {
		that2, ok := that.(FailoverRecord)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.FailoverType != that1.FailoverType {
		return false
	}
	if !this.SourceRegion.Equal(that1.SourceRegion) {
		return false
	}
	if !this.TargetRegion.Equal(that1.TargetRegion) {
		return false
	}
	if !this.StartTimeUtc.Equal(that1.StartTimeUtc) {
		return false
	}
	if !this.EndTimeUtc.Equal(that1.EndTimeUtc) {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.Operator != that1.Operator {
		return false
	}
	if this.Reason != that1.Reason {
		return false
	}
	return true
}
func (this *GlobalizeNamespaceRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalizeNamespaceRequest)
	if !ok {
		that2, ok := that.(GlobalizeNamespaceRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.RequestId != that1.RequestId {
		return false
	}
	if !this.TargetRegion.Equal(that1.TargetRegion) {
		return false
	}
	if this.ResourceVersion != that1.ResourceVersion {
		return false
	}
	return true
}
func (this *GlobalizeNamespaceResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GlobalizeNamespaceResponse)
	if !ok {
		that2, ok := that.(GlobalizeNamespaceResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RequestStatus.Equal(that1.RequestStatus) {
		return false
	}
	return true
}
func (this *ValidateGlobalizeNamespaceRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ValidateGlobalizeNamespaceRequest)
	if !ok {
		that2, ok := that.(ValidateGlobalizeNamespaceRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	return true
}
func (this *ValidateGlobalizeNamespaceResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ValidateGlobalizeNamespaceResponse)
	if !ok {
		that2, ok := that.(ValidateGlobalizeNamespaceResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Success != that1.Success {
		return false
	}
	if this.FailureReason != that1.FailureReason {
		return false
	}
	return true
}
func (this *ListReplicaStatusRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListReplicaStatusRequest)
	if !ok {
		that2, ok := that.(ListReplicaStatusRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.PageSize != that1.PageSize {
		return false
	}
	if !bytes.Equal(this.PageToken, that1.PageToken) {
		return false
	}
	return true
}
func (this *ListReplicaStatusResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListReplicaStatusResponse)
	if !ok {
		that2, ok := that.(ListReplicaStatusResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Statuses) != len(that1.Statuses) {
		return false
	}
	for i := range this.Statuses {
		if !this.Statuses[i].Equal(that1.Statuses[i]) {
			return false
		}
	}
	if !bytes.Equal(this.PageToken, that1.PageToken) {
		return false
	}
	return true
}
func (this *CreateNamespaceRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&namespaceservice.CreateNamespaceRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	if this.Spec != nil {
		s = append(s, "Spec: "+fmt.Sprintf("%#v", this.Spec)+",\n")
	}
	s = append(s, "RequestId: "+fmt.Sprintf("%#v", this.RequestId)+",\n")
	if this.UserNamespacePermissions != nil {
		s = append(s, "UserNamespacePermissions: "+fmt.Sprintf("%#v", this.UserNamespacePermissions)+",\n")
	}
	if this.IdentityNamespacePermissions != nil {
		s = append(s, "IdentityNamespacePermissions: "+fmt.Sprintf("%#v", this.IdentityNamespacePermissions)+",\n")
	}
	keysForTags := make([]string, 0, len(this.Tags))
	for k, _ := range this.Tags {
		keysForTags = append(keysForTags, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTags)
	mapStringForTags := "map[string]string{"
	for _, k := range keysForTags {
		mapStringForTags += fmt.Sprintf("%#v: %#v,", k, this.Tags[k])
	}
	mapStringForTags += "}"
	if this.Tags != nil {
		s = append(s, "Tags: "+mapStringForTags+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateNamespaceResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&namespaceservice.CreateNamespaceResponse{")
	if this.RequestStatus != nil {
		s = append(s, "RequestStatus: "+fmt.Sprintf("%#v", this.RequestStatus)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListNamespacesFilter) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&namespaceservice.ListNamespacesFilter{")
	s = append(s, "CloudProviders: "+fmt.Sprintf("%#v", this.CloudProviders)+",\n")
	s = append(s, "ConnectivityRuleId: "+fmt.Sprintf("%#v", this.ConnectivityRuleId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListNamespacesRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&namespaceservice.ListNamespacesRequest{")
	s = append(s, "PageSize: "+fmt.Sprintf("%#v", this.PageSize)+",\n")
	s = append(s, "PageToken: "+fmt.Sprintf("%#v", this.PageToken)+",\n")
	if this.Filter != nil {
		s = append(s, "Filter: "+fmt.Sprintf("%#v", this.Filter)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListNamespacesResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&namespaceservice.ListNamespacesResponse{")
	s = append(s, "Namespaces: "+fmt.Sprintf("%#v", this.Namespaces)+",\n")
	s = append(s, "NextPageToken: "+fmt.Sprintf("%#v", this.NextPageToken)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetNamespacesRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&namespaceservice.GetNamespacesRequest{")
	s = append(s, "PageSize: "+fmt.Sprintf("%#v", this.PageSize)+",\n")
	s = append(s, "PageToken: "+fmt.Sprintf("%#v", this.PageToken)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetNamespacesResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&namespaceservice.GetNamespacesResponse{")
	if this.Namespaces != nil {
		s = append(s, "Namespaces: "+fmt.Sprintf("%#v", this.Namespaces)+",\n")
	}
	s = append(s, "NextPageToken: "+fmt.Sprintf("%#v", this.NextPageToken)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetNamespaceRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&namespaceservice.GetNamespaceRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetNamespaceResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&namespaceservice.GetNamespaceResponse{")
	if this.Namespace != nil {
		s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateNamespaceRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&namespaceservice.UpdateNamespaceRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	if this.Spec != nil {
		s = append(s, "Spec: "+fmt.Sprintf("%#v", this.Spec)+",\n")
	}
	s = append(s, "ResourceVersion: "+fmt.Sprintf("%#v", this.ResourceVersion)+",\n")
	s = append(s, "RequestId: "+fmt.Sprintf("%#v", this.RequestId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateNamespaceResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&namespaceservice.UpdateNamespaceResponse{")
	if this.RequestStatus != nil {
		s = append(s, "RequestStatus: "+fmt.Sprintf("%#v", this.RequestStatus)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RenameCustomSearchAttributeRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&namespaceservice.RenameCustomSearchAttributeRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "ExistingCustomSearchAttributeName: "+fmt.Sprintf("%#v", this.ExistingCustomSearchAttributeName)+",\n")
	s = append(s, "NewCustomSearchAttributeName: "+fmt.Sprintf("%#v", this.NewCustomSearchAttributeName)+",\n")
	s = append(s, "ResourceVersion: "+fmt.Sprintf("%#v", this.ResourceVersion)+",\n")
	s = append(s, "RequestId: "+fmt.Sprintf("%#v", this.RequestId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RenameCustomSearchAttributeResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&namespaceservice.RenameCustomSearchAttributeResponse{")
	if this.RequestStatus != nil {
		s = append(s, "RequestStatus: "+fmt.Sprintf("%#v", this.RequestStatus)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteNamespaceRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&namespaceservice.DeleteNamespaceRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "ResourceVersion: "+fmt.Sprintf("%#v", this.ResourceVersion)+",\n")
	s = append(s, "RequestId: "+fmt.Sprintf("%#v", this.RequestId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteNamespaceResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&namespaceservice.DeleteNamespaceResponse{")
	if this.RequestStatus != nil {
		s = append(s, "RequestStatus: "+fmt.Sprintf("%#v", this.RequestStatus)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateExportSinkRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&namespaceservice.CreateExportSinkRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	if this.Spec != nil {
		s = append(s, "Spec: "+fmt.Sprintf("%#v", this.Spec)+",\n")
	}
	s = append(s, "RequestId: "+fmt.Sprintf("%#v", this.RequestId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateExportSinkResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&namespaceservice.CreateExportSinkResponse{")
	if this.RequestStatus != nil {
		s = append(s, "RequestStatus: "+fmt.Sprintf("%#v", this.RequestStatus)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetExportSinkRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&namespaceservice.GetExportSinkRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "SinkName: "+fmt.Sprintf("%#v", this.SinkName)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetExportSinkResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&namespaceservice.GetExportSinkResponse{")
	if this.Sink != nil {
		s = append(s, "Sink: "+fmt.Sprintf("%#v", this.Sink)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteExportSinkRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&namespaceservice.DeleteExportSinkRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "SinkName: "+fmt.Sprintf("%#v", this.SinkName)+",\n")
	s = append(s, "ResourceVersion: "+fmt.Sprintf("%#v", this.ResourceVersion)+",\n")
	s = append(s, "RequestId: "+fmt.Sprintf("%#v", this.RequestId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteExportSinkResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&namespaceservice.DeleteExportSinkResponse{")
	if this.RequestStatus != nil {
		s = append(s, "RequestStatus: "+fmt.Sprintf("%#v", this.RequestStatus)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateExportSinkRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&namespaceservice.UpdateExportSinkRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	if this.Spec != nil {
		s = append(s, "Spec: "+fmt.Sprintf("%#v", this.Spec)+",\n")
	}
	s = append(s, "ResourceVersion: "+fmt.Sprintf("%#v", this.ResourceVersion)+",\n")
	s = append(s, "RequestId: "+fmt.Sprintf("%#v", this.RequestId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateExportSinkResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&namespaceservice.UpdateExportSinkResponse{")
	if this.RequestStatus != nil {
		s = append(s, "RequestStatus: "+fmt.Sprintf("%#v", this.RequestStatus)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListExportSinksRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&namespaceservice.ListExportSinksRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "PageSize: "+fmt.Sprintf("%#v", this.PageSize)+",\n")
	s = append(s, "PageToken: "+fmt.Sprintf("%#v", this.PageToken)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListExportSinksResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&namespaceservice.ListExportSinksResponse{")
	s = append(s, "SinkNames: "+fmt.Sprintf("%#v", this.SinkNames)+",\n")
	s = append(s, "NextPageToken: "+fmt.Sprintf("%#v", this.NextPageToken)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetExportSinksRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&namespaceservice.GetExportSinksRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "PageSize: "+fmt.Sprintf("%#v", this.PageSize)+",\n")
	s = append(s, "PageToken: "+fmt.Sprintf("%#v", this.PageToken)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetExportSinksResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&namespaceservice.GetExportSinksResponse{")
	if this.Sinks != nil {
		s = append(s, "Sinks: "+fmt.Sprintf("%#v", this.Sinks)+",\n")
	}
	s = append(s, "NextPageToken: "+fmt.Sprintf("%#v", this.NextPageToken)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ValidateExportSinkRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&namespaceservice.ValidateExportSinkRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	if this.Spec != nil {
		s = append(s, "Spec: "+fmt.Sprintf("%#v", this.Spec)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ValidateExportSinkResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&namespaceservice.ValidateExportSinkResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FailoverNamespaceRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&namespaceservice.FailoverNamespaceRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "RequestId: "+fmt.Sprintf("%#v", this.RequestId)+",\n")
	if this.TargetRegion != nil {
		s = append(s, "TargetRegion: "+fmt.Sprintf("%#v", this.TargetRegion)+",\n")
	}
	s = append(s, "SkipGracefulFailover: "+fmt.Sprintf("%#v", this.SkipGracefulFailover)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FailoverNamespaceResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&namespaceservice.FailoverNamespaceResponse{")
	if this.RequestStatus != nil {
		s = append(s, "RequestStatus: "+fmt.Sprintf("%#v", this.RequestStatus)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplicationStatus) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&namespaceservice.ReplicationStatus{")
	if this.SourceRegion != nil {
		s = append(s, "SourceRegion: "+fmt.Sprintf("%#v", this.SourceRegion)+",\n")
	}
	if this.TargetRegion != nil {
		s = append(s, "TargetRegion: "+fmt.Sprintf("%#v", this.TargetRegion)+",\n")
	}
	if this.ReplicationLag != nil {
		s = append(s, "ReplicationLag: "+fmt.Sprintf("%#v", this.ReplicationLag)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListFailoverHistoryByNamespaceRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&namespaceservice.ListFailoverHistoryByNamespaceRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "PageSize: "+fmt.Sprintf("%#v", this.PageSize)+",\n")
	s = append(s, "NextPageToken: "+fmt.Sprintf("%#v", this.NextPageToken)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListFailoverHistoryByNamespaceResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&namespaceservice.ListFailoverHistoryByNamespaceResponse{")
	if this.FailoverHistory != nil {
		s = append(s, "FailoverHistory: "+fmt.Sprintf("%#v", this.FailoverHistory)+",\n")
	}
	s = append(s, "NextPageToken: "+fmt.Sprintf("%#v", this.NextPageToken)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FailoverRecord) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&namespaceservice.FailoverRecord{")
	s = append(s, "FailoverType: "+fmt.Sprintf("%#v", this.FailoverType)+",\n")
	if this.SourceRegion != nil {
		s = append(s, "SourceRegion: "+fmt.Sprintf("%#v", this.SourceRegion)+",\n")
	}
	if this.TargetRegion != nil {
		s = append(s, "TargetRegion: "+fmt.Sprintf("%#v", this.TargetRegion)+",\n")
	}
	if this.StartTimeUtc != nil {
		s = append(s, "StartTimeUtc: "+fmt.Sprintf("%#v", this.StartTimeUtc)+",\n")
	}
	if this.EndTimeUtc != nil {
		s = append(s, "EndTimeUtc: "+fmt.Sprintf("%#v", this.EndTimeUtc)+",\n")
	}
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "Operator: "+fmt.Sprintf("%#v", this.Operator)+",\n")
	s = append(s, "Reason: "+fmt.Sprintf("%#v", this.Reason)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalizeNamespaceRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&namespaceservice.GlobalizeNamespaceRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "RequestId: "+fmt.Sprintf("%#v", this.RequestId)+",\n")
	if this.TargetRegion != nil {
		s = append(s, "TargetRegion: "+fmt.Sprintf("%#v", this.TargetRegion)+",\n")
	}
	s = append(s, "ResourceVersion: "+fmt.Sprintf("%#v", this.ResourceVersion)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalizeNamespaceResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&namespaceservice.GlobalizeNamespaceResponse{")
	if this.RequestStatus != nil {
		s = append(s, "RequestStatus: "+fmt.Sprintf("%#v", this.RequestStatus)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ValidateGlobalizeNamespaceRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&namespaceservice.ValidateGlobalizeNamespaceRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ValidateGlobalizeNamespaceResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&namespaceservice.ValidateGlobalizeNamespaceResponse{")
	s = append(s, "Success: "+fmt.Sprintf("%#v", this.Success)+",\n")
	s = append(s, "FailureReason: "+fmt.Sprintf("%#v", this.FailureReason)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListReplicaStatusRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&namespaceservice.ListReplicaStatusRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "PageSize: "+fmt.Sprintf("%#v", this.PageSize)+",\n")
	s = append(s, "PageToken: "+fmt.Sprintf("%#v", this.PageToken)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListReplicaStatusResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&namespaceservice.ListReplicaStatusResponse{")
	if this.Statuses != nil {
		s = append(s, "Statuses: "+fmt.Sprintf("%#v", this.Statuses)+",\n")
	}
	s = append(s, "PageToken: "+fmt.Sprintf("%#v", this.PageToken)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringRequestResponse(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *CreateNamespaceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateNamespaceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateNamespaceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Tags) > 0 {
		for k := range m.Tags {
			v := m.Tags[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintRequestResponse(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintRequestResponse(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintRequestResponse(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.IdentityNamespacePermissions) > 0 {
		for iNdEx := len(m.IdentityNamespacePermissions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.IdentityNamespacePermissions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRequestResponse(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.UserNamespacePermissions) > 0 {
		for iNdEx := len(m.UserNamespacePermissions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UserNamespacePermissions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRequestResponse(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.RequestId) > 0 {
		i -= len(m.RequestId)
		copy(dAtA[i:], m.RequestId)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.RequestId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Spec != nil {
		{
			size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateNamespaceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateNamespaceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateNamespaceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RequestStatus != nil {
		{
			size, err := m.RequestStatus.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListNamespacesFilter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListNamespacesFilter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListNamespacesFilter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ConnectivityRuleId) > 0 {
		i -= len(m.ConnectivityRuleId)
		copy(dAtA[i:], m.ConnectivityRuleId)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.ConnectivityRuleId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CloudProviders) > 0 {
		dAtA4 := make([]byte, len(m.CloudProviders)*10)
		var j3 int
		for _, num := range m.CloudProviders {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintRequestResponse(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListNamespacesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListNamespacesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListNamespacesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Filter != nil {
		{
			size, err := m.Filter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PageToken) > 0 {
		i -= len(m.PageToken)
		copy(dAtA[i:], m.PageToken)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.PageToken)))
		i--
		dAtA[i] = 0x12
	}
	if m.PageSize != 0 {
		i = encodeVarintRequestResponse(dAtA, i, uint64(m.PageSize))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListNamespacesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListNamespacesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListNamespacesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NextPageToken) > 0 {
		i -= len(m.NextPageToken)
		copy(dAtA[i:], m.NextPageToken)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.NextPageToken)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespaces) > 0 {
		for iNdEx := len(m.Namespaces) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Namespaces[iNdEx])
			copy(dAtA[i:], m.Namespaces[iNdEx])
			i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.Namespaces[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetNamespacesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetNamespacesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetNamespacesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PageToken) > 0 {
		i -= len(m.PageToken)
		copy(dAtA[i:], m.PageToken)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.PageToken)))
		i--
		dAtA[i] = 0x12
	}
	if m.PageSize != 0 {
		i = encodeVarintRequestResponse(dAtA, i, uint64(m.PageSize))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetNamespacesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetNamespacesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetNamespacesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NextPageToken) > 0 {
		i -= len(m.NextPageToken)
		copy(dAtA[i:], m.NextPageToken)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.NextPageToken)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespaces) > 0 {
		for iNdEx := len(m.Namespaces) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Namespaces[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRequestResponse(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetNamespaceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetNamespaceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetNamespaceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetNamespaceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetNamespaceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetNamespaceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Namespace != nil {
		{
			size, err := m.Namespace.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateNamespaceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateNamespaceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateNamespaceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RequestId) > 0 {
		i -= len(m.RequestId)
		copy(dAtA[i:], m.RequestId)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.RequestId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ResourceVersion) > 0 {
		i -= len(m.ResourceVersion)
		copy(dAtA[i:], m.ResourceVersion)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.ResourceVersion)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Spec != nil {
		{
			size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateNamespaceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateNamespaceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateNamespaceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RequestStatus != nil {
		{
			size, err := m.RequestStatus.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RenameCustomSearchAttributeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RenameCustomSearchAttributeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RenameCustomSearchAttributeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RequestId) > 0 {
		i -= len(m.RequestId)
		copy(dAtA[i:], m.RequestId)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.RequestId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ResourceVersion) > 0 {
		i -= len(m.ResourceVersion)
		copy(dAtA[i:], m.ResourceVersion)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.ResourceVersion)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.NewCustomSearchAttributeName) > 0 {
		i -= len(m.NewCustomSearchAttributeName)
		copy(dAtA[i:], m.NewCustomSearchAttributeName)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.NewCustomSearchAttributeName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ExistingCustomSearchAttributeName) > 0 {
		i -= len(m.ExistingCustomSearchAttributeName)
		copy(dAtA[i:], m.ExistingCustomSearchAttributeName)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.ExistingCustomSearchAttributeName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RenameCustomSearchAttributeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RenameCustomSearchAttributeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RenameCustomSearchAttributeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RequestStatus != nil {
		{
			size, err := m.RequestStatus.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteNamespaceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteNamespaceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteNamespaceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RequestId) > 0 {
		i -= len(m.RequestId)
		copy(dAtA[i:], m.RequestId)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.RequestId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ResourceVersion) > 0 {
		i -= len(m.ResourceVersion)
		copy(dAtA[i:], m.ResourceVersion)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.ResourceVersion)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteNamespaceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteNamespaceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteNamespaceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RequestStatus != nil {
		{
			size, err := m.RequestStatus.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateExportSinkRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateExportSinkRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateExportSinkRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RequestId) > 0 {
		i -= len(m.RequestId)
		copy(dAtA[i:], m.RequestId)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.RequestId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Spec != nil {
		{
			size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateExportSinkResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateExportSinkResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateExportSinkResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RequestStatus != nil {
		{
			size, err := m.RequestStatus.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetExportSinkRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetExportSinkRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetExportSinkRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SinkName) > 0 {
		i -= len(m.SinkName)
		copy(dAtA[i:], m.SinkName)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.SinkName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetExportSinkResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetExportSinkResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetExportSinkResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Sink != nil {
		{
			size, err := m.Sink.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteExportSinkRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteExportSinkRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteExportSinkRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RequestId) > 0 {
		i -= len(m.RequestId)
		copy(dAtA[i:], m.RequestId)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.RequestId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ResourceVersion) > 0 {
		i -= len(m.ResourceVersion)
		copy(dAtA[i:], m.ResourceVersion)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.ResourceVersion)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SinkName) > 0 {
		i -= len(m.SinkName)
		copy(dAtA[i:], m.SinkName)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.SinkName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteExportSinkResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteExportSinkResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteExportSinkResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RequestStatus != nil {
		{
			size, err := m.RequestStatus.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateExportSinkRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateExportSinkRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateExportSinkRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RequestId) > 0 {
		i -= len(m.RequestId)
		copy(dAtA[i:], m.RequestId)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.RequestId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ResourceVersion) > 0 {
		i -= len(m.ResourceVersion)
		copy(dAtA[i:], m.ResourceVersion)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.ResourceVersion)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Spec != nil {
		{
			size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateExportSinkResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateExportSinkResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateExportSinkResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RequestStatus != nil {
		{
			size, err := m.RequestStatus.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListExportSinksRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListExportSinksRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListExportSinksRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PageToken) > 0 {
		i -= len(m.PageToken)
		copy(dAtA[i:], m.PageToken)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.PageToken)))
		i--
		dAtA[i] = 0x1a
	}
	if m.PageSize != 0 {
		i = encodeVarintRequestResponse(dAtA, i, uint64(m.PageSize))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListExportSinksResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListExportSinksResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListExportSinksResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NextPageToken) > 0 {
		i -= len(m.NextPageToken)
		copy(dAtA[i:], m.NextPageToken)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.NextPageToken)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SinkNames) > 0 {
		for iNdEx := len(m.SinkNames) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SinkNames[iNdEx])
			copy(dAtA[i:], m.SinkNames[iNdEx])
			i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.SinkNames[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetExportSinksRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetExportSinksRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetExportSinksRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PageToken) > 0 {
		i -= len(m.PageToken)
		copy(dAtA[i:], m.PageToken)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.PageToken)))
		i--
		dAtA[i] = 0x1a
	}
	if m.PageSize != 0 {
		i = encodeVarintRequestResponse(dAtA, i, uint64(m.PageSize))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetExportSinksResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetExportSinksResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetExportSinksResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NextPageToken) > 0 {
		i -= len(m.NextPageToken)
		copy(dAtA[i:], m.NextPageToken)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.NextPageToken)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sinks) > 0 {
		for iNdEx := len(m.Sinks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Sinks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRequestResponse(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ValidateExportSinkRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidateExportSinkRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidateExportSinkRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Spec != nil {
		{
			size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ValidateExportSinkResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidateExportSinkResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidateExportSinkResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *FailoverNamespaceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FailoverNamespaceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FailoverNamespaceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SkipGracefulFailover {
		i--
		if m.SkipGracefulFailover {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.TargetRegion != nil {
		{
			size, err := m.TargetRegion.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RequestId) > 0 {
		i -= len(m.RequestId)
		copy(dAtA[i:], m.RequestId)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.RequestId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FailoverNamespaceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FailoverNamespaceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FailoverNamespaceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RequestStatus != nil {
		{
			size, err := m.RequestStatus.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReplicationStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplicationStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplicationStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ReplicationLag != nil {
		{
			size, err := m.ReplicationLag.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.TargetRegion != nil {
		{
			size, err := m.TargetRegion.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.SourceRegion != nil {
		{
			size, err := m.SourceRegion.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListFailoverHistoryByNamespaceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListFailoverHistoryByNamespaceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListFailoverHistoryByNamespaceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NextPageToken) > 0 {
		i -= len(m.NextPageToken)
		copy(dAtA[i:], m.NextPageToken)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.NextPageToken)))
		i--
		dAtA[i] = 0x1a
	}
	if m.PageSize != 0 {
		i = encodeVarintRequestResponse(dAtA, i, uint64(m.PageSize))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListFailoverHistoryByNamespaceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListFailoverHistoryByNamespaceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListFailoverHistoryByNamespaceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NextPageToken) > 0 {
		i -= len(m.NextPageToken)
		copy(dAtA[i:], m.NextPageToken)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.NextPageToken)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FailoverHistory) > 0 {
		for iNdEx := len(m.FailoverHistory) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FailoverHistory[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRequestResponse(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *FailoverRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FailoverRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FailoverRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Operator) > 0 {
		i -= len(m.Operator)
		copy(dAtA[i:], m.Operator)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.Operator)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Status != 0 {
		i = encodeVarintRequestResponse(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x30
	}
	if m.EndTimeUtc != nil {
		{
			size, err := m.EndTimeUtc.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.StartTimeUtc != nil {
		{
			size, err := m.StartTimeUtc.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.TargetRegion != nil {
		{
			size, err := m.TargetRegion.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.SourceRegion != nil {
		{
			size, err := m.SourceRegion.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.FailoverType != 0 {
		i = encodeVarintRequestResponse(dAtA, i, uint64(m.FailoverType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GlobalizeNamespaceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalizeNamespaceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalizeNamespaceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ResourceVersion) > 0 {
		i -= len(m.ResourceVersion)
		copy(dAtA[i:], m.ResourceVersion)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.ResourceVersion)))
		i--
		dAtA[i] = 0x22
	}
	if m.TargetRegion != nil {
		{
			size, err := m.TargetRegion.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RequestId) > 0 {
		i -= len(m.RequestId)
		copy(dAtA[i:], m.RequestId)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.RequestId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GlobalizeNamespaceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalizeNamespaceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalizeNamespaceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RequestStatus != nil {
		{
			size, err := m.RequestStatus.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ValidateGlobalizeNamespaceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidateGlobalizeNamespaceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidateGlobalizeNamespaceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ValidateGlobalizeNamespaceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidateGlobalizeNamespaceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidateGlobalizeNamespaceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FailureReason) > 0 {
		i -= len(m.FailureReason)
		copy(dAtA[i:], m.FailureReason)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.FailureReason)))
		i--
		dAtA[i] = 0x12
	}
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListReplicaStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListReplicaStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListReplicaStatusRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PageToken) > 0 {
		i -= len(m.PageToken)
		copy(dAtA[i:], m.PageToken)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.PageToken)))
		i--
		dAtA[i] = 0x1a
	}
	if m.PageSize != 0 {
		i = encodeVarintRequestResponse(dAtA, i, uint64(m.PageSize))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListReplicaStatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListReplicaStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListReplicaStatusResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PageToken) > 0 {
		i -= len(m.PageToken)
		copy(dAtA[i:], m.PageToken)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.PageToken)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Statuses) > 0 {
		for iNdEx := len(m.Statuses) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Statuses[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRequestResponse(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintRequestResponse(dAtA []byte, offset int, v uint64) int {
	offset -= sovRequestResponse(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CreateNamespaceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.RequestId)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if len(m.UserNamespacePermissions) > 0 {
		for _, e := range m.UserNamespacePermissions {
			l = e.Size()
			n += 1 + l + sovRequestResponse(uint64(l))
		}
	}
	if len(m.IdentityNamespacePermissions) > 0 {
		for _, e := range m.IdentityNamespacePermissions {
			l = e.Size()
			n += 1 + l + sovRequestResponse(uint64(l))
		}
	}
	if len(m.Tags) > 0 {
		for k, v := range m.Tags {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovRequestResponse(uint64(len(k))) + 1 + len(v) + sovRequestResponse(uint64(len(v)))
			n += mapEntrySize + 1 + sovRequestResponse(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *CreateNamespaceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestStatus != nil {
		l = m.RequestStatus.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *ListNamespacesFilter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CloudProviders) > 0 {
		l = 0
		for _, e := range m.CloudProviders {
			l += sovRequestResponse(uint64(e))
		}
		n += 1 + sovRequestResponse(uint64(l)) + l
	}
	l = len(m.ConnectivityRuleId)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *ListNamespacesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PageSize != 0 {
		n += 1 + sovRequestResponse(uint64(m.PageSize))
	}
	l = len(m.PageToken)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.Filter != nil {
		l = m.Filter.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *ListNamespacesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Namespaces) > 0 {
		for _, s := range m.Namespaces {
			l = len(s)
			n += 1 + l + sovRequestResponse(uint64(l))
		}
	}
	l = len(m.NextPageToken)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *GetNamespacesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PageSize != 0 {
		n += 1 + sovRequestResponse(uint64(m.PageSize))
	}
	l = len(m.PageToken)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *GetNamespacesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Namespaces) > 0 {
		for _, e := range m.Namespaces {
			l = e.Size()
			n += 1 + l + sovRequestResponse(uint64(l))
		}
	}
	l = len(m.NextPageToken)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *GetNamespaceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *GetNamespaceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Namespace != nil {
		l = m.Namespace.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *UpdateNamespaceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.ResourceVersion)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.RequestId)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *UpdateNamespaceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestStatus != nil {
		l = m.RequestStatus.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *RenameCustomSearchAttributeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.ExistingCustomSearchAttributeName)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.NewCustomSearchAttributeName)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.ResourceVersion)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.RequestId)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *RenameCustomSearchAttributeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestStatus != nil {
		l = m.RequestStatus.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *DeleteNamespaceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.ResourceVersion)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.RequestId)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *DeleteNamespaceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestStatus != nil {
		l = m.RequestStatus.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *CreateExportSinkRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.RequestId)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *CreateExportSinkResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestStatus != nil {
		l = m.RequestStatus.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *GetExportSinkRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.SinkName)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *GetExportSinkResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sink != nil {
		l = m.Sink.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *DeleteExportSinkRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.SinkName)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.ResourceVersion)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.RequestId)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *DeleteExportSinkResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestStatus != nil {
		l = m.RequestStatus.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *UpdateExportSinkRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.ResourceVersion)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.RequestId)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *UpdateExportSinkResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestStatus != nil {
		l = m.RequestStatus.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *ListExportSinksRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.PageSize != 0 {
		n += 1 + sovRequestResponse(uint64(m.PageSize))
	}
	l = len(m.PageToken)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *ListExportSinksResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SinkNames) > 0 {
		for _, s := range m.SinkNames {
			l = len(s)
			n += 1 + l + sovRequestResponse(uint64(l))
		}
	}
	l = len(m.NextPageToken)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *GetExportSinksRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.PageSize != 0 {
		n += 1 + sovRequestResponse(uint64(m.PageSize))
	}
	l = len(m.PageToken)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *GetExportSinksResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Sinks) > 0 {
		for _, e := range m.Sinks {
			l = e.Size()
			n += 1 + l + sovRequestResponse(uint64(l))
		}
	}
	l = len(m.NextPageToken)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *ValidateExportSinkRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *ValidateExportSinkResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *FailoverNamespaceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.RequestId)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.TargetRegion != nil {
		l = m.TargetRegion.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.SkipGracefulFailover {
		n += 2
	}
	return n
}

func (m *FailoverNamespaceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestStatus != nil {
		l = m.RequestStatus.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *ReplicationStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SourceRegion != nil {
		l = m.SourceRegion.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.TargetRegion != nil {
		l = m.TargetRegion.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.ReplicationLag != nil {
		l = m.ReplicationLag.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *ListFailoverHistoryByNamespaceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.PageSize != 0 {
		n += 1 + sovRequestResponse(uint64(m.PageSize))
	}
	l = len(m.NextPageToken)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *ListFailoverHistoryByNamespaceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.FailoverHistory) > 0 {
		for _, e := range m.FailoverHistory {
			l = e.Size()
			n += 1 + l + sovRequestResponse(uint64(l))
		}
	}
	l = len(m.NextPageToken)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *FailoverRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FailoverType != 0 {
		n += 1 + sovRequestResponse(uint64(m.FailoverType))
	}
	if m.SourceRegion != nil {
		l = m.SourceRegion.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.TargetRegion != nil {
		l = m.TargetRegion.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.StartTimeUtc != nil {
		l = m.StartTimeUtc.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.EndTimeUtc != nil {
		l = m.EndTimeUtc.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovRequestResponse(uint64(m.Status))
	}
	l = len(m.Operator)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *GlobalizeNamespaceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.RequestId)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.TargetRegion != nil {
		l = m.TargetRegion.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.ResourceVersion)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *GlobalizeNamespaceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestStatus != nil {
		l = m.RequestStatus.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *ValidateGlobalizeNamespaceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *ValidateGlobalizeNamespaceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	l = len(m.FailureReason)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *ListReplicaStatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.PageSize != 0 {
		n += 1 + sovRequestResponse(uint64(m.PageSize))
	}
	l = len(m.PageToken)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *ListReplicaStatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Statuses) > 0 {
		for _, e := range m.Statuses {
			l = e.Size()
			n += 1 + l + sovRequestResponse(uint64(l))
		}
	}
	l = len(m.PageToken)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func sovRequestResponse(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRequestResponse(x uint64) (n int) {
	return sovRequestResponse(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *CreateNamespaceRequest) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForUserNamespacePermissions := "[]*UserNamespacePermissions{"
	for _, f := range this.UserNamespacePermissions {
		repeatedStringForUserNamespacePermissions += strings.Replace(fmt.Sprintf("%v", f), "UserNamespacePermissions", "v11.UserNamespacePermissions", 1) + ","
	}
	repeatedStringForUserNamespacePermissions += "}"
	repeatedStringForIdentityNamespacePermissions := "[]*IdentityNamespacePermissions{"
	for _, f := range this.IdentityNamespacePermissions {
		repeatedStringForIdentityNamespacePermissions += strings.Replace(fmt.Sprintf("%v", f), "IdentityNamespacePermissions", "v11.IdentityNamespacePermissions", 1) + ","
	}
	repeatedStringForIdentityNamespacePermissions += "}"
	keysForTags := make([]string, 0, len(this.Tags))
	for k, _ := range this.Tags {
		keysForTags = append(keysForTags, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTags)
	mapStringForTags := "map[string]string{"
	for _, k := range keysForTags {
		mapStringForTags += fmt.Sprintf("%v: %v,", k, this.Tags[k])
	}
	mapStringForTags += "}"
	s := strings.Join([]string{`&CreateNamespaceRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Spec:` + strings.Replace(fmt.Sprintf("%v", this.Spec), "NamespaceSpec", "v1.NamespaceSpec", 1) + `,`,
		`RequestId:` + fmt.Sprintf("%v", this.RequestId) + `,`,
		`UserNamespacePermissions:` + repeatedStringForUserNamespacePermissions + `,`,
		`IdentityNamespacePermissions:` + repeatedStringForIdentityNamespacePermissions + `,`,
		`Tags:` + mapStringForTags + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateNamespaceResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateNamespaceResponse{`,
		`RequestStatus:` + strings.Replace(fmt.Sprintf("%v", this.RequestStatus), "RequestStatus", "v12.RequestStatus", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListNamespacesFilter) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListNamespacesFilter{`,
		`CloudProviders:` + fmt.Sprintf("%v", this.CloudProviders) + `,`,
		`ConnectivityRuleId:` + fmt.Sprintf("%v", this.ConnectivityRuleId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListNamespacesRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListNamespacesRequest{`,
		`PageSize:` + fmt.Sprintf("%v", this.PageSize) + `,`,
		`PageToken:` + fmt.Sprintf("%v", this.PageToken) + `,`,
		`Filter:` + strings.Replace(this.Filter.String(), "ListNamespacesFilter", "ListNamespacesFilter", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListNamespacesResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListNamespacesResponse{`,
		`Namespaces:` + fmt.Sprintf("%v", this.Namespaces) + `,`,
		`NextPageToken:` + fmt.Sprintf("%v", this.NextPageToken) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetNamespacesRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetNamespacesRequest{`,
		`PageSize:` + fmt.Sprintf("%v", this.PageSize) + `,`,
		`PageToken:` + fmt.Sprintf("%v", this.PageToken) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetNamespacesResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForNamespaces := "[]*Namespace{"
	for _, f := range this.Namespaces {
		repeatedStringForNamespaces += strings.Replace(fmt.Sprintf("%v", f), "Namespace", "v1.Namespace", 1) + ","
	}
	repeatedStringForNamespaces += "}"
	s := strings.Join([]string{`&GetNamespacesResponse{`,
		`Namespaces:` + repeatedStringForNamespaces + `,`,
		`NextPageToken:` + fmt.Sprintf("%v", this.NextPageToken) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetNamespaceRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetNamespaceRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetNamespaceResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetNamespaceResponse{`,
		`Namespace:` + strings.Replace(fmt.Sprintf("%v", this.Namespace), "Namespace", "v1.Namespace", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateNamespaceRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateNamespaceRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Spec:` + strings.Replace(fmt.Sprintf("%v", this.Spec), "NamespaceSpec", "v1.NamespaceSpec", 1) + `,`,
		`ResourceVersion:` + fmt.Sprintf("%v", this.ResourceVersion) + `,`,
		`RequestId:` + fmt.Sprintf("%v", this.RequestId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateNamespaceResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateNamespaceResponse{`,
		`RequestStatus:` + strings.Replace(fmt.Sprintf("%v", this.RequestStatus), "RequestStatus", "v12.RequestStatus", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RenameCustomSearchAttributeRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RenameCustomSearchAttributeRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`ExistingCustomSearchAttributeName:` + fmt.Sprintf("%v", this.ExistingCustomSearchAttributeName) + `,`,
		`NewCustomSearchAttributeName:` + fmt.Sprintf("%v", this.NewCustomSearchAttributeName) + `,`,
		`ResourceVersion:` + fmt.Sprintf("%v", this.ResourceVersion) + `,`,
		`RequestId:` + fmt.Sprintf("%v", this.RequestId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RenameCustomSearchAttributeResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RenameCustomSearchAttributeResponse{`,
		`RequestStatus:` + strings.Replace(fmt.Sprintf("%v", this.RequestStatus), "RequestStatus", "v12.RequestStatus", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteNamespaceRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteNamespaceRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`ResourceVersion:` + fmt.Sprintf("%v", this.ResourceVersion) + `,`,
		`RequestId:` + fmt.Sprintf("%v", this.RequestId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteNamespaceResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteNamespaceResponse{`,
		`RequestStatus:` + strings.Replace(fmt.Sprintf("%v", this.RequestStatus), "RequestStatus", "v12.RequestStatus", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateExportSinkRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateExportSinkRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Spec:` + strings.Replace(fmt.Sprintf("%v", this.Spec), "ExportSinkSpec", "v14.ExportSinkSpec", 1) + `,`,
		`RequestId:` + fmt.Sprintf("%v", this.RequestId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateExportSinkResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateExportSinkResponse{`,
		`RequestStatus:` + strings.Replace(fmt.Sprintf("%v", this.RequestStatus), "RequestStatus", "v12.RequestStatus", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetExportSinkRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetExportSinkRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`SinkName:` + fmt.Sprintf("%v", this.SinkName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetExportSinkResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetExportSinkResponse{`,
		`Sink:` + strings.Replace(fmt.Sprintf("%v", this.Sink), "ExportSink", "v14.ExportSink", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteExportSinkRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteExportSinkRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`SinkName:` + fmt.Sprintf("%v", this.SinkName) + `,`,
		`ResourceVersion:` + fmt.Sprintf("%v", this.ResourceVersion) + `,`,
		`RequestId:` + fmt.Sprintf("%v", this.RequestId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteExportSinkResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteExportSinkResponse{`,
		`RequestStatus:` + strings.Replace(fmt.Sprintf("%v", this.RequestStatus), "RequestStatus", "v12.RequestStatus", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateExportSinkRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateExportSinkRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Spec:` + strings.Replace(fmt.Sprintf("%v", this.Spec), "ExportSinkSpec", "v14.ExportSinkSpec", 1) + `,`,
		`ResourceVersion:` + fmt.Sprintf("%v", this.ResourceVersion) + `,`,
		`RequestId:` + fmt.Sprintf("%v", this.RequestId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateExportSinkResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateExportSinkResponse{`,
		`RequestStatus:` + strings.Replace(fmt.Sprintf("%v", this.RequestStatus), "RequestStatus", "v12.RequestStatus", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListExportSinksRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListExportSinksRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`PageSize:` + fmt.Sprintf("%v", this.PageSize) + `,`,
		`PageToken:` + fmt.Sprintf("%v", this.PageToken) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListExportSinksResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListExportSinksResponse{`,
		`SinkNames:` + fmt.Sprintf("%v", this.SinkNames) + `,`,
		`NextPageToken:` + fmt.Sprintf("%v", this.NextPageToken) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetExportSinksRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetExportSinksRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`PageSize:` + fmt.Sprintf("%v", this.PageSize) + `,`,
		`PageToken:` + fmt.Sprintf("%v", this.PageToken) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetExportSinksResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForSinks := "[]*ExportSink{"
	for _, f := range this.Sinks {
		repeatedStringForSinks += strings.Replace(fmt.Sprintf("%v", f), "ExportSink", "v14.ExportSink", 1) + ","
	}
	repeatedStringForSinks += "}"
	s := strings.Join([]string{`&GetExportSinksResponse{`,
		`Sinks:` + repeatedStringForSinks + `,`,
		`NextPageToken:` + fmt.Sprintf("%v", this.NextPageToken) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ValidateExportSinkRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ValidateExportSinkRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Spec:` + strings.Replace(fmt.Sprintf("%v", this.Spec), "ExportSinkSpec", "v14.ExportSinkSpec", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ValidateExportSinkResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ValidateExportSinkResponse{`,
		`}`,
	}, "")
	return s
}
func (this *FailoverNamespaceRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FailoverNamespaceRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`RequestId:` + fmt.Sprintf("%v", this.RequestId) + `,`,
		`TargetRegion:` + strings.Replace(fmt.Sprintf("%v", this.TargetRegion), "RegionID", "v13.RegionID", 1) + `,`,
		`SkipGracefulFailover:` + fmt.Sprintf("%v", this.SkipGracefulFailover) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FailoverNamespaceResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FailoverNamespaceResponse{`,
		`RequestStatus:` + strings.Replace(fmt.Sprintf("%v", this.RequestStatus), "RequestStatus", "v12.RequestStatus", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplicationStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplicationStatus{`,
		`SourceRegion:` + strings.Replace(fmt.Sprintf("%v", this.SourceRegion), "RegionID", "v13.RegionID", 1) + `,`,
		`TargetRegion:` + strings.Replace(fmt.Sprintf("%v", this.TargetRegion), "RegionID", "v13.RegionID", 1) + `,`,
		`ReplicationLag:` + strings.Replace(fmt.Sprintf("%v", this.ReplicationLag), "Duration", "types.Duration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListFailoverHistoryByNamespaceRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListFailoverHistoryByNamespaceRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`PageSize:` + fmt.Sprintf("%v", this.PageSize) + `,`,
		`NextPageToken:` + fmt.Sprintf("%v", this.NextPageToken) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListFailoverHistoryByNamespaceResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForFailoverHistory := "[]*FailoverRecord{"
	for _, f := range this.FailoverHistory {
		repeatedStringForFailoverHistory += strings.Replace(f.String(), "FailoverRecord", "FailoverRecord", 1) + ","
	}
	repeatedStringForFailoverHistory += "}"
	s := strings.Join([]string{`&ListFailoverHistoryByNamespaceResponse{`,
		`FailoverHistory:` + repeatedStringForFailoverHistory + `,`,
		`NextPageToken:` + fmt.Sprintf("%v", this.NextPageToken) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FailoverRecord) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FailoverRecord{`,
		`FailoverType:` + fmt.Sprintf("%v", this.FailoverType) + `,`,
		`SourceRegion:` + strings.Replace(fmt.Sprintf("%v", this.SourceRegion), "RegionID", "v13.RegionID", 1) + `,`,
		`TargetRegion:` + strings.Replace(fmt.Sprintf("%v", this.TargetRegion), "RegionID", "v13.RegionID", 1) + `,`,
		`StartTimeUtc:` + strings.Replace(fmt.Sprintf("%v", this.StartTimeUtc), "Timestamp", "types.Timestamp", 1) + `,`,
		`EndTimeUtc:` + strings.Replace(fmt.Sprintf("%v", this.EndTimeUtc), "Timestamp", "types.Timestamp", 1) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`Operator:` + fmt.Sprintf("%v", this.Operator) + `,`,
		`Reason:` + fmt.Sprintf("%v", this.Reason) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalizeNamespaceRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalizeNamespaceRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`RequestId:` + fmt.Sprintf("%v", this.RequestId) + `,`,
		`TargetRegion:` + strings.Replace(fmt.Sprintf("%v", this.TargetRegion), "RegionID", "v13.RegionID", 1) + `,`,
		`ResourceVersion:` + fmt.Sprintf("%v", this.ResourceVersion) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalizeNamespaceResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalizeNamespaceResponse{`,
		`RequestStatus:` + strings.Replace(fmt.Sprintf("%v", this.RequestStatus), "RequestStatus", "v12.RequestStatus", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ValidateGlobalizeNamespaceRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ValidateGlobalizeNamespaceRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ValidateGlobalizeNamespaceResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ValidateGlobalizeNamespaceResponse{`,
		`Success:` + fmt.Sprintf("%v", this.Success) + `,`,
		`FailureReason:` + fmt.Sprintf("%v", this.FailureReason) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListReplicaStatusRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListReplicaStatusRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`PageSize:` + fmt.Sprintf("%v", this.PageSize) + `,`,
		`PageToken:` + fmt.Sprintf("%v", this.PageToken) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListReplicaStatusResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForStatuses := "[]*ReplicaStatus{"
	for _, f := range this.Statuses {
		repeatedStringForStatuses += strings.Replace(fmt.Sprintf("%v", f), "ReplicaStatus", "v13.ReplicaStatus", 1) + ","
	}
	repeatedStringForStatuses += "}"
	s := strings.Join([]string{`&ListReplicaStatusResponse{`,
		`Statuses:` + repeatedStringForStatuses + `,`,
		`PageToken:` + fmt.Sprintf("%v", this.PageToken) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringRequestResponse(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *CreateNamespaceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateNamespaceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateNamespaceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &v1.NamespaceSpec{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserNamespacePermissions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserNamespacePermissions = append(m.UserNamespacePermissions, &v11.UserNamespacePermissions{})
			if err := m.UserNamespacePermissions[len(m.UserNamespacePermissions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdentityNamespacePermissions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IdentityNamespacePermissions = append(m.IdentityNamespacePermissions, &v11.IdentityNamespacePermissions{})
			if err := m.IdentityNamespacePermissions[len(m.IdentityNamespacePermissions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tags == nil {
				m.Tags = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRequestResponse
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRequestResponse
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthRequestResponse
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthRequestResponse
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRequestResponse
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthRequestResponse
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthRequestResponse
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipRequestResponse(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthRequestResponse
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Tags[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateNamespaceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateNamespaceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateNamespaceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RequestStatus == nil {
				m.RequestStatus = &v12.RequestStatus{}
			}
			if err := m.RequestStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListNamespacesFilter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListNamespacesFilter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListNamespacesFilter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v v13.RegionID_CloudProvider
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRequestResponse
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= v13.RegionID_CloudProvider(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.CloudProviders = append(m.CloudProviders, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRequestResponse
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRequestResponse
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthRequestResponse
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.CloudProviders) == 0 {
					m.CloudProviders = make([]v13.RegionID_CloudProvider, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v v13.RegionID_CloudProvider
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRequestResponse
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= v13.RegionID_CloudProvider(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.CloudProviders = append(m.CloudProviders, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field CloudProviders", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectivityRuleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectivityRuleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListNamespacesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListNamespacesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListNamespacesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PageToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Filter == nil {
				m.Filter = &ListNamespacesFilter{}
			}
			if err := m.Filter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListNamespacesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListNamespacesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListNamespacesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespaces", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespaces = append(m.Namespaces, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextPageToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NextPageToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetNamespacesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetNamespacesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetNamespacesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PageToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetNamespacesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetNamespacesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetNamespacesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespaces", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespaces = append(m.Namespaces, &v1.Namespace{})
			if err := m.Namespaces[len(m.Namespaces)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextPageToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NextPageToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetNamespaceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetNamespaceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetNamespaceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetNamespaceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetNamespaceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetNamespaceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Namespace == nil {
				m.Namespace = &v1.Namespace{}
			}
			if err := m.Namespace.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateNamespaceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateNamespaceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateNamespaceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &v1.NamespaceSpec{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateNamespaceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateNamespaceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateNamespaceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RequestStatus == nil {
				m.RequestStatus = &v12.RequestStatus{}
			}
			if err := m.RequestStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RenameCustomSearchAttributeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RenameCustomSearchAttributeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RenameCustomSearchAttributeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExistingCustomSearchAttributeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExistingCustomSearchAttributeName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewCustomSearchAttributeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewCustomSearchAttributeName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RenameCustomSearchAttributeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RenameCustomSearchAttributeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RenameCustomSearchAttributeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RequestStatus == nil {
				m.RequestStatus = &v12.RequestStatus{}
			}
			if err := m.RequestStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteNamespaceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteNamespaceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteNamespaceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteNamespaceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteNamespaceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteNamespaceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RequestStatus == nil {
				m.RequestStatus = &v12.RequestStatus{}
			}
			if err := m.RequestStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateExportSinkRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateExportSinkRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateExportSinkRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &v14.ExportSinkSpec{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateExportSinkResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateExportSinkResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateExportSinkResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RequestStatus == nil {
				m.RequestStatus = &v12.RequestStatus{}
			}
			if err := m.RequestStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetExportSinkRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetExportSinkRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetExportSinkRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SinkName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SinkName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetExportSinkResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetExportSinkResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetExportSinkResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sink", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sink == nil {
				m.Sink = &v14.ExportSink{}
			}
			if err := m.Sink.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteExportSinkRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteExportSinkRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteExportSinkRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SinkName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SinkName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteExportSinkResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteExportSinkResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteExportSinkResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RequestStatus == nil {
				m.RequestStatus = &v12.RequestStatus{}
			}
			if err := m.RequestStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateExportSinkRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateExportSinkRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateExportSinkRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &v14.ExportSinkSpec{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateExportSinkResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateExportSinkResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateExportSinkResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RequestStatus == nil {
				m.RequestStatus = &v12.RequestStatus{}
			}
			if err := m.RequestStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListExportSinksRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListExportSinksRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListExportSinksRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PageToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListExportSinksResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListExportSinksResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListExportSinksResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SinkNames", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SinkNames = append(m.SinkNames, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextPageToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NextPageToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetExportSinksRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetExportSinksRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetExportSinksRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PageToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetExportSinksResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetExportSinksResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetExportSinksResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sinks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sinks = append(m.Sinks, &v14.ExportSink{})
			if err := m.Sinks[len(m.Sinks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextPageToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NextPageToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidateExportSinkRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidateExportSinkRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidateExportSinkRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &v14.ExportSinkSpec{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidateExportSinkResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidateExportSinkResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidateExportSinkResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FailoverNamespaceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FailoverNamespaceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FailoverNamespaceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetRegion", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TargetRegion == nil {
				m.TargetRegion = &v13.RegionID{}
			}
			if err := m.TargetRegion.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkipGracefulFailover", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SkipGracefulFailover = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FailoverNamespaceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FailoverNamespaceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FailoverNamespaceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RequestStatus == nil {
				m.RequestStatus = &v12.RequestStatus{}
			}
			if err := m.RequestStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplicationStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplicationStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplicationStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceRegion", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SourceRegion == nil {
				m.SourceRegion = &v13.RegionID{}
			}
			if err := m.SourceRegion.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetRegion", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TargetRegion == nil {
				m.TargetRegion = &v13.RegionID{}
			}
			if err := m.TargetRegion.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicationLag", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReplicationLag == nil {
				m.ReplicationLag = &types.Duration{}
			}
			if err := m.ReplicationLag.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListFailoverHistoryByNamespaceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListFailoverHistoryByNamespaceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListFailoverHistoryByNamespaceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextPageToken", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NextPageToken = append(m.NextPageToken[:0], dAtA[iNdEx:postIndex]...)
			if m.NextPageToken == nil {
				m.NextPageToken = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListFailoverHistoryByNamespaceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListFailoverHistoryByNamespaceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListFailoverHistoryByNamespaceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailoverHistory", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FailoverHistory = append(m.FailoverHistory, &FailoverRecord{})
			if err := m.FailoverHistory[len(m.FailoverHistory)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextPageToken", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NextPageToken = append(m.NextPageToken[:0], dAtA[iNdEx:postIndex]...)
			if m.NextPageToken == nil {
				m.NextPageToken = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FailoverRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FailoverRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FailoverRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailoverType", wireType)
			}
			m.FailoverType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FailoverType |= v13.FailoverType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceRegion", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SourceRegion == nil {
				m.SourceRegion = &v13.RegionID{}
			}
			if err := m.SourceRegion.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetRegion", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TargetRegion == nil {
				m.TargetRegion = &v13.RegionID{}
			}
			if err := m.TargetRegion.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTimeUtc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartTimeUtc == nil {
				m.StartTimeUtc = &types.Timestamp{}
			}
			if err := m.StartTimeUtc.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTimeUtc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EndTimeUtc == nil {
				m.EndTimeUtc = &types.Timestamp{}
			}
			if err := m.EndTimeUtc.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= v13.FailoverStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalizeNamespaceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalizeNamespaceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalizeNamespaceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetRegion", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TargetRegion == nil {
				m.TargetRegion = &v13.RegionID{}
			}
			if err := m.TargetRegion.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalizeNamespaceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalizeNamespaceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalizeNamespaceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RequestStatus == nil {
				m.RequestStatus = &v12.RequestStatus{}
			}
			if err := m.RequestStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidateGlobalizeNamespaceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidateGlobalizeNamespaceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidateGlobalizeNamespaceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidateGlobalizeNamespaceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidateGlobalizeNamespaceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidateGlobalizeNamespaceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailureReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FailureReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListReplicaStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListReplicaStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListReplicaStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageToken", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PageToken = append(m.PageToken[:0], dAtA[iNdEx:postIndex]...)
			if m.PageToken == nil {
				m.PageToken = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListReplicaStatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListReplicaStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListReplicaStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Statuses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Statuses = append(m.Statuses, &v13.ReplicaStatus{})
			if err := m.Statuses[len(m.Statuses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageToken", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PageToken = append(m.PageToken[:0], dAtA[iNdEx:postIndex]...)
			if m.PageToken == nil {
				m.PageToken = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRequestResponse(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRequestResponse
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRequestResponse
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRequestResponse
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRequestResponse        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRequestResponse          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRequestResponse = fmt.Errorf("proto: unexpected end of group")
)
