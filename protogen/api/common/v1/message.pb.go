// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/common/v1/message.proto

package common

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type FailoverType int32

const (
	FAILOVER_TYPE_UNSPECIFIED FailoverType = 0
	FAILOVER_TYPE_GRACEFUL    FailoverType = 1
	FAILOVER_TYPE_FORCE       FailoverType = 2
)

var FailoverType_name = map[int32]string{
	0: "Unspecified",
	1: "Graceful",
	2: "Force",
}

var FailoverType_value = map[string]int32{
	"Unspecified": 0,
	"Graceful":    1,
	"Force":       2,
}

func (FailoverType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_df4c2c740e1454e5, []int{0}
}

type FailoverStatus int32

const (
	FAILOVER_STATUS_UNSPECIFIED FailoverStatus = 0
	FAILOVER_STATUS_SUCCEEDED   FailoverStatus = 1
	FAILOVER_STATUS_FAILED      FailoverStatus = 2
)

var FailoverStatus_name = map[int32]string{
	0: "Unspecified",
	1: "Succeeded",
	2: "Failed",
}

var FailoverStatus_value = map[string]int32{
	"Unspecified": 0,
	"Succeeded":   1,
	"Failed":      2,
}

func (FailoverStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_df4c2c740e1454e5, []int{1}
}

type ReplicaState int32

const (
	REPLICA_STATE_UNSPECIFIED          ReplicaState = 0
	REPLICA_STATE_ACTIVATING           ReplicaState = 1
	REPLICA_STATE_ACTIVATION_FAILED    ReplicaState = 2
	REPLICA_STATE_ACTIVATED            ReplicaState = 3
	REPLICA_STATE_DEACTIVATING         ReplicaState = 4
	REPLICA_STATE_DEACTIVATION_FAILED  ReplicaState = 5
	REPLICA_STATE_DEACTIVATED          ReplicaState = 6
	REPLICA_STATE_FAILOVER_IN_PROGRESS ReplicaState = 7
	REPLICA_STATE_FAILOVER_FAILED      ReplicaState = 8
)

var ReplicaState_name = map[int32]string{
	0: "Unspecified",
	1: "Activating",
	2: "ActivationFailed",
	3: "Activated",
	4: "Deactivating",
	5: "DeactivationFailed",
	6: "Deactivated",
	7: "FailoverInProgress",
	8: "FailoverFailed",
}

var ReplicaState_value = map[string]int32{
	"Unspecified":        0,
	"Activating":         1,
	"ActivationFailed":   2,
	"Activated":          3,
	"Deactivating":       4,
	"DeactivationFailed": 5,
	"Deactivated":        6,
	"FailoverInProgress": 7,
	"FailoverFailed":     8,
}

func (ReplicaState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_df4c2c740e1454e5, []int{2}
}

type ReplicaMode int32

const (
	REPLICA_MODE_UNSPECIFIED ReplicaMode = 0
	REPLICA_MODE_ACTIVE      ReplicaMode = 1
	REPLICA_MODE_PASSIVE     ReplicaMode = 2
)

var ReplicaMode_name = map[int32]string{
	0: "Unspecified",
	1: "Active",
	2: "Passive",
}

var ReplicaMode_value = map[string]int32{
	"Unspecified": 0,
	"Active":      1,
	"Passive":     2,
}

func (ReplicaMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_df4c2c740e1454e5, []int{3}
}

type RegionID_CloudProvider int32

const (
	CLOUD_PROVIDER_UNSPECIFIED RegionID_CloudProvider = 0
	CLOUD_PROVIDER_AWS         RegionID_CloudProvider = 1
	CLOUD_PROVIDER_GCP         RegionID_CloudProvider = 2
)

var RegionID_CloudProvider_name = map[int32]string{
	0: "CloudProviderUnspecified",
	1: "CloudProviderAws",
	2: "CloudProviderGcp",
}

var RegionID_CloudProvider_value = map[string]int32{
	"CloudProviderUnspecified": 0,
	"CloudProviderAws":         1,
	"CloudProviderGcp":         2,
}

func (RegionID_CloudProvider) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_df4c2c740e1454e5, []int{1, 0}
}

// (-- api-linter: core::0123::resource-annotation=disabled --)
type Region struct {
	// E.g., aws, gcp, azure.
	CloudProvider string `protobuf:"bytes,1,opt,name=cloud_provider,json=cloudProvider,proto3" json:"cloud_provider,omitempty"` // Deprecated: Do not use.
	// Cloud-specific region name. E.g., us-west-2 for AWS and europe-west1 for GCP.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"` // Deprecated: Do not use.
	// The flag indicates if the region supports global namespace.
	SupportGlobalNamespace bool `protobuf:"varint,3,opt,name=support_global_namespace,json=supportGlobalNamespace,proto3" json:"support_global_namespace,omitempty"` // Deprecated: Do not use.
	// The allow list of connection between the current region with a target region.
	ConnectableRegions []*RegionID `protobuf:"bytes,4,rep,name=connectable_regions,json=connectableRegions,proto3" json:"connectable_regions,omitempty"`
	// Region id including cloud provider and region name.
	RegionId *RegionID `protobuf:"bytes,5,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
}

func (m *Region) Reset()      { *m = Region{} }
func (*Region) ProtoMessage() {}
func (*Region) Descriptor() ([]byte, []int) {
	return fileDescriptor_df4c2c740e1454e5, []int{0}
}
func (m *Region) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Region) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Region.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Region) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Region.Merge(m, src)
}
func (m *Region) XXX_Size() int {
	return m.Size()
}
func (m *Region) XXX_DiscardUnknown() {
	xxx_messageInfo_Region.DiscardUnknown(m)
}

var xxx_messageInfo_Region proto.InternalMessageInfo

func (m *Region) GetCloudProvider() string {
	if m != nil {
		return m.CloudProvider
	}
	return ""
}

func (m *Region) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Deprecated: Do not use.
func (m *Region) GetSupportGlobalNamespace() bool {
	if m != nil {
		return m.SupportGlobalNamespace
	}
	return false
}

func (m *Region) GetConnectableRegions() []*RegionID {
	if m != nil {
		return m.ConnectableRegions
	}
	return nil
}

func (m *Region) GetRegionId() *RegionID {
	if m != nil {
		return m.RegionId
	}
	return nil
}

type RegionID struct {
	// E.g., aws, gcp, azure.
	CloudProvider string `protobuf:"bytes,1,opt,name=cloud_provider,json=cloudProvider,proto3" json:"cloud_provider,omitempty"` // Deprecated: Do not use.
	// Cloud-specific region name. E.g., us-west-2 for AWS and europe-west1 for GCP.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Enum of the provider, we may use this to replace the string field. E.g. aws, gcp, azure
	// temporal:enums:replaces=cloud_provider
	Provider RegionID_CloudProvider `protobuf:"varint,3,opt,name=provider,proto3,enum=api.common.v1.RegionID_CloudProvider" json:"provider,omitempty"`
}

func (m *RegionID) Reset()      { *m = RegionID{} }
func (*RegionID) ProtoMessage() {}
func (*RegionID) Descriptor() ([]byte, []int) {
	return fileDescriptor_df4c2c740e1454e5, []int{1}
}
func (m *RegionID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegionID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegionID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegionID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegionID.Merge(m, src)
}
func (m *RegionID) XXX_Size() int {
	return m.Size()
}
func (m *RegionID) XXX_DiscardUnknown() {
	xxx_messageInfo_RegionID.DiscardUnknown(m)
}

var xxx_messageInfo_RegionID proto.InternalMessageInfo

// Deprecated: Do not use.
func (m *RegionID) GetCloudProvider() string {
	if m != nil {
		return m.CloudProvider
	}
	return ""
}

func (m *RegionID) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RegionID) GetProvider() RegionID_CloudProvider {
	if m != nil {
		return m.Provider
	}
	return CLOUD_PROVIDER_UNSPECIFIED
}

type ReplicaStatus struct {
	// The replica located region
	Region *RegionID `protobuf:"bytes,1,opt,name=region,proto3" json:"region,omitempty"`
	// The workflow number to be copied to the replica.
	ToBeReplicatedWorkflowCount int64 `protobuf:"varint,2,opt,name=to_be_replicated_workflow_count,json=toBeReplicatedWorkflowCount,proto3" json:"to_be_replicated_workflow_count,omitempty"`
	// The workflow number that already replicated to the replica.
	ReplicatedWorkflowCount int64 `protobuf:"varint,3,opt,name=replicated_workflow_count,json=replicatedWorkflowCount,proto3" json:"replicated_workflow_count,omitempty"`
	// The estimated time when this replica is ready.
	EstimatedCompletionDuration *types.Duration `protobuf:"bytes,4,opt,name=estimated_completion_duration,json=estimatedCompletionDuration,proto3" json:"estimated_completion_duration,omitempty"`
	// The current status of a replica.
	State ReplicaState `protobuf:"varint,5,opt,name=state,proto3,enum=api.common.v1.ReplicaState" json:"state,omitempty"`
	// Whether the replica is active or passive.
	Mode ReplicaMode `protobuf:"varint,6,opt,name=mode,proto3,enum=api.common.v1.ReplicaMode" json:"mode,omitempty"`
}

func (m *ReplicaStatus) Reset()      { *m = ReplicaStatus{} }
func (*ReplicaStatus) ProtoMessage() {}
func (*ReplicaStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_df4c2c740e1454e5, []int{2}
}
func (m *ReplicaStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplicaStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReplicaStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReplicaStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplicaStatus.Merge(m, src)
}
func (m *ReplicaStatus) XXX_Size() int {
	return m.Size()
}
func (m *ReplicaStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplicaStatus.DiscardUnknown(m)
}

var xxx_messageInfo_ReplicaStatus proto.InternalMessageInfo

func (m *ReplicaStatus) GetRegion() *RegionID {
	if m != nil {
		return m.Region
	}
	return nil
}

func (m *ReplicaStatus) GetToBeReplicatedWorkflowCount() int64 {
	if m != nil {
		return m.ToBeReplicatedWorkflowCount
	}
	return 0
}

func (m *ReplicaStatus) GetReplicatedWorkflowCount() int64 {
	if m != nil {
		return m.ReplicatedWorkflowCount
	}
	return 0
}

func (m *ReplicaStatus) GetEstimatedCompletionDuration() *types.Duration {
	if m != nil {
		return m.EstimatedCompletionDuration
	}
	return nil
}

func (m *ReplicaStatus) GetState() ReplicaState {
	if m != nil {
		return m.State
	}
	return REPLICA_STATE_UNSPECIFIED
}

func (m *ReplicaStatus) GetMode() ReplicaMode {
	if m != nil {
		return m.Mode
	}
	return REPLICA_MODE_UNSPECIFIED
}

func init() {
	proto.RegisterEnum("api.common.v1.FailoverType", FailoverType_name, FailoverType_value)
	proto.RegisterEnum("api.common.v1.FailoverStatus", FailoverStatus_name, FailoverStatus_value)
	proto.RegisterEnum("api.common.v1.ReplicaState", ReplicaState_name, ReplicaState_value)
	proto.RegisterEnum("api.common.v1.ReplicaMode", ReplicaMode_name, ReplicaMode_value)
	proto.RegisterEnum("api.common.v1.RegionID_CloudProvider", RegionID_CloudProvider_name, RegionID_CloudProvider_value)
	proto.RegisterType((*Region)(nil), "api.common.v1.Region")
	proto.RegisterType((*RegionID)(nil), "api.common.v1.RegionID")
	proto.RegisterType((*ReplicaStatus)(nil), "api.common.v1.ReplicaStatus")
}

func init() { proto.RegisterFile("api/common/v1/message.proto", fileDescriptor_df4c2c740e1454e5) }

var fileDescriptor_df4c2c740e1454e5 = []byte{
	// 814 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x95, 0x41, 0x6f, 0xe2, 0x46,
	0x14, 0xc7, 0x19, 0x20, 0x94, 0x7d, 0xbb, 0x89, 0xac, 0x49, 0x15, 0x9c, 0xd0, 0x38, 0x2c, 0xd5,
	0x56, 0x69, 0x0e, 0x46, 0x49, 0x7b, 0x6a, 0x7b, 0x71, 0xec, 0x81, 0x5a, 0xca, 0x02, 0x1a, 0x43,
	0x56, 0xad, 0xd4, 0x5a, 0x06, 0x66, 0x91, 0x55, 0xc3, 0x58, 0xb6, 0xc9, 0xaa, 0xb7, 0x1e, 0x7a,
	0xe9, 0xad, 0x1f, 0xa3, 0x9f, 0xa2, 0xe7, 0x1e, 0x73, 0xdc, 0x63, 0x43, 0x2e, 0xbd, 0x54, 0xda,
	0x8f, 0x50, 0x79, 0x6c, 0x5c, 0xcc, 0x86, 0x48, 0x7b, 0x8b, 0xe7, 0xff, 0xfb, 0xcf, 0x7b, 0xef,
	0x3f, 0x33, 0x01, 0xea, 0x8e, 0xef, 0xb6, 0xc6, 0x7c, 0x36, 0xe3, 0xf3, 0xd6, 0xcd, 0x79, 0x6b,
	0xc6, 0xc2, 0xd0, 0x99, 0x32, 0xd5, 0x0f, 0x78, 0xc4, 0xf1, 0xae, 0xe3, 0xbb, 0x6a, 0x22, 0xaa,
	0x37, 0xe7, 0x47, 0xca, 0x94, 0xf3, 0xa9, 0xc7, 0x5a, 0x42, 0x1c, 0x2d, 0x5e, 0xb7, 0x26, 0x8b,
	0xc0, 0x89, 0x5c, 0x3e, 0x4f, 0xf0, 0xe6, 0x6f, 0x45, 0xa8, 0x50, 0x36, 0x75, 0xf9, 0x1c, 0x7f,
	0x0e, 0x7b, 0x63, 0x8f, 0x2f, 0x26, 0xb6, 0x1f, 0xf0, 0x1b, 0x77, 0xc2, 0x02, 0x19, 0x35, 0xd0,
	0xe9, 0x93, 0xcb, 0xa2, 0x8c, 0xe8, 0xae, 0x50, 0xfa, 0xa9, 0x80, 0x0f, 0xa0, 0x3c, 0x77, 0x66,
	0x4c, 0x2e, 0x66, 0x80, 0xf8, 0xc6, 0xdf, 0x80, 0x1c, 0x2e, 0x7c, 0x9f, 0x07, 0x91, 0x3d, 0xf5,
	0xf8, 0xc8, 0xf1, 0xec, 0x78, 0x39, 0xf4, 0x9d, 0x31, 0x93, 0x4b, 0x0d, 0x74, 0x5a, 0x15, 0xec,
	0x41, 0xca, 0x74, 0x04, 0xd2, 0x5d, 0x11, 0xf8, 0x5b, 0xd8, 0x1f, 0xf3, 0xf9, 0x9c, 0x8d, 0x23,
	0x67, 0xe4, 0x31, 0x3b, 0x10, 0x6d, 0x85, 0x72, 0xb9, 0x51, 0x3a, 0x7d, 0x7a, 0x51, 0x53, 0x73,
	0x83, 0xa9, 0x49, 0xd3, 0xa6, 0x41, 0xf1, 0x9a, 0x27, 0x59, 0x0c, 0xf1, 0x97, 0xf0, 0x24, 0x71,
	0xdb, 0xee, 0x44, 0xde, 0x69, 0xa0, 0xc7, 0xfc, 0xd5, 0x84, 0x34, 0x27, 0xcd, 0x7f, 0x11, 0x54,
	0x57, 0xcb, 0x1f, 0x92, 0x06, 0x5e, 0x4f, 0x23, 0x4d, 0x42, 0x83, 0x6a, 0x66, 0x8c, 0x27, 0xdf,
	0xbb, 0x78, 0xb1, 0xa5, 0x01, 0x55, 0x5f, 0xdf, 0x8c, 0x66, 0xb6, 0xa6, 0x0d, 0xbb, 0x39, 0x09,
	0x2b, 0x70, 0xa4, 0x5f, 0xf5, 0x86, 0x86, 0xdd, 0xa7, 0xbd, 0x6b, 0xd3, 0x20, 0xd4, 0x1e, 0x76,
	0xad, 0x3e, 0xd1, 0xcd, 0xb6, 0x49, 0x0c, 0xa9, 0x80, 0x0f, 0x00, 0x6f, 0xe8, 0xda, 0x2b, 0x4b,
	0x42, 0x0f, 0xac, 0x77, 0xf4, 0xbe, 0x54, 0x6c, 0xfe, 0x5a, 0x82, 0x5d, 0xca, 0x7c, 0xcf, 0x1d,
	0x3b, 0x56, 0xe4, 0x44, 0x8b, 0x10, 0xb7, 0xa0, 0x92, 0xa4, 0x21, 0x86, 0x7d, 0x24, 0xb4, 0x14,
	0xc3, 0x06, 0x9c, 0x44, 0xdc, 0x1e, 0xc5, 0x87, 0x25, 0xf6, 0x89, 0xd8, 0xc4, 0x7e, 0xc3, 0x83,
	0x9f, 0x5e, 0x7b, 0xfc, 0x8d, 0x3d, 0xe6, 0x8b, 0x79, 0x24, 0x52, 0x29, 0xd1, 0x7a, 0xc4, 0x2f,
	0x19, 0xcd, 0xa0, 0x57, 0x29, 0xa3, 0xc7, 0x08, 0xfe, 0x0a, 0x0e, 0xb7, 0xfb, 0x4b, 0xc2, 0x5f,
	0x0b, 0xb6, 0x78, 0x7f, 0x80, 0x63, 0x16, 0x46, 0xee, 0x4c, 0x58, 0xc7, 0x7c, 0xe6, 0x7b, 0x2c,
	0xbe, 0xde, 0xf6, 0xea, 0x9e, 0xcb, 0x65, 0x31, 0xc9, 0xa1, 0x9a, 0x3c, 0x04, 0x75, 0xf5, 0x10,
	0x54, 0x23, 0x05, 0x68, 0x3d, 0xf3, 0xeb, 0x99, 0x7d, 0x25, 0xe2, 0x73, 0xd8, 0x09, 0x23, 0x27,
	0x62, 0xe2, 0x16, 0xed, 0x5d, 0xd4, 0xdf, 0x0b, 0x24, 0x8b, 0x8f, 0xd1, 0x84, 0xc4, 0x2a, 0x94,
	0x67, 0x7c, 0xc2, 0xe4, 0x8a, 0x70, 0x1c, 0x3d, 0xec, 0x78, 0xc9, 0x27, 0x8c, 0x0a, 0xee, 0x6c,
	0x04, 0xcf, 0xda, 0x8e, 0xeb, 0xf1, 0x1b, 0x16, 0x0c, 0x7e, 0xf6, 0x19, 0x3e, 0x86, 0xc3, 0xb6,
	0x66, 0x5e, 0xf5, 0xae, 0x09, 0xb5, 0x07, 0xdf, 0xf5, 0xc9, 0xc6, 0x29, 0x1f, 0xc1, 0x41, 0x5e,
	0xee, 0x50, 0x4d, 0x27, 0xed, 0xe1, 0x95, 0x84, 0x70, 0x0d, 0xf6, 0xf3, 0x5a, 0xbb, 0x47, 0x75,
	0x22, 0x15, 0xcf, 0x3c, 0xd8, 0x5b, 0xd5, 0x48, 0x8f, 0xfa, 0x04, 0xea, 0x19, 0x6a, 0x0d, 0xb4,
	0xc1, 0xd0, 0xda, 0xa8, 0xb3, 0xde, 0x46, 0x0a, 0x58, 0x43, 0x5d, 0x27, 0xc4, 0x20, 0x86, 0x84,
	0x72, 0x6d, 0xa4, 0x72, 0xfc, 0x4d, 0x0c, 0xa9, 0x78, 0xf6, 0x67, 0x11, 0x9e, 0xad, 0x27, 0x13,
	0xef, 0x45, 0x49, 0xff, 0xca, 0xd4, 0x35, 0xc1, 0x6e, 0x8e, 0xf4, 0x09, 0xc8, 0x79, 0x59, 0xd3,
	0x07, 0xe6, 0xb5, 0x36, 0x30, 0xbb, 0x1d, 0x09, 0xe1, 0x4f, 0xe1, 0xe4, 0x61, 0xb5, 0xd7, 0xcd,
	0x4a, 0xe2, 0x3a, 0xd4, 0x1e, 0x84, 0x88, 0x21, 0x95, 0xe2, 0x87, 0x93, 0x17, 0x0d, 0xb2, 0x56,
	0xa1, 0x8c, 0x5f, 0xc0, 0xf3, 0x6d, 0xfa, 0xff, 0x35, 0x76, 0xde, 0x9f, 0x22, 0xc3, 0x88, 0x21,
	0x55, 0xf0, 0x67, 0xd0, 0xcc, 0xcb, 0x59, 0x3e, 0x66, 0x37, 0x7e, 0x7a, 0x1d, 0x4a, 0x2c, 0x4b,
	0xfa, 0x08, 0x3f, 0x87, 0xe3, 0x2d, 0x5c, 0x5a, 0xa9, 0x7a, 0xf6, 0x23, 0x3c, 0x5d, 0xbb, 0x27,
	0xeb, 0xf9, 0xbc, 0xec, 0x19, 0x9b, 0xe9, 0xd5, 0x60, 0x3f, 0xa7, 0x8a, 0x9e, 0x88, 0x84, 0xb0,
	0x0c, 0x1f, 0xe7, 0x84, 0xbe, 0x66, 0x59, 0xb1, 0x52, 0xbc, 0xbc, 0xbe, 0xbd, 0x53, 0x0a, 0x6f,
	0xef, 0x94, 0xc2, 0xbb, 0x3b, 0x05, 0xfd, 0xb2, 0x54, 0xd0, 0x1f, 0x4b, 0x05, 0xfd, 0xb5, 0x54,
	0xd0, 0xed, 0x52, 0x41, 0x7f, 0x2f, 0x15, 0xf4, 0xcf, 0x52, 0x29, 0xbc, 0x5b, 0x2a, 0xe8, 0xf7,
	0x7b, 0xa5, 0x70, 0x7b, 0xaf, 0x14, 0xde, 0xde, 0x2b, 0x85, 0xef, 0x1b, 0xd1, 0xcc, 0x0f, 0x3c,
	0x55, 0xfc, 0xf3, 0x6b, 0xe5, 0x7e, 0x83, 0xbe, 0x4e, 0xfe, 0x1a, 0x55, 0xc4, 0xeb, 0xfa, 0xe2,
	0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x97, 0x81, 0x08, 0x4e, 0xa2, 0x06, 0x00, 0x00,
}

func (x FailoverType) String() string {
	s, ok := FailoverType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x FailoverStatus) String() string {
	s, ok := FailoverStatus_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x ReplicaState) String() string {
	s, ok := ReplicaState_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x ReplicaMode) String() string {
	s, ok := ReplicaMode_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x RegionID_CloudProvider) String() string {
	s, ok := RegionID_CloudProvider_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Region) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Region)
	if !ok {
		that2, ok := that.(Region)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CloudProvider != that1.CloudProvider {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.SupportGlobalNamespace != that1.SupportGlobalNamespace {
		return false
	}
	if len(this.ConnectableRegions) != len(that1.ConnectableRegions) {
		return false
	}
	for i := range this.ConnectableRegions {
		if !this.ConnectableRegions[i].Equal(that1.ConnectableRegions[i]) {
			return false
		}
	}
	if !this.RegionId.Equal(that1.RegionId) {
		return false
	}
	return true
}
func (this *RegionID) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RegionID)
	if !ok {
		that2, ok := that.(RegionID)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CloudProvider != that1.CloudProvider {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Provider != that1.Provider {
		return false
	}
	return true
}
func (this *ReplicaStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplicaStatus)
	if !ok {
		that2, ok := that.(ReplicaStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Region.Equal(that1.Region) {
		return false
	}
	if this.ToBeReplicatedWorkflowCount != that1.ToBeReplicatedWorkflowCount {
		return false
	}
	if this.ReplicatedWorkflowCount != that1.ReplicatedWorkflowCount {
		return false
	}
	if !this.EstimatedCompletionDuration.Equal(that1.EstimatedCompletionDuration) {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if this.Mode != that1.Mode {
		return false
	}
	return true
}
func (this *Region) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&common.Region{")
	s = append(s, "CloudProvider: "+fmt.Sprintf("%#v", this.CloudProvider)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "SupportGlobalNamespace: "+fmt.Sprintf("%#v", this.SupportGlobalNamespace)+",\n")
	if this.ConnectableRegions != nil {
		s = append(s, "ConnectableRegions: "+fmt.Sprintf("%#v", this.ConnectableRegions)+",\n")
	}
	if this.RegionId != nil {
		s = append(s, "RegionId: "+fmt.Sprintf("%#v", this.RegionId)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RegionID) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&common.RegionID{")
	s = append(s, "CloudProvider: "+fmt.Sprintf("%#v", this.CloudProvider)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Provider: "+fmt.Sprintf("%#v", this.Provider)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplicaStatus) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&common.ReplicaStatus{")
	if this.Region != nil {
		s = append(s, "Region: "+fmt.Sprintf("%#v", this.Region)+",\n")
	}
	s = append(s, "ToBeReplicatedWorkflowCount: "+fmt.Sprintf("%#v", this.ToBeReplicatedWorkflowCount)+",\n")
	s = append(s, "ReplicatedWorkflowCount: "+fmt.Sprintf("%#v", this.ReplicatedWorkflowCount)+",\n")
	if this.EstimatedCompletionDuration != nil {
		s = append(s, "EstimatedCompletionDuration: "+fmt.Sprintf("%#v", this.EstimatedCompletionDuration)+",\n")
	}
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "Mode: "+fmt.Sprintf("%#v", this.Mode)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringMessage(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Region) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Region) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Region) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RegionId != nil {
		{
			size, err := m.RegionId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ConnectableRegions) > 0 {
		for iNdEx := len(m.ConnectableRegions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ConnectableRegions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.SupportGlobalNamespace {
		i--
		if m.SupportGlobalNamespace {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CloudProvider) > 0 {
		i -= len(m.CloudProvider)
		copy(dAtA[i:], m.CloudProvider)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.CloudProvider)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RegionID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegionID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegionID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Provider != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Provider))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CloudProvider) > 0 {
		i -= len(m.CloudProvider)
		copy(dAtA[i:], m.CloudProvider)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.CloudProvider)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReplicaStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplicaStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplicaStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Mode != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Mode))
		i--
		dAtA[i] = 0x30
	}
	if m.State != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x28
	}
	if m.EstimatedCompletionDuration != nil {
		{
			size, err := m.EstimatedCompletionDuration.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.ReplicatedWorkflowCount != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.ReplicatedWorkflowCount))
		i--
		dAtA[i] = 0x18
	}
	if m.ToBeReplicatedWorkflowCount != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.ToBeReplicatedWorkflowCount))
		i--
		dAtA[i] = 0x10
	}
	if m.Region != nil {
		{
			size, err := m.Region.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMessage(dAtA []byte, offset int, v uint64) int {
	offset -= sovMessage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Region) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CloudProvider)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.SupportGlobalNamespace {
		n += 2
	}
	if len(m.ConnectableRegions) > 0 {
		for _, e := range m.ConnectableRegions {
			l = e.Size()
			n += 1 + l + sovMessage(uint64(l))
		}
	}
	if m.RegionId != nil {
		l = m.RegionId.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *RegionID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CloudProvider)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Provider != 0 {
		n += 1 + sovMessage(uint64(m.Provider))
	}
	return n
}

func (m *ReplicaStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Region != nil {
		l = m.Region.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.ToBeReplicatedWorkflowCount != 0 {
		n += 1 + sovMessage(uint64(m.ToBeReplicatedWorkflowCount))
	}
	if m.ReplicatedWorkflowCount != 0 {
		n += 1 + sovMessage(uint64(m.ReplicatedWorkflowCount))
	}
	if m.EstimatedCompletionDuration != nil {
		l = m.EstimatedCompletionDuration.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovMessage(uint64(m.State))
	}
	if m.Mode != 0 {
		n += 1 + sovMessage(uint64(m.Mode))
	}
	return n
}

func sovMessage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMessage(x uint64) (n int) {
	return sovMessage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Region) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForConnectableRegions := "[]*RegionID{"
	for _, f := range this.ConnectableRegions {
		repeatedStringForConnectableRegions += strings.Replace(f.String(), "RegionID", "RegionID", 1) + ","
	}
	repeatedStringForConnectableRegions += "}"
	s := strings.Join([]string{`&Region{`,
		`CloudProvider:` + fmt.Sprintf("%v", this.CloudProvider) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`SupportGlobalNamespace:` + fmt.Sprintf("%v", this.SupportGlobalNamespace) + `,`,
		`ConnectableRegions:` + repeatedStringForConnectableRegions + `,`,
		`RegionId:` + strings.Replace(this.RegionId.String(), "RegionID", "RegionID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RegionID) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RegionID{`,
		`CloudProvider:` + fmt.Sprintf("%v", this.CloudProvider) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Provider:` + fmt.Sprintf("%v", this.Provider) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplicaStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplicaStatus{`,
		`Region:` + strings.Replace(this.Region.String(), "RegionID", "RegionID", 1) + `,`,
		`ToBeReplicatedWorkflowCount:` + fmt.Sprintf("%v", this.ToBeReplicatedWorkflowCount) + `,`,
		`ReplicatedWorkflowCount:` + fmt.Sprintf("%v", this.ReplicatedWorkflowCount) + `,`,
		`EstimatedCompletionDuration:` + strings.Replace(fmt.Sprintf("%v", this.EstimatedCompletionDuration), "Duration", "types.Duration", 1) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`Mode:` + fmt.Sprintf("%v", this.Mode) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringMessage(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Region) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Region: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Region: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloudProvider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CloudProvider = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupportGlobalNamespace", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SupportGlobalNamespace = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectableRegions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectableRegions = append(m.ConnectableRegions, &RegionID{})
			if err := m.ConnectableRegions[len(m.ConnectableRegions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegionId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RegionId == nil {
				m.RegionId = &RegionID{}
			}
			if err := m.RegionId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegionID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegionID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegionID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloudProvider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CloudProvider = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
			}
			m.Provider = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Provider |= RegionID_CloudProvider(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplicaStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplicaStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplicaStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Region == nil {
				m.Region = &RegionID{}
			}
			if err := m.Region.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToBeReplicatedWorkflowCount", wireType)
			}
			m.ToBeReplicatedWorkflowCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ToBeReplicatedWorkflowCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicatedWorkflowCount", wireType)
			}
			m.ReplicatedWorkflowCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplicatedWorkflowCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EstimatedCompletionDuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EstimatedCompletionDuration == nil {
				m.EstimatedCompletionDuration = &types.Duration{}
			}
			if err := m.EstimatedCompletionDuration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= ReplicaState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			m.Mode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mode |= ReplicaMode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMessage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMessage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMessage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMessage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMessage = fmt.Errorf("proto: unexpected end of group")
)
