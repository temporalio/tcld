// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/platform/v1/message.proto

package platform

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	math "math"
	strconv "strconv"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type OS int32

const (
	OS_UNSPECIFIED OS = 0
	OS_MAC         OS = 1
	OS_LINUX       OS = 2
	OS_WINDOWS     OS = 3
)

var OS_name = map[int32]string{
	0: "OsUnspecified",
	1: "OsMac",
	2: "OsLinux",
	3: "OsWindows",
}

var OS_value = map[string]int32{
	"OsUnspecified": 0,
	"OsMac":         1,
	"OsLinux":       2,
	"OsWindows":     3,
}

func (OS) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6eb34b9496e9d2ae, []int{0}
}

type SDK int32

const (
	SDK_UNSPECIFIED SDK = 0
	SDK_NONE        SDK = 1
	SDK_GO          SDK = 2
	SDK_JAVA        SDK = 3
	SDK_PYTHON      SDK = 4
	SDK_TYPESCRIPT  SDK = 5
	SDK_DOT_NET     SDK = 6
	SDK_PHP         SDK = 7
)

var SDK_name = map[int32]string{
	0: "SdkUnspecified",
	1: "SdkNone",
	2: "SdkGo",
	3: "SdkJava",
	4: "SdkPython",
	5: "SdkTypescript",
	6: "SdkDotNet",
	7: "SdkPhp",
}

var SDK_value = map[string]int32{
	"SdkUnspecified": 0,
	"SdkNone":        1,
	"SdkGo":          2,
	"SdkJava":        3,
	"SdkPython":      4,
	"SdkTypescript":  5,
	"SdkDotNet":      6,
	"SdkPhp":         7,
}

func (SDK) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6eb34b9496e9d2ae, []int{1}
}

func init() {
	proto.RegisterEnum("api.platform.v1.OS", OS_name, OS_value)
	proto.RegisterEnum("api.platform.v1.SDK", SDK_name, SDK_value)
}

func init() { proto.RegisterFile("api/platform/v1/message.proto", fileDescriptor_6eb34b9496e9d2ae) }

var fileDescriptor_6eb34b9496e9d2ae = []byte{
	// 307 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x90, 0x31, 0x4f, 0xfa, 0x40,
	0x18, 0xc6, 0xef, 0xe0, 0xff, 0x07, 0xf2, 0x42, 0xe0, 0x72, 0xce, 0xbe, 0x93, 0x13, 0x43, 0x1b,
	0xe2, 0xe8, 0x04, 0xb4, 0x4a, 0x45, 0xef, 0x1a, 0xaf, 0x88, 0xb0, 0x34, 0x55, 0xd1, 0x90, 0x40,
	0xda, 0x00, 0x32, 0x3b, 0xf8, 0x01, 0xfc, 0x18, 0x7e, 0x14, 0xc7, 0x8e, 0x8c, 0xf6, 0xba, 0x38,
	0xf2, 0x11, 0xcc, 0x91, 0x74, 0x61, 0xbb, 0xdf, 0xf3, 0xe4, 0x7e, 0x79, 0xf3, 0xc0, 0x69, 0x94,
	0xcc, 0xed, 0x64, 0x11, 0x6d, 0x5e, 0xe2, 0xd5, 0xd2, 0xde, 0x76, 0xec, 0xe5, 0x6c, 0xbd, 0x8e,
	0x5e, 0x67, 0x56, 0xb2, 0x8a, 0x37, 0x31, 0x6f, 0x45, 0xc9, 0xdc, 0x2a, 0x6a, 0x6b, 0xdb, 0x69,
	0xf7, 0xa0, 0x24, 0x15, 0xe7, 0xd0, 0x94, 0x2a, 0x1c, 0x09, 0xe5, 0xbb, 0x7d, 0xef, 0xd2, 0x73,
	0x1d, 0x46, 0x38, 0x40, 0x45, 0xaa, 0xf0, 0xb6, 0xdb, 0x67, 0x94, 0x37, 0xa0, 0x26, 0x55, 0x78,
	0xe3, 0x89, 0xd1, 0x03, 0x2b, 0xf1, 0x26, 0x80, 0x54, 0xe1, 0xd8, 0x13, 0x8e, 0x1c, 0x2b, 0x56,
	0x6e, 0x7f, 0x50, 0x28, 0x2b, 0x67, 0xc8, 0x4f, 0xa0, 0xa5, 0x9c, 0xe1, 0x91, 0xa6, 0x01, 0x35,
	0x13, 0x0a, 0x29, 0x5c, 0x46, 0x8d, 0xd4, 0xd0, 0x95, 0x64, 0xa5, 0xa2, 0xb9, 0xee, 0xde, 0x77,
	0x59, 0xd9, 0x48, 0x0d, 0xf9, 0x93, 0x60, 0x20, 0x05, 0xfb, 0x67, 0x4e, 0x32, 0x1c, 0x4c, 0x7c,
	0x57, 0xf5, 0xef, 0x3c, 0x3f, 0x60, 0xff, 0x79, 0x0b, 0xea, 0x26, 0x73, 0x64, 0x10, 0x0a, 0x37,
	0x60, 0x15, 0x5e, 0x87, 0xea, 0xe1, 0xd3, 0xc0, 0x67, 0xd5, 0xde, 0x34, 0xcd, 0x90, 0xec, 0x32,
	0x24, 0xfb, 0x0c, 0xe9, 0xbb, 0x46, 0xfa, 0xa5, 0x91, 0x7e, 0x6b, 0xa4, 0xa9, 0x46, 0xfa, 0xa3,
	0x91, 0xfe, 0x6a, 0x24, 0x7b, 0x8d, 0xf4, 0x33, 0x47, 0x92, 0xe6, 0x48, 0x76, 0x39, 0x92, 0xe9,
	0xd9, 0x66, 0x99, 0xac, 0x16, 0xd6, 0xd3, 0x22, 0x7e, 0x7b, 0xb6, 0x8f, 0xc6, 0xbb, 0x28, 0xde,
	0x8f, 0x95, 0xc3, 0x7c, 0xe7, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x3d, 0xeb, 0x62, 0x18, 0x5f,
	0x01, 0x00, 0x00,
}

func (x OS) String() string {
	s, ok := OS_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x SDK) String() string {
	s, ok := SDK_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
