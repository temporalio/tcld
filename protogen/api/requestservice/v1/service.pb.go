// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/requestservice/v1/service.proto

package requestservice

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("api/requestservice/v1/service.proto", fileDescriptor_a6f283241a216f38)
}

var fileDescriptor_a6f283241a216f38 = []byte{
	// 288 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x4e, 0x2c, 0xc8, 0xd4,
	0x2f, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x29, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x2f,
	0x33, 0xd4, 0x87, 0x32, 0xf5, 0x0a, 0x8a, 0xf2, 0x4b, 0xf2, 0x85, 0x44, 0x13, 0x0b, 0x32, 0xf5,
	0x50, 0x15, 0xe9, 0x95, 0x19, 0x4a, 0xe9, 0x60, 0xd7, 0x0b, 0x15, 0x89, 0x2f, 0x4a, 0x2d, 0x2e,
	0xc8, 0xcf, 0x2b, 0x86, 0x1a, 0x62, 0xb4, 0x93, 0x85, 0x8b, 0x2f, 0x08, 0x22, 0x15, 0x0c, 0x51,
	0x2c, 0x54, 0xca, 0x25, 0xe0, 0x9e, 0x5a, 0x02, 0x13, 0x2c, 0x49, 0x2c, 0x29, 0x2d, 0x16, 0xd2,
	0xd3, 0xc3, 0x6a, 0x99, 0x1e, 0xba, 0x42, 0x28, 0x47, 0x4a, 0x9f, 0x68, 0xf5, 0x10, 0xd7, 0x28,
	0x31, 0x08, 0x55, 0x73, 0x09, 0xa1, 0xcb, 0xa6, 0x16, 0x0b, 0x19, 0x10, 0x69, 0x50, 0x2a, 0xdc,
	0x6a, 0x43, 0x12, 0x74, 0xc0, 0x2d, 0x9f, 0xc0, 0xc8, 0x25, 0x89, 0xa9, 0xc0, 0x2d, 0xbf, 0x28,
	0xb4, 0x38, 0xb5, 0x48, 0xc8, 0x9c, 0x68, 0x23, 0xa1, 0x3a, 0x60, 0x6e, 0xb1, 0x20, 0x5d, 0x23,
	0xdc, 0x49, 0xf3, 0x19, 0xb9, 0xe4, 0xb0, 0xaa, 0xf3, 0x4b, 0xcc, 0x4d, 0x2d, 0x2e, 0x48, 0x4c,
	0x4e, 0x15, 0xb2, 0x21, 0xc5, 0x78, 0xb8, 0x36, 0x98, 0xe3, 0x6c, 0xc9, 0xd4, 0x0d, 0x73, 0xa1,
	0x53, 0xda, 0x85, 0x87, 0x72, 0x0c, 0x37, 0x1e, 0xca, 0x31, 0x7c, 0x78, 0x28, 0xc7, 0xd8, 0xf0,
	0x48, 0x8e, 0x71, 0xc5, 0x23, 0x39, 0xc6, 0x13, 0x8f, 0xe4, 0x18, 0x2f, 0x3c, 0x92, 0x63, 0x7c,
	0xf0, 0x48, 0x8e, 0xf1, 0xc5, 0x23, 0x39, 0x86, 0x0f, 0x8f, 0xe4, 0x18, 0x27, 0x3c, 0x96, 0x63,
	0xb8, 0xf0, 0x58, 0x8e, 0xe1, 0xc6, 0x63, 0x39, 0x86, 0x28, 0x83, 0x92, 0xdc, 0x82, 0xa2, 0x1c,
	0xbd, 0xe4, 0x9c, 0xfc, 0xd2, 0x14, 0x7d, 0xac, 0x69, 0xd5, 0x1a, 0x55, 0x24, 0x89, 0x0d, 0x9c,
	0x54, 0x8d, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x4f, 0xe7, 0xb3, 0xf8, 0x16, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RequestServiceClient is the client API for RequestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RequestServiceClient interface {
	// GetRequestStatus get the status of a request.
	GetRequestStatus(ctx context.Context, in *GetRequestStatusRequest, opts ...grpc.CallOption) (*GetRequestStatusResponse, error)
	// GetRequestStatuses lists the statuses of all known requests.
	GetRequestStatuses(ctx context.Context, in *GetRequestStatusesRequest, opts ...grpc.CallOption) (*GetRequestStatusesResponse, error)
	// GetRequestStatuses lists the statuses started by a user.
	GetRequestStatusesForUser(ctx context.Context, in *GetRequestStatusesForUserRequest, opts ...grpc.CallOption) (*GetRequestStatusesForUserResponse, error)
	// GetRequestStatuses lists the statuses of requests started for a namespace.
	GetRequestStatusesForNamespace(ctx context.Context, in *GetRequestStatusesForNamespaceRequest, opts ...grpc.CallOption) (*GetRequestStatusesForNamespaceResponse, error)
}

type requestServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRequestServiceClient(cc grpc.ClientConnInterface) RequestServiceClient {
	return &requestServiceClient{cc}
}

func (c *requestServiceClient) GetRequestStatus(ctx context.Context, in *GetRequestStatusRequest, opts ...grpc.CallOption) (*GetRequestStatusResponse, error) {
	out := new(GetRequestStatusResponse)
	err := c.cc.Invoke(ctx, "/api.requestservice.v1.RequestService/GetRequestStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *requestServiceClient) GetRequestStatuses(ctx context.Context, in *GetRequestStatusesRequest, opts ...grpc.CallOption) (*GetRequestStatusesResponse, error) {
	out := new(GetRequestStatusesResponse)
	err := c.cc.Invoke(ctx, "/api.requestservice.v1.RequestService/GetRequestStatuses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *requestServiceClient) GetRequestStatusesForUser(ctx context.Context, in *GetRequestStatusesForUserRequest, opts ...grpc.CallOption) (*GetRequestStatusesForUserResponse, error) {
	out := new(GetRequestStatusesForUserResponse)
	err := c.cc.Invoke(ctx, "/api.requestservice.v1.RequestService/GetRequestStatusesForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *requestServiceClient) GetRequestStatusesForNamespace(ctx context.Context, in *GetRequestStatusesForNamespaceRequest, opts ...grpc.CallOption) (*GetRequestStatusesForNamespaceResponse, error) {
	out := new(GetRequestStatusesForNamespaceResponse)
	err := c.cc.Invoke(ctx, "/api.requestservice.v1.RequestService/GetRequestStatusesForNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RequestServiceServer is the server API for RequestService service.
type RequestServiceServer interface {
	// GetRequestStatus get the status of a request.
	GetRequestStatus(context.Context, *GetRequestStatusRequest) (*GetRequestStatusResponse, error)
	// GetRequestStatuses lists the statuses of all known requests.
	GetRequestStatuses(context.Context, *GetRequestStatusesRequest) (*GetRequestStatusesResponse, error)
	// GetRequestStatuses lists the statuses started by a user.
	GetRequestStatusesForUser(context.Context, *GetRequestStatusesForUserRequest) (*GetRequestStatusesForUserResponse, error)
	// GetRequestStatuses lists the statuses of requests started for a namespace.
	GetRequestStatusesForNamespace(context.Context, *GetRequestStatusesForNamespaceRequest) (*GetRequestStatusesForNamespaceResponse, error)
}

// UnimplementedRequestServiceServer can be embedded to have forward compatible implementations.
type UnimplementedRequestServiceServer struct {
}

func (*UnimplementedRequestServiceServer) GetRequestStatus(ctx context.Context, req *GetRequestStatusRequest) (*GetRequestStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRequestStatus not implemented")
}
func (*UnimplementedRequestServiceServer) GetRequestStatuses(ctx context.Context, req *GetRequestStatusesRequest) (*GetRequestStatusesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRequestStatuses not implemented")
}
func (*UnimplementedRequestServiceServer) GetRequestStatusesForUser(ctx context.Context, req *GetRequestStatusesForUserRequest) (*GetRequestStatusesForUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRequestStatusesForUser not implemented")
}
func (*UnimplementedRequestServiceServer) GetRequestStatusesForNamespace(ctx context.Context, req *GetRequestStatusesForNamespaceRequest) (*GetRequestStatusesForNamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRequestStatusesForNamespace not implemented")
}

func RegisterRequestServiceServer(s *grpc.Server, srv RequestServiceServer) {
	s.RegisterService(&_RequestService_serviceDesc, srv)
}

func _RequestService_GetRequestStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequestStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RequestServiceServer).GetRequestStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.requestservice.v1.RequestService/GetRequestStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RequestServiceServer).GetRequestStatus(ctx, req.(*GetRequestStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RequestService_GetRequestStatuses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequestStatusesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RequestServiceServer).GetRequestStatuses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.requestservice.v1.RequestService/GetRequestStatuses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RequestServiceServer).GetRequestStatuses(ctx, req.(*GetRequestStatusesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RequestService_GetRequestStatusesForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequestStatusesForUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RequestServiceServer).GetRequestStatusesForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.requestservice.v1.RequestService/GetRequestStatusesForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RequestServiceServer).GetRequestStatusesForUser(ctx, req.(*GetRequestStatusesForUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RequestService_GetRequestStatusesForNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequestStatusesForNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RequestServiceServer).GetRequestStatusesForNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.requestservice.v1.RequestService/GetRequestStatusesForNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RequestServiceServer).GetRequestStatusesForNamespace(ctx, req.(*GetRequestStatusesForNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RequestService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.requestservice.v1.RequestService",
	HandlerType: (*RequestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRequestStatus",
			Handler:    _RequestService_GetRequestStatus_Handler,
		},
		{
			MethodName: "GetRequestStatuses",
			Handler:    _RequestService_GetRequestStatuses_Handler,
		},
		{
			MethodName: "GetRequestStatusesForUser",
			Handler:    _RequestService_GetRequestStatusesForUser_Handler,
		},
		{
			MethodName: "GetRequestStatusesForNamespace",
			Handler:    _RequestService_GetRequestStatusesForNamespace_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/requestservice/v1/service.proto",
}
