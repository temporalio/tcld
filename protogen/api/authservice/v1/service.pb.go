// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/authservice/v1/service.proto

package authservice

import (
	context "context"
	fmt "fmt"
	math "math"

	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("api/authservice/v1/service.proto", fileDescriptor_80c42cd25eb3e22a) }

var fileDescriptor_80c42cd25eb3e22a = []byte{
	// 397 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x94, 0xcf, 0x4a, 0xeb, 0x40,
	0x14, 0xc6, 0x33, 0x9b, 0xdb, 0xcb, 0x74, 0x73, 0x19, 0xb8, 0x9b, 0x2e, 0x0e, 0xd2, 0x6a, 0xc5,
	0x3f, 0x24, 0x56, 0x57, 0xea, 0xca, 0x22, 0x88, 0x1b, 0x91, 0x6a, 0x11, 0x04, 0xb1, 0xb1, 0x3d,
	0xd0, 0x40, 0x9a, 0xc4, 0x4c, 0x12, 0x70, 0x23, 0x3e, 0x82, 0x5b, 0xdf, 0xc0, 0xe7, 0x70, 0xe5,
	0xb2, 0xcb, 0x2e, 0x6d, 0xba, 0x71, 0xd9, 0x47, 0x10, 0x3b, 0x99, 0x34, 0xda, 0x38, 0x55, 0x77,
	0xed, 0x9c, 0xdf, 0xf7, 0xfb, 0xce, 0x40, 0x18, 0xba, 0x60, 0x7a, 0x96, 0x61, 0x86, 0x41, 0x97,
	0xa3, 0x1f, 0x59, 0x6d, 0x34, 0xa2, 0x9a, 0x91, 0xfc, 0xd4, 0x3d, 0xdf, 0x0d, 0x5c, 0xc6, 0x4c,
	0xcf, 0xd2, 0x33, 0x84, 0x1e, 0xd5, 0x4a, 0x2b, 0x39, 0x29, 0x1f, 0xaf, 0x43, 0xe4, 0xc1, 0xa5,
	0x8f, 0xdc, 0x73, 0x1d, 0x9e, 0xc4, 0x37, 0x9f, 0x0a, 0xb4, 0xb8, 0x17, 0x06, 0xdd, 0x13, 0x41,
	0xb2, 0x33, 0xfa, 0xf7, 0x00, 0x83, 0x86, 0x6b, 0x23, 0x67, 0x15, 0x7d, 0xd6, 0xad, 0xcb, 0x69,
	0x43, 0xf8, 0x4a, 0x8b, 0x6a, 0x48, 0x94, 0x95, 0x35, 0x76, 0x4b, 0xff, 0xcb, 0xd3, 0xfa, 0xcd,
	0x31, 0xfa, 0x3d, 0x8b, 0x73, 0xcb, 0x75, 0x38, 0xdb, 0x50, 0x09, 0x3e, 0xa0, 0xb2, 0xb2, 0xf6,
	0x83, 0x44, 0xda, 0x2f, 0x2e, 0xd6, 0xe4, 0xe8, 0x7f, 0x7d, 0xb1, 0xc9, 0x74, 0xde, 0xc5, 0x12,
	0x28, 0x15, 0x9f, 0xd2, 0x42, 0x72, 0xca, 0xca, 0x8a, 0x88, 0xd4, 0x56, 0x94, 0x4c, 0x6a, 0x6d,
	0xd1, 0xe2, 0xa1, 0x13, 0x59, 0x01, 0x8a, 0x8d, 0xab, 0x79, 0xa9, 0x0c, 0x20, 0xed, 0xcb, 0x73,
	0xb9, 0xb4, 0xc1, 0xa5, 0xff, 0x1a, 0xc8, 0xd1, 0xe9, 0xbc, 0x0f, 0x04, 0xc2, 0xd6, 0xf2, 0xe2,
	0x9f, 0x29, 0xd9, 0xb5, 0xfe, 0x3d, 0x38, 0x2d, 0xbc, 0xa0, 0xb4, 0xe9, 0x75, 0x4c, 0xb1, 0x09,
	0x5b, 0xca, 0x4b, 0x4f, 0xe7, 0xb2, 0xa4, 0x3a, 0x0f, 0xcb, 0xea, 0xf7, 0xd1, 0x46, 0x95, 0x7e,
	0x3a, 0x57, 0xea, 0xb3, 0x58, 0xaa, 0x7f, 0x20, 0x14, 0xa6, 0xbd, 0x47, 0x66, 0x0f, 0xb9, 0x67,
	0xb6, 0x31, 0xfb, 0x25, 0x6f, 0xab, 0x77, 0xcd, 0xcb, 0xc8, 0x3d, 0x76, 0x7e, 0x13, 0x95, 0xbb,
	0xd5, 0x5b, 0xfd, 0x21, 0x68, 0x83, 0x21, 0x68, 0xe3, 0x21, 0x90, 0xbb, 0x18, 0xc8, 0x63, 0x0c,
	0xe4, 0x39, 0x06, 0xd2, 0x8f, 0x81, 0xbc, 0xc4, 0x40, 0x5e, 0x63, 0xd0, 0xc6, 0x31, 0x90, 0xfb,
	0x11, 0x68, 0xfd, 0x11, 0x68, 0x83, 0x11, 0x68, 0xe7, 0xab, 0x41, 0xcf, 0xf3, 0x6d, 0xbd, 0x6d,
	0xbb, 0x61, 0xc7, 0x98, 0x7d, 0x31, 0x76, 0x33, 0x7f, 0xaf, 0xfe, 0x4c, 0x5e, 0x8b, 0xad, 0xb7,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x28, 0x10, 0xfd, 0xb7, 0x90, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AuthServiceClient is the client API for AuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AuthServiceClient interface {
	GetRoles(ctx context.Context, in *GetRolesRequest, opts ...grpc.CallOption) (*GetRolesResponse, error)
	GetRolesByPermissions(ctx context.Context, in *GetRolesByPermissionsRequest, opts ...grpc.CallOption) (*GetRolesByPermissionsResponse, error)
	GetUsers(ctx context.Context, in *GetUsersRequest, opts ...grpc.CallOption) (*GetUsersResponse, error)
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	InviteUsers(ctx context.Context, in *InviteUsersRequest, opts ...grpc.CallOption) (*InviteUsersResponse, error)
	ResendUserInvite(ctx context.Context, in *ResendUserInviteRequest, opts ...grpc.CallOption) (*ResendUserInviteResponse, error)
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error)
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error)
	UpdateUserNamespacePermissions(ctx context.Context, in *UpdateUserNamespacePermissionsRequest, opts ...grpc.CallOption) (*UpdateUserNamespacePermissionsResponse, error)
}

type authServiceClient struct {
	cc *grpc.ClientConn
}

func NewAuthServiceClient(cc *grpc.ClientConn) AuthServiceClient {
	return &authServiceClient{cc}
}

func (c *authServiceClient) GetRoles(ctx context.Context, in *GetRolesRequest, opts ...grpc.CallOption) (*GetRolesResponse, error) {
	out := new(GetRolesResponse)
	err := c.cc.Invoke(ctx, "/api.authservice.v1.AuthService/GetRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetRolesByPermissions(ctx context.Context, in *GetRolesByPermissionsRequest, opts ...grpc.CallOption) (*GetRolesByPermissionsResponse, error) {
	out := new(GetRolesByPermissionsResponse)
	err := c.cc.Invoke(ctx, "/api.authservice.v1.AuthService/GetRolesByPermissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetUsers(ctx context.Context, in *GetUsersRequest, opts ...grpc.CallOption) (*GetUsersResponse, error) {
	out := new(GetUsersResponse)
	err := c.cc.Invoke(ctx, "/api.authservice.v1.AuthService/GetUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, "/api.authservice.v1.AuthService/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) InviteUsers(ctx context.Context, in *InviteUsersRequest, opts ...grpc.CallOption) (*InviteUsersResponse, error) {
	out := new(InviteUsersResponse)
	err := c.cc.Invoke(ctx, "/api.authservice.v1.AuthService/InviteUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ResendUserInvite(ctx context.Context, in *ResendUserInviteRequest, opts ...grpc.CallOption) (*ResendUserInviteResponse, error) {
	out := new(ResendUserInviteResponse)
	err := c.cc.Invoke(ctx, "/api.authservice.v1.AuthService/ResendUserInvite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error) {
	out := new(UpdateUserResponse)
	err := c.cc.Invoke(ctx, "/api.authservice.v1.AuthService/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error) {
	out := new(DeleteUserResponse)
	err := c.cc.Invoke(ctx, "/api.authservice.v1.AuthService/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) UpdateUserNamespacePermissions(ctx context.Context, in *UpdateUserNamespacePermissionsRequest, opts ...grpc.CallOption) (*UpdateUserNamespacePermissionsResponse, error) {
	out := new(UpdateUserNamespacePermissionsResponse)
	err := c.cc.Invoke(ctx, "/api.authservice.v1.AuthService/UpdateUserNamespacePermissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServiceServer is the server API for AuthService service.
type AuthServiceServer interface {
	GetRoles(context.Context, *GetRolesRequest) (*GetRolesResponse, error)
	GetRolesByPermissions(context.Context, *GetRolesByPermissionsRequest) (*GetRolesByPermissionsResponse, error)
	GetUsers(context.Context, *GetUsersRequest) (*GetUsersResponse, error)
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
	InviteUsers(context.Context, *InviteUsersRequest) (*InviteUsersResponse, error)
	ResendUserInvite(context.Context, *ResendUserInviteRequest) (*ResendUserInviteResponse, error)
	UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error)
	DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error)
	UpdateUserNamespacePermissions(context.Context, *UpdateUserNamespacePermissionsRequest) (*UpdateUserNamespacePermissionsResponse, error)
}

// UnimplementedAuthServiceServer can be embedded to have forward compatible implementations.
type UnimplementedAuthServiceServer struct {
}

func (*UnimplementedAuthServiceServer) GetRoles(ctx context.Context, req *GetRolesRequest) (*GetRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoles not implemented")
}
func (*UnimplementedAuthServiceServer) GetRolesByPermissions(ctx context.Context, req *GetRolesByPermissionsRequest) (*GetRolesByPermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRolesByPermissions not implemented")
}
func (*UnimplementedAuthServiceServer) GetUsers(ctx context.Context, req *GetUsersRequest) (*GetUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsers not implemented")
}
func (*UnimplementedAuthServiceServer) GetUser(ctx context.Context, req *GetUserRequest) (*GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (*UnimplementedAuthServiceServer) InviteUsers(ctx context.Context, req *InviteUsersRequest) (*InviteUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InviteUsers not implemented")
}
func (*UnimplementedAuthServiceServer) ResendUserInvite(ctx context.Context, req *ResendUserInviteRequest) (*ResendUserInviteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResendUserInvite not implemented")
}
func (*UnimplementedAuthServiceServer) UpdateUser(ctx context.Context, req *UpdateUserRequest) (*UpdateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (*UnimplementedAuthServiceServer) DeleteUser(ctx context.Context, req *DeleteUserRequest) (*DeleteUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (*UnimplementedAuthServiceServer) UpdateUserNamespacePermissions(ctx context.Context, req *UpdateUserNamespacePermissionsRequest) (*UpdateUserNamespacePermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserNamespacePermissions not implemented")
}

func RegisterAuthServiceServer(s *grpc.Server, srv AuthServiceServer) {
	s.RegisterService(&_AuthService_serviceDesc, srv)
}

func _AuthService_GetRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.authservice.v1.AuthService/GetRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetRoles(ctx, req.(*GetRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetRolesByPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRolesByPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetRolesByPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.authservice.v1.AuthService/GetRolesByPermissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetRolesByPermissions(ctx, req.(*GetRolesByPermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.authservice.v1.AuthService/GetUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetUsers(ctx, req.(*GetUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.authservice.v1.AuthService/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_InviteUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).InviteUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.authservice.v1.AuthService/InviteUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).InviteUsers(ctx, req.(*InviteUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ResendUserInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResendUserInviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ResendUserInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.authservice.v1.AuthService/ResendUserInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ResendUserInvite(ctx, req.(*ResendUserInviteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.authservice.v1.AuthService/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.authservice.v1.AuthService/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DeleteUser(ctx, req.(*DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_UpdateUserNamespacePermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserNamespacePermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).UpdateUserNamespacePermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.authservice.v1.AuthService/UpdateUserNamespacePermissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).UpdateUserNamespacePermissions(ctx, req.(*UpdateUserNamespacePermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AuthService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.authservice.v1.AuthService",
	HandlerType: (*AuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRoles",
			Handler:    _AuthService_GetRoles_Handler,
		},
		{
			MethodName: "GetRolesByPermissions",
			Handler:    _AuthService_GetRolesByPermissions_Handler,
		},
		{
			MethodName: "GetUsers",
			Handler:    _AuthService_GetUsers_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _AuthService_GetUser_Handler,
		},
		{
			MethodName: "InviteUsers",
			Handler:    _AuthService_InviteUsers_Handler,
		},
		{
			MethodName: "ResendUserInvite",
			Handler:    _AuthService_ResendUserInvite_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _AuthService_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _AuthService_DeleteUser_Handler,
		},
		{
			MethodName: "UpdateUserNamespacePermissions",
			Handler:    _AuthService_UpdateUserNamespacePermissions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/authservice/v1/service.proto",
}
