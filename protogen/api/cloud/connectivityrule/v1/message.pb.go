// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: temporal/api/cloud/connectivityrule/v1/message.proto

package connectivityrule

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	v11 "github.com/temporalio/tcld/protogen/api/cloud/region/v1"
	v1 "github.com/temporalio/tcld/protogen/api/cloud/resource/v1"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// temporal:dev
type ConnectivityRule struct {
	// unique id for ConnectivityRule (should be a uuid generated from db)
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// connectivity rule spec including user specified values
	Spec *ConnectivityRuleSpec `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	// connectivity endpoint
	Endpoint        string           `protobuf:"bytes,3,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	ResourceVersion string           `protobuf:"bytes,4,opt,name=resource_version,json=resourceVersion,proto3" json:"resource_version,omitempty"`
	State           v1.ResourceState `protobuf:"varint,5,opt,name=state,proto3,enum=temporal.api.cloud.resource.v1.ResourceState" json:"state,omitempty"`
	// the id of the async operation that is creating/updating/deleting the user, if any
	AsyncOperationId string `protobuf:"bytes,6,opt,name=async_operation_id,json=asyncOperationId,proto3" json:"async_operation_id,omitempty"`
	// the date and time when the user was created
	CreatedTime *types.Timestamp `protobuf:"bytes,7,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`
}

func (m *ConnectivityRule) Reset()      { *m = ConnectivityRule{} }
func (*ConnectivityRule) ProtoMessage() {}
func (*ConnectivityRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d8eb943a8c14c63, []int{0}
}
func (m *ConnectivityRule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConnectivityRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConnectivityRule.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConnectivityRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConnectivityRule.Merge(m, src)
}
func (m *ConnectivityRule) XXX_Size() int {
	return m.Size()
}
func (m *ConnectivityRule) XXX_DiscardUnknown() {
	xxx_messageInfo_ConnectivityRule.DiscardUnknown(m)
}

var xxx_messageInfo_ConnectivityRule proto.InternalMessageInfo

func (m *ConnectivityRule) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ConnectivityRule) GetSpec() *ConnectivityRuleSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *ConnectivityRule) GetEndpoint() string {
	if m != nil {
		return m.Endpoint
	}
	return ""
}

func (m *ConnectivityRule) GetResourceVersion() string {
	if m != nil {
		return m.ResourceVersion
	}
	return ""
}

func (m *ConnectivityRule) GetState() v1.ResourceState {
	if m != nil {
		return m.State
	}
	return v1.RESOURCE_STATE_UNSPECIFIED
}

func (m *ConnectivityRule) GetAsyncOperationId() string {
	if m != nil {
		return m.AsyncOperationId
	}
	return ""
}

func (m *ConnectivityRule) GetCreatedTime() *types.Timestamp {
	if m != nil {
		return m.CreatedTime
	}
	return nil
}

// spec that passed in when create/update the connectivity rule
// temporal:dev
type ConnectivityRuleSpec struct {
	// Types that are valid to be assigned to ConnectionType:
	//
	//	*ConnectivityRuleSpec_PublicRule
	//	*ConnectivityRuleSpec_PrivateRule
	ConnectionType isConnectivityRuleSpec_ConnectionType `protobuf_oneof:"connection_type"`
}

func (m *ConnectivityRuleSpec) Reset()      { *m = ConnectivityRuleSpec{} }
func (*ConnectivityRuleSpec) ProtoMessage() {}
func (*ConnectivityRuleSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d8eb943a8c14c63, []int{1}
}
func (m *ConnectivityRuleSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConnectivityRuleSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConnectivityRuleSpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConnectivityRuleSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConnectivityRuleSpec.Merge(m, src)
}
func (m *ConnectivityRuleSpec) XXX_Size() int {
	return m.Size()
}
func (m *ConnectivityRuleSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_ConnectivityRuleSpec.DiscardUnknown(m)
}

var xxx_messageInfo_ConnectivityRuleSpec proto.InternalMessageInfo

type isConnectivityRuleSpec_ConnectionType interface {
	isConnectivityRuleSpec_ConnectionType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ConnectivityRuleSpec_PublicRule struct {
	PublicRule *PublicConnectivityRule `protobuf:"bytes,1,opt,name=public_rule,json=publicRule,proto3,oneof" json:"public_rule,omitempty"`
}
type ConnectivityRuleSpec_PrivateRule struct {
	PrivateRule *PrivateConnectivityRule `protobuf:"bytes,2,opt,name=private_rule,json=privateRule,proto3,oneof" json:"private_rule,omitempty"`
}

func (*ConnectivityRuleSpec_PublicRule) isConnectivityRuleSpec_ConnectionType()  {}
func (*ConnectivityRuleSpec_PrivateRule) isConnectivityRuleSpec_ConnectionType() {}

func (m *ConnectivityRuleSpec) GetConnectionType() isConnectivityRuleSpec_ConnectionType {
	if m != nil {
		return m.ConnectionType
	}
	return nil
}

func (m *ConnectivityRuleSpec) GetPublicRule() *PublicConnectivityRule {
	if x, ok := m.GetConnectionType().(*ConnectivityRuleSpec_PublicRule); ok {
		return x.PublicRule
	}
	return nil
}

func (m *ConnectivityRuleSpec) GetPrivateRule() *PrivateConnectivityRule {
	if x, ok := m.GetConnectionType().(*ConnectivityRuleSpec_PrivateRule); ok {
		return x.PrivateRule
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ConnectivityRuleSpec) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ConnectivityRuleSpec_PublicRule)(nil),
		(*ConnectivityRuleSpec_PrivateRule)(nil),
	}
}

// temporal:dev
type PublicConnectivityRule struct {
}

func (m *PublicConnectivityRule) Reset()      { *m = PublicConnectivityRule{} }
func (*PublicConnectivityRule) ProtoMessage() {}
func (*PublicConnectivityRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d8eb943a8c14c63, []int{2}
}
func (m *PublicConnectivityRule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PublicConnectivityRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PublicConnectivityRule.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PublicConnectivityRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublicConnectivityRule.Merge(m, src)
}
func (m *PublicConnectivityRule) XXX_Size() int {
	return m.Size()
}
func (m *PublicConnectivityRule) XXX_DiscardUnknown() {
	xxx_messageInfo_PublicConnectivityRule.DiscardUnknown(m)
}

var xxx_messageInfo_PublicConnectivityRule proto.InternalMessageInfo

// temporal:dev
type PrivateConnectivityRule struct {
	// connection id provided by user so we enforce the private connectivity.  This is required both by AWS and GCP
	ConnectionId string `protobuf:"bytes,1,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	// for gcp private connectivity service, gcp needs both gcp project id and the Private Service Connect Connection IDs
	// AWS only needs the connection_id
	GcpProjectId string `protobuf:"bytes,2,opt,name=gcp_project_id,json=gcpProjectId,proto3" json:"gcp_project_id,omitempty"`
	// connectivity region, should be align with the namespace
	Region string `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
	// cloud provider of the rule (of the namespace), because different provider may need different inputs
	CloudProvider v11.Region_CloudProvider `protobuf:"varint,4,opt,name=cloud_provider,json=cloudProvider,proto3,enum=temporal.api.cloud.region.v1.Region_CloudProvider" json:"cloud_provider,omitempty"`
}

func (m *PrivateConnectivityRule) Reset()      { *m = PrivateConnectivityRule{} }
func (*PrivateConnectivityRule) ProtoMessage() {}
func (*PrivateConnectivityRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d8eb943a8c14c63, []int{3}
}
func (m *PrivateConnectivityRule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrivateConnectivityRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrivateConnectivityRule.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrivateConnectivityRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrivateConnectivityRule.Merge(m, src)
}
func (m *PrivateConnectivityRule) XXX_Size() int {
	return m.Size()
}
func (m *PrivateConnectivityRule) XXX_DiscardUnknown() {
	xxx_messageInfo_PrivateConnectivityRule.DiscardUnknown(m)
}

var xxx_messageInfo_PrivateConnectivityRule proto.InternalMessageInfo

func (m *PrivateConnectivityRule) GetConnectionId() string {
	if m != nil {
		return m.ConnectionId
	}
	return ""
}

func (m *PrivateConnectivityRule) GetGcpProjectId() string {
	if m != nil {
		return m.GcpProjectId
	}
	return ""
}

func (m *PrivateConnectivityRule) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *PrivateConnectivityRule) GetCloudProvider() v11.Region_CloudProvider {
	if m != nil {
		return m.CloudProvider
	}
	return v11.CLOUD_PROVIDER_UNSPECIFIED
}

func init() {
	proto.RegisterType((*ConnectivityRule)(nil), "temporal.api.cloud.connectivityrule.v1.ConnectivityRule")
	proto.RegisterType((*ConnectivityRuleSpec)(nil), "temporal.api.cloud.connectivityrule.v1.ConnectivityRuleSpec")
	proto.RegisterType((*PublicConnectivityRule)(nil), "temporal.api.cloud.connectivityrule.v1.PublicConnectivityRule")
	proto.RegisterType((*PrivateConnectivityRule)(nil), "temporal.api.cloud.connectivityrule.v1.PrivateConnectivityRule")
}

func init() {
	proto.RegisterFile("temporal/api/cloud/connectivityrule/v1/message.proto", fileDescriptor_7d8eb943a8c14c63)
}

var fileDescriptor_7d8eb943a8c14c63 = []byte{
	// 630 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0xc1, 0x6f, 0xd3, 0x3e,
	0x14, 0x8e, 0xf3, 0xdb, 0xf6, 0x03, 0xb7, 0xeb, 0x86, 0x85, 0x46, 0xd4, 0x83, 0x99, 0x0a, 0x42,
	0x1d, 0x1a, 0x8e, 0x5a, 0x38, 0x05, 0x06, 0xda, 0x76, 0x61, 0x07, 0x44, 0x95, 0x4d, 0x93, 0xe0,
	0x12, 0x65, 0x8e, 0x89, 0x8c, 0xda, 0xd8, 0x4a, 0xdc, 0x4a, 0xbb, 0x71, 0xe4, 0xc8, 0x9f, 0x81,
	0xf8, 0x4b, 0x38, 0xee, 0xc6, 0x8e, 0x2c, 0xbb, 0x20, 0x24, 0xa4, 0x89, 0xbf, 0x00, 0xc5, 0x4e,
	0xb6, 0xaa, 0x0b, 0xa8, 0xb7, 0xbc, 0xe7, 0xef, 0xfb, 0xde, 0xf3, 0xe7, 0xf7, 0x02, 0x9f, 0x28,
	0x36, 0x92, 0x22, 0x0d, 0x87, 0x6e, 0x28, 0xb9, 0x4b, 0x87, 0x62, 0x1c, 0xb9, 0x54, 0x24, 0x09,
	0xa3, 0x8a, 0x4f, 0xb8, 0x3a, 0x4e, 0xc7, 0x43, 0xe6, 0x4e, 0x7a, 0xee, 0x88, 0x65, 0x59, 0x18,
	0x33, 0x22, 0x53, 0xa1, 0x04, 0x7a, 0x50, 0xb1, 0x48, 0x28, 0x39, 0xd1, 0x2c, 0x32, 0xcb, 0x22,
	0x93, 0x5e, 0xfb, 0x61, 0x8d, 0x7a, 0xca, 0x62, 0x2e, 0x92, 0x6b, 0x9a, 0xed, 0xcd, 0x5a, 0x6c,
	0x26, 0xc6, 0x29, 0xbd, 0xde, 0x41, 0xfb, 0x6e, 0x2c, 0x44, 0x3c, 0x64, 0xae, 0x8e, 0x8e, 0xc6,
	0xef, 0x5c, 0xc5, 0x47, 0x2c, 0x53, 0xe1, 0x48, 0x1a, 0x40, 0xe7, 0x97, 0x0d, 0x57, 0x77, 0xa7,
	0x5a, 0xf2, 0xc7, 0x43, 0x86, 0x5a, 0xd0, 0xe6, 0x91, 0x03, 0xd6, 0x41, 0xf7, 0xa6, 0x6f, 0xf3,
	0x08, 0x0d, 0xe0, 0x42, 0x26, 0x19, 0x75, 0xec, 0x75, 0xd0, 0x6d, 0xf4, 0x9f, 0x91, 0xf9, 0xae,
	0x45, 0x66, 0x75, 0xf7, 0x25, 0xa3, 0xbe, 0x56, 0x42, 0x6d, 0x78, 0x83, 0x25, 0x91, 0x14, 0x3c,
	0x51, 0xce, 0x7f, 0xba, 0xce, 0x65, 0x8c, 0x36, 0xe0, 0x6a, 0x75, 0xa1, 0x60, 0xc2, 0xd2, 0x8c,
	0x8b, 0xc4, 0x59, 0xd0, 0x98, 0x95, 0x2a, 0x7f, 0x68, 0xd2, 0x68, 0x17, 0x2e, 0x66, 0x2a, 0x54,
	0xcc, 0x59, 0x5c, 0x07, 0xdd, 0x56, 0xff, 0x51, 0x5d, 0x67, 0x15, 0xa7, 0xe8, 0xc8, 0x2f, 0xbf,
	0xf7, 0x0b, 0x92, 0x6f, 0xb8, 0x68, 0x13, 0xa2, 0x30, 0x3b, 0x4e, 0x68, 0x20, 0x24, 0x4b, 0x43,
	0xc5, 0x45, 0x12, 0xf0, 0xc8, 0x59, 0xd2, 0x15, 0x57, 0xf5, 0xc9, 0xeb, 0xea, 0x60, 0x2f, 0x42,
	0x5b, 0xb0, 0x49, 0x53, 0x16, 0x2a, 0x16, 0x05, 0x85, 0x97, 0xce, 0xff, 0xda, 0x93, 0x36, 0x31,
	0x46, 0x93, 0xca, 0x68, 0x72, 0x50, 0x19, 0xed, 0x37, 0x4a, 0x7c, 0x91, 0xe9, 0xfc, 0x06, 0xf0,
	0x76, 0x9d, 0x2f, 0x28, 0x84, 0x0d, 0x39, 0x3e, 0x1a, 0x72, 0x1a, 0x14, 0xf6, 0x69, 0xf3, 0x1b,
	0xfd, 0xe7, 0xf3, 0x5a, 0x3d, 0xd0, 0xd4, 0x59, 0xe1, 0x97, 0x96, 0x0f, 0x8d, 0xa8, 0x7e, 0xd6,
	0x08, 0x36, 0x65, 0xca, 0x27, 0xa1, 0x62, 0xa6, 0x86, 0x79, 0xce, 0x17, 0x73, 0xd7, 0x30, 0xdc,
	0x9a, 0x22, 0x8d, 0x52, 0xb6, 0x08, 0x77, 0x6e, 0xc1, 0x95, 0x8a, 0x2d, 0x92, 0x40, 0x1d, 0x4b,
	0xd6, 0x71, 0xe0, 0x5a, 0x7d, 0x83, 0x9d, 0x6f, 0x00, 0xde, 0xf9, 0x8b, 0x2e, 0xba, 0x07, 0x97,
	0xa7, 0x84, 0x2e, 0x07, 0xb2, 0x79, 0x95, 0xdc, 0x8b, 0xd0, 0x7d, 0xd8, 0x8a, 0xa9, 0x0c, 0x64,
	0x2a, 0xde, 0x33, 0xaa, 0x0a, 0x94, 0x6d, 0x50, 0x31, 0x95, 0x03, 0x93, 0xdc, 0x8b, 0xd0, 0x1a,
	0x5c, 0x32, 0xfb, 0x54, 0x0e, 0x5b, 0x19, 0xa1, 0x37, 0xb0, 0xa5, 0xef, 0x5b, 0xf0, 0x27, 0x3c,
	0x62, 0xa9, 0x1e, 0xb4, 0x56, 0xbf, 0x5f, 0x3f, 0x48, 0x05, 0xc7, 0x8c, 0x91, 0xfe, 0xda, 0x2d,
	0xd2, 0x83, 0x92, 0xe9, 0x2f, 0xd3, 0xe9, 0x70, 0xe7, 0xa3, 0x7d, 0x72, 0x86, 0xad, 0xd3, 0x33,
	0x6c, 0x5d, 0x9c, 0x61, 0xf0, 0x21, 0xc7, 0xe0, 0x73, 0x8e, 0xc1, 0xd7, 0x1c, 0x83, 0x93, 0x1c,
	0x83, 0xef, 0x39, 0x06, 0x3f, 0x72, 0x6c, 0x5d, 0xe4, 0x18, 0x7c, 0x3a, 0xc7, 0xd6, 0xc9, 0x39,
	0xb6, 0x4e, 0xcf, 0xb1, 0x05, 0x37, 0xb8, 0x98, 0xf3, 0x3d, 0x76, 0x9a, 0xaf, 0xcc, 0xaa, 0x0f,
	0x8a, 0x91, 0x1b, 0x80, 0xb7, 0x5b, 0xf1, 0x14, 0x95, 0x8b, 0x7f, 0xff, 0xa9, 0x9e, 0xce, 0xe6,
	0xbe, 0xd8, 0xdd, 0x83, 0x92, 0xcc, 0x05, 0xd9, 0x96, 0xdc, 0x5c, 0xef, 0xda, 0x12, 0x93, 0xc3,
	0xde, 0x4f, 0x7b, 0xf3, 0x0a, 0xea, 0x79, 0xdb, 0x92, 0x7b, 0x9e, 0x06, 0x7b, 0xde, 0x2c, 0xda,
	0xf3, 0x0e, 0x7b, 0x47, 0x4b, 0x7a, 0x29, 0x1e, 0xff, 0x09, 0x00, 0x00, 0xff, 0xff, 0xc7, 0xe4,
	0xef, 0xde, 0x45, 0x05, 0x00, 0x00,
}

func (this *ConnectivityRule) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ConnectivityRule)
	if !ok {
		that2, ok := that.(ConnectivityRule)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if !this.Spec.Equal(that1.Spec) {
		return false
	}
	if this.Endpoint != that1.Endpoint {
		return false
	}
	if this.ResourceVersion != that1.ResourceVersion {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if this.AsyncOperationId != that1.AsyncOperationId {
		return false
	}
	if !this.CreatedTime.Equal(that1.CreatedTime) {
		return false
	}
	return true
}
func (this *ConnectivityRuleSpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ConnectivityRuleSpec)
	if !ok {
		that2, ok := that.(ConnectivityRuleSpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.ConnectionType == nil {
		if this.ConnectionType != nil {
			return false
		}
	} else if this.ConnectionType == nil {
		return false
	} else if !this.ConnectionType.Equal(that1.ConnectionType) {
		return false
	}
	return true
}
func (this *ConnectivityRuleSpec_PublicRule) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ConnectivityRuleSpec_PublicRule)
	if !ok {
		that2, ok := that.(ConnectivityRuleSpec_PublicRule)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PublicRule.Equal(that1.PublicRule) {
		return false
	}
	return true
}
func (this *ConnectivityRuleSpec_PrivateRule) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ConnectivityRuleSpec_PrivateRule)
	if !ok {
		that2, ok := that.(ConnectivityRuleSpec_PrivateRule)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PrivateRule.Equal(that1.PrivateRule) {
		return false
	}
	return true
}
func (this *PublicConnectivityRule) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PublicConnectivityRule)
	if !ok {
		that2, ok := that.(PublicConnectivityRule)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *PrivateConnectivityRule) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PrivateConnectivityRule)
	if !ok {
		that2, ok := that.(PrivateConnectivityRule)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ConnectionId != that1.ConnectionId {
		return false
	}
	if this.GcpProjectId != that1.GcpProjectId {
		return false
	}
	if this.Region != that1.Region {
		return false
	}
	if this.CloudProvider != that1.CloudProvider {
		return false
	}
	return true
}
func (this *ConnectivityRule) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&connectivityrule.ConnectivityRule{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	if this.Spec != nil {
		s = append(s, "Spec: "+fmt.Sprintf("%#v", this.Spec)+",\n")
	}
	s = append(s, "Endpoint: "+fmt.Sprintf("%#v", this.Endpoint)+",\n")
	s = append(s, "ResourceVersion: "+fmt.Sprintf("%#v", this.ResourceVersion)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "AsyncOperationId: "+fmt.Sprintf("%#v", this.AsyncOperationId)+",\n")
	if this.CreatedTime != nil {
		s = append(s, "CreatedTime: "+fmt.Sprintf("%#v", this.CreatedTime)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ConnectivityRuleSpec) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&connectivityrule.ConnectivityRuleSpec{")
	if this.ConnectionType != nil {
		s = append(s, "ConnectionType: "+fmt.Sprintf("%#v", this.ConnectionType)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ConnectivityRuleSpec_PublicRule) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&connectivityrule.ConnectivityRuleSpec_PublicRule{` +
		`PublicRule:` + fmt.Sprintf("%#v", this.PublicRule) + `}`}, ", ")
	return s
}
func (this *ConnectivityRuleSpec_PrivateRule) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&connectivityrule.ConnectivityRuleSpec_PrivateRule{` +
		`PrivateRule:` + fmt.Sprintf("%#v", this.PrivateRule) + `}`}, ", ")
	return s
}
func (this *PublicConnectivityRule) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&connectivityrule.PublicConnectivityRule{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PrivateConnectivityRule) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&connectivityrule.PrivateConnectivityRule{")
	s = append(s, "ConnectionId: "+fmt.Sprintf("%#v", this.ConnectionId)+",\n")
	s = append(s, "GcpProjectId: "+fmt.Sprintf("%#v", this.GcpProjectId)+",\n")
	s = append(s, "Region: "+fmt.Sprintf("%#v", this.Region)+",\n")
	s = append(s, "CloudProvider: "+fmt.Sprintf("%#v", this.CloudProvider)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringMessage(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *ConnectivityRule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConnectivityRule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConnectivityRule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CreatedTime != nil {
		{
			size, err := m.CreatedTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.AsyncOperationId) > 0 {
		i -= len(m.AsyncOperationId)
		copy(dAtA[i:], m.AsyncOperationId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.AsyncOperationId)))
		i--
		dAtA[i] = 0x32
	}
	if m.State != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x28
	}
	if len(m.ResourceVersion) > 0 {
		i -= len(m.ResourceVersion)
		copy(dAtA[i:], m.ResourceVersion)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.ResourceVersion)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Endpoint) > 0 {
		i -= len(m.Endpoint)
		copy(dAtA[i:], m.Endpoint)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Endpoint)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Spec != nil {
		{
			size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConnectivityRuleSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConnectivityRuleSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConnectivityRuleSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ConnectionType != nil {
		{
			size := m.ConnectionType.Size()
			i -= size
			if _, err := m.ConnectionType.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ConnectivityRuleSpec_PublicRule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConnectivityRuleSpec_PublicRule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PublicRule != nil {
		{
			size, err := m.PublicRule.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *ConnectivityRuleSpec_PrivateRule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConnectivityRuleSpec_PrivateRule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PrivateRule != nil {
		{
			size, err := m.PrivateRule.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *PublicConnectivityRule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PublicConnectivityRule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PublicConnectivityRule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *PrivateConnectivityRule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrivateConnectivityRule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrivateConnectivityRule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CloudProvider != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.CloudProvider))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Region) > 0 {
		i -= len(m.Region)
		copy(dAtA[i:], m.Region)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Region)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.GcpProjectId) > 0 {
		i -= len(m.GcpProjectId)
		copy(dAtA[i:], m.GcpProjectId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.GcpProjectId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ConnectionId) > 0 {
		i -= len(m.ConnectionId)
		copy(dAtA[i:], m.ConnectionId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.ConnectionId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMessage(dAtA []byte, offset int, v uint64) int {
	offset -= sovMessage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ConnectivityRule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Endpoint)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.ResourceVersion)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovMessage(uint64(m.State))
	}
	l = len(m.AsyncOperationId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.CreatedTime != nil {
		l = m.CreatedTime.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *ConnectivityRuleSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ConnectionType != nil {
		n += m.ConnectionType.Size()
	}
	return n
}

func (m *ConnectivityRuleSpec_PublicRule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PublicRule != nil {
		l = m.PublicRule.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *ConnectivityRuleSpec_PrivateRule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PrivateRule != nil {
		l = m.PrivateRule.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *PublicConnectivityRule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *PrivateConnectivityRule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConnectionId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.GcpProjectId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Region)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.CloudProvider != 0 {
		n += 1 + sovMessage(uint64(m.CloudProvider))
	}
	return n
}

func sovMessage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMessage(x uint64) (n int) {
	return sovMessage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ConnectivityRule) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ConnectivityRule{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Spec:` + strings.Replace(this.Spec.String(), "ConnectivityRuleSpec", "ConnectivityRuleSpec", 1) + `,`,
		`Endpoint:` + fmt.Sprintf("%v", this.Endpoint) + `,`,
		`ResourceVersion:` + fmt.Sprintf("%v", this.ResourceVersion) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`AsyncOperationId:` + fmt.Sprintf("%v", this.AsyncOperationId) + `,`,
		`CreatedTime:` + strings.Replace(fmt.Sprintf("%v", this.CreatedTime), "Timestamp", "types.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ConnectivityRuleSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ConnectivityRuleSpec{`,
		`ConnectionType:` + fmt.Sprintf("%v", this.ConnectionType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ConnectivityRuleSpec_PublicRule) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ConnectivityRuleSpec_PublicRule{`,
		`PublicRule:` + strings.Replace(fmt.Sprintf("%v", this.PublicRule), "PublicConnectivityRule", "PublicConnectivityRule", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ConnectivityRuleSpec_PrivateRule) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ConnectivityRuleSpec_PrivateRule{`,
		`PrivateRule:` + strings.Replace(fmt.Sprintf("%v", this.PrivateRule), "PrivateConnectivityRule", "PrivateConnectivityRule", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PublicConnectivityRule) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PublicConnectivityRule{`,
		`}`,
	}, "")
	return s
}
func (this *PrivateConnectivityRule) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PrivateConnectivityRule{`,
		`ConnectionId:` + fmt.Sprintf("%v", this.ConnectionId) + `,`,
		`GcpProjectId:` + fmt.Sprintf("%v", this.GcpProjectId) + `,`,
		`Region:` + fmt.Sprintf("%v", this.Region) + `,`,
		`CloudProvider:` + fmt.Sprintf("%v", this.CloudProvider) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringMessage(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ConnectivityRule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConnectivityRule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConnectivityRule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &ConnectivityRuleSpec{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Endpoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Endpoint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= v1.ResourceState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AsyncOperationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AsyncOperationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedTime == nil {
				m.CreatedTime = &types.Timestamp{}
			}
			if err := m.CreatedTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConnectivityRuleSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConnectivityRuleSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConnectivityRuleSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicRule", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PublicConnectivityRule{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ConnectionType = &ConnectivityRuleSpec_PublicRule{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateRule", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PrivateConnectivityRule{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ConnectionType = &ConnectivityRuleSpec_PrivateRule{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PublicConnectivityRule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PublicConnectivityRule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PublicConnectivityRule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrivateConnectivityRule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrivateConnectivityRule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrivateConnectivityRule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GcpProjectId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GcpProjectId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Region = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloudProvider", wireType)
			}
			m.CloudProvider = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CloudProvider |= v11.Region_CloudProvider(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMessage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMessage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMessage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMessage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMessage = fmt.Errorf("proto: unexpected end of group")
)
