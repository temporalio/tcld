// Code generated by protoc-gen-go-versioning. DO NOT EDIT.

package namespace

import (
	proto "github.com/gogo/protobuf/proto"
	versioning "github.com/temporalio/tcld/utils"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// MergeMtlsAuthSpec merges versioned fields of MtlsAuthSpec
// Meant for incoming request messages.
func (m *MtlsAuthSpec) Merge(requestVersion string, getStored func() (*MtlsAuthSpec, error)) error {
	var stored *MtlsAuthSpec
	var fetchedStored bool

	// merge field 'Enabled'
	// honor min_version='2024-05-13-00'
	if requestVersion < "2024-05-13-00" {
		if !versioning.IsZero(m.Enabled) {
			return status.Errorf(codes.InvalidArgument, "field 'Enabled' is not supported in version %s", requestVersion)
		}
		if !fetchedStored {
			var err error
			stored, err = getStored()
			if err != nil {
				return err
			}
			fetchedStored = true
		}
		if stored != nil {
			m.Enabled = stored.Enabled
		}

	}

	return nil
}

// SanitizeMtlsAuthSpec sanitizes versioned fields of MtlsAuthSpec
// Meant for outgoing response messages.
func (m *MtlsAuthSpec) Sanitize(requestVersion string) {

	// sanitize field 'Enabled'
	// honor min_version='2024-05-13-00'
	if requestVersion < "2024-05-13-00" {
		if !versioning.IsZero(m.Enabled) {
			m.Enabled = false
		}

	}

}

// MergeNamespaceSpec merges versioned fields of NamespaceSpec
// Meant for incoming request messages.
func (m *NamespaceSpec) Merge(requestVersion string, getStored func() (*NamespaceSpec, error)) error {
	var stored *NamespaceSpec
	var fetchedStored bool

	// merge field 'MtlsAuth'
	if m.MtlsAuth == nil {
		m.MtlsAuth = new(MtlsAuthSpec)
	}
	if err := m.MtlsAuth.Merge(requestVersion, func() (*MtlsAuthSpec, error) {
		if !fetchedStored {
			var err error
			stored, err = getStored()
			if err != nil {
				return nil, err
			}
			fetchedStored = true
		}
		return stored.MtlsAuth, nil
	}); err != nil {
		return err
	}

	// merge field 'ApiKeyAuth'
	// honor min_version='2024-05-13-00'
	if requestVersion < "2024-05-13-00" {
		if !versioning.IsZero(m.ApiKeyAuth) {
			return status.Errorf(codes.InvalidArgument, "field 'ApiKeyAuth' is not supported in version %s", requestVersion)
		}
		if stored == nil {
			var err error
			stored, err = getStored()
			if err != nil {
				return err
			}
		}
		if stored != nil {
			m.ApiKeyAuth = proto.Clone(stored.ApiKeyAuth).(*ApiKeyAuthSpec)
		}

	}

	return nil
}

// SanitizeNamespaceSpec sanitizes versioned fields of NamespaceSpec
// Meant for outgoing response messages.
func (m *NamespaceSpec) Sanitize(requestVersion string) {

	// sanitize field 'MtlsAuth'
	if m.MtlsAuth != nil {
		m.MtlsAuth.Sanitize(requestVersion)
	}

	// sanitize field 'ApiKeyAuth'
	// honor min_version='2024-05-13-00'
	if requestVersion < "2024-05-13-00" {
		if !versioning.IsZero(m.ApiKeyAuth) {
			m.ApiKeyAuth = nil
		}

	}

}
