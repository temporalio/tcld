// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: temporal/api/cloud/usage/v1/message.proto

package usage

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RecordType int32

const (
	RECORD_TYPE_UNSPECIFIED      RecordType = 0
	RECORD_TYPE_ACTIONS          RecordType = 1
	RECORD_TYPE_ACTIVE_STORAGE   RecordType = 2
	RECORD_TYPE_RETAINED_STORAGE RecordType = 3
)

var RecordType_name = map[int32]string{
	0: "Unspecified",
	1: "Actions",
	2: "ActiveStorage",
	3: "RetainedStorage",
}

var RecordType_value = map[string]int32{
	"Unspecified":     0,
	"Actions":         1,
	"ActiveStorage":   2,
	"RetainedStorage": 3,
}

func (RecordType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9315f0953a0b0c9b, []int{0}
}

type RecordUnit int32

const (
	RECORD_UNIT_UNSPECIFIED  RecordUnit = 0
	RECORD_UNIT_NUMBER       RecordUnit = 1
	RECORD_UNIT_BYTE_SECONDS RecordUnit = 2
)

var RecordUnit_name = map[int32]string{
	0: "Unspecified",
	1: "Number",
	2: "ByteSeconds",
}

var RecordUnit_value = map[string]int32{
	"Unspecified": 0,
	"Number":      1,
	"ByteSeconds": 2,
}

func (RecordUnit) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9315f0953a0b0c9b, []int{1}
}

type GroupByKey int32

const (
	GROUP_BY_KEY_UNSPECIFIED GroupByKey = 0
	GROUP_BY_KEY_NAMESPACE   GroupByKey = 1
)

var GroupByKey_name = map[int32]string{
	0: "Unspecified",
	1: "Namespace",
}

var GroupByKey_value = map[string]int32{
	"Unspecified": 0,
	"Namespace":   1,
}

func (GroupByKey) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9315f0953a0b0c9b, []int{2}
}

type Summary struct {
	// Start of UTC day for now (inclusive)
	StartTime *types.Timestamp `protobuf:"bytes,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// End of UTC day for now (exclusive)
	EndTime *types.Timestamp `protobuf:"bytes,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// Records grouped by namespace
	RecordGroups []*RecordGroup `protobuf:"bytes,3,rep,name=record_groups,json=recordGroups,proto3" json:"record_groups,omitempty"`
	// True if data for given time window is not fully available yet (e.g. delays)
	// When true, records could be added in the future (until false)
	Incomplete bool `protobuf:"varint,4,opt,name=incomplete,proto3" json:"incomplete,omitempty"`
}

func (m *Summary) Reset()      { *m = Summary{} }
func (*Summary) ProtoMessage() {}
func (*Summary) Descriptor() ([]byte, []int) {
	return fileDescriptor_9315f0953a0b0c9b, []int{0}
}
func (m *Summary) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Summary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Summary.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Summary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Summary.Merge(m, src)
}
func (m *Summary) XXX_Size() int {
	return m.Size()
}
func (m *Summary) XXX_DiscardUnknown() {
	xxx_messageInfo_Summary.DiscardUnknown(m)
}

var xxx_messageInfo_Summary proto.InternalMessageInfo

func (m *Summary) GetStartTime() *types.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *Summary) GetEndTime() *types.Timestamp {
	if m != nil {
		return m.EndTime
	}
	return nil
}

func (m *Summary) GetRecordGroups() []*RecordGroup {
	if m != nil {
		return m.RecordGroups
	}
	return nil
}

func (m *Summary) GetIncomplete() bool {
	if m != nil {
		return m.Incomplete
	}
	return false
}

type RecordGroup struct {
	// GroupBy keys and their values for this record group. Multiple fields are combined with logical AND.
	GroupBys []*GroupBy `protobuf:"bytes,1,rep,name=group_bys,json=groupBys,proto3" json:"group_bys,omitempty"`
	Records  []*Record  `protobuf:"bytes,2,rep,name=records,proto3" json:"records,omitempty"`
}

func (m *RecordGroup) Reset()      { *m = RecordGroup{} }
func (*RecordGroup) ProtoMessage() {}
func (*RecordGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_9315f0953a0b0c9b, []int{1}
}
func (m *RecordGroup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecordGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecordGroup.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecordGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecordGroup.Merge(m, src)
}
func (m *RecordGroup) XXX_Size() int {
	return m.Size()
}
func (m *RecordGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_RecordGroup.DiscardUnknown(m)
}

var xxx_messageInfo_RecordGroup proto.InternalMessageInfo

func (m *RecordGroup) GetGroupBys() []*GroupBy {
	if m != nil {
		return m.GroupBys
	}
	return nil
}

func (m *RecordGroup) GetRecords() []*Record {
	if m != nil {
		return m.Records
	}
	return nil
}

type GroupBy struct {
	Key   GroupByKey `protobuf:"varint,1,opt,name=key,proto3,enum=temporal.api.cloud.usage.v1.GroupByKey" json:"key,omitempty"`
	Value string     `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *GroupBy) Reset()      { *m = GroupBy{} }
func (*GroupBy) ProtoMessage() {}
func (*GroupBy) Descriptor() ([]byte, []int) {
	return fileDescriptor_9315f0953a0b0c9b, []int{2}
}
func (m *GroupBy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupBy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupBy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupBy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupBy.Merge(m, src)
}
func (m *GroupBy) XXX_Size() int {
	return m.Size()
}
func (m *GroupBy) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupBy.DiscardUnknown(m)
}

var xxx_messageInfo_GroupBy proto.InternalMessageInfo

func (m *GroupBy) GetKey() GroupByKey {
	if m != nil {
		return m.Key
	}
	return GROUP_BY_KEY_UNSPECIFIED
}

func (m *GroupBy) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type Record struct {
	Type  RecordType `protobuf:"varint,1,opt,name=type,proto3,enum=temporal.api.cloud.usage.v1.RecordType" json:"type,omitempty"`
	Unit  RecordUnit `protobuf:"varint,2,opt,name=unit,proto3,enum=temporal.api.cloud.usage.v1.RecordUnit" json:"unit,omitempty"`
	Value float64    `protobuf:"fixed64,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *Record) Reset()      { *m = Record{} }
func (*Record) ProtoMessage() {}
func (*Record) Descriptor() ([]byte, []int) {
	return fileDescriptor_9315f0953a0b0c9b, []int{3}
}
func (m *Record) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Record) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Record.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Record) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Record.Merge(m, src)
}
func (m *Record) XXX_Size() int {
	return m.Size()
}
func (m *Record) XXX_DiscardUnknown() {
	xxx_messageInfo_Record.DiscardUnknown(m)
}

var xxx_messageInfo_Record proto.InternalMessageInfo

func (m *Record) GetType() RecordType {
	if m != nil {
		return m.Type
	}
	return RECORD_TYPE_UNSPECIFIED
}

func (m *Record) GetUnit() RecordUnit {
	if m != nil {
		return m.Unit
	}
	return RECORD_UNIT_UNSPECIFIED
}

func (m *Record) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func init() {
	proto.RegisterEnum("temporal.api.cloud.usage.v1.RecordType", RecordType_name, RecordType_value)
	proto.RegisterEnum("temporal.api.cloud.usage.v1.RecordUnit", RecordUnit_name, RecordUnit_value)
	proto.RegisterEnum("temporal.api.cloud.usage.v1.GroupByKey", GroupByKey_name, GroupByKey_value)
	proto.RegisterType((*Summary)(nil), "temporal.api.cloud.usage.v1.Summary")
	proto.RegisterType((*RecordGroup)(nil), "temporal.api.cloud.usage.v1.RecordGroup")
	proto.RegisterType((*GroupBy)(nil), "temporal.api.cloud.usage.v1.GroupBy")
	proto.RegisterType((*Record)(nil), "temporal.api.cloud.usage.v1.Record")
}

func init() {
	proto.RegisterFile("temporal/api/cloud/usage/v1/message.proto", fileDescriptor_9315f0953a0b0c9b)
}

var fileDescriptor_9315f0953a0b0c9b = []byte{
	// 655 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x94, 0x4f, 0x4f, 0x13, 0x41,
	0x18, 0xc6, 0x3b, 0x2d, 0x52, 0x78, 0x41, 0xd3, 0x8c, 0x06, 0x9a, 0x82, 0x63, 0xad, 0x26, 0x54,
	0x0e, 0xdb, 0x14, 0xe3, 0x81, 0x25, 0x1e, 0xb6, 0xed, 0x40, 0x1a, 0xd2, 0x3f, 0x99, 0x6e, 0x49,
	0xca, 0x65, 0xb3, 0xd0, 0xb1, 0xd9, 0xd8, 0xed, 0x6e, 0xf6, 0x0f, 0xc9, 0xde, 0x3c, 0x78, 0xd7,
	0xa3, 0x1f, 0xc1, 0xf8, 0x49, 0x3c, 0xe2, 0x8d, 0xa3, 0x2c, 0x17, 0xc3, 0x89, 0x8f, 0x60, 0x76,
	0x96, 0xda, 0x95, 0x18, 0xec, 0x6d, 0x66, 0xde, 0xe7, 0xf7, 0xbc, 0xcf, 0xce, 0x64, 0x5f, 0x78,
	0xe5, 0x71, 0xd3, 0xb6, 0x1c, 0x7d, 0x5c, 0xd1, 0x6d, 0xa3, 0x72, 0x3a, 0xb6, 0xfc, 0x61, 0xc5,
	0x77, 0xf5, 0x11, 0xaf, 0x9c, 0x55, 0x2b, 0x26, 0x77, 0xa3, 0xa5, 0x64, 0x3b, 0x96, 0x67, 0xe1,
	0x8d, 0xa9, 0x54, 0xd2, 0x6d, 0x43, 0x12, 0x52, 0x49, 0x48, 0xa5, 0xb3, 0x6a, 0xe1, 0xd9, 0xc8,
	0xb2, 0x46, 0x63, 0x5e, 0x11, 0xd2, 0x13, 0xff, 0x5d, 0xc5, 0x33, 0x4c, 0xee, 0x7a, 0xba, 0x69,
	0xc7, 0x74, 0xe9, 0x1a, 0x41, 0xb6, 0xe7, 0x9b, 0xa6, 0xee, 0x04, 0x78, 0x17, 0xc0, 0xf5, 0x74,
	0xc7, 0xd3, 0x22, 0x51, 0x1e, 0x15, 0x51, 0x79, 0x65, 0xa7, 0x20, 0xc5, 0x0e, 0xd2, 0xd4, 0x41,
	0x52, 0xa7, 0x0e, 0x6c, 0x59, 0xa8, 0xa3, 0x3d, 0x7e, 0x03, 0x4b, 0x7c, 0x32, 0x8c, 0xc1, 0xf4,
	0x7f, 0xc1, 0x2c, 0x9f, 0x0c, 0x05, 0xd6, 0x82, 0x87, 0x0e, 0x3f, 0xb5, 0x9c, 0xa1, 0x36, 0x72,
	0x2c, 0xdf, 0x76, 0xf3, 0x99, 0x62, 0xa6, 0xbc, 0xb2, 0x53, 0x96, 0xee, 0xf9, 0x26, 0x89, 0x09,
	0xe2, 0x20, 0x02, 0xd8, 0xaa, 0x33, 0xdb, 0xb8, 0x98, 0x00, 0x18, 0x93, 0x53, 0xcb, 0xb4, 0xc7,
	0xdc, 0xe3, 0xf9, 0x85, 0x22, 0x2a, 0x2f, 0xb1, 0xc4, 0x49, 0xe9, 0x13, 0x82, 0x95, 0x04, 0x8d,
	0x15, 0x58, 0x16, 0x7d, 0xb5, 0x93, 0xc0, 0xcd, 0x23, 0xd1, 0xfa, 0xe5, 0xbd, 0xad, 0x05, 0x56,
	0x0b, 0xd8, 0xd2, 0x28, 0x5e, 0xb8, 0xf8, 0x2d, 0x64, 0xe3, 0x08, 0x6e, 0x3e, 0x2d, 0x0c, 0x5e,
	0xcc, 0x91, 0x9d, 0x4d, 0x99, 0xd2, 0x31, 0x64, 0x6f, 0x3d, 0xf1, 0x2e, 0x64, 0xde, 0xf3, 0x40,
	0x5c, 0xfb, 0xa3, 0x9d, 0xad, 0x79, 0x62, 0x1c, 0xf2, 0x80, 0x45, 0x0c, 0x7e, 0x02, 0x0f, 0xce,
	0xf4, 0xb1, 0x1f, 0x5f, 0xfd, 0x32, 0x8b, 0x37, 0xa5, 0x2f, 0x08, 0x16, 0xe3, 0x7e, 0x78, 0x0f,
	0x16, 0xbc, 0xc0, 0xe6, 0x73, 0x99, 0xc7, 0x88, 0x1a, 0xd8, 0x9c, 0x09, 0x28, 0x82, 0xfd, 0x89,
	0xe1, 0x09, 0xf3, 0xf9, 0xe0, 0xfe, 0xc4, 0xf0, 0x98, 0x80, 0x66, 0xd1, 0x32, 0x45, 0x54, 0x46,
	0xb7, 0xd1, 0xb6, 0x3f, 0x22, 0x80, 0x59, 0x1f, 0xbc, 0x01, 0xeb, 0x8c, 0xd6, 0x3b, 0xac, 0xa1,
	0xa9, 0x83, 0x2e, 0xd5, 0xfa, 0xed, 0x5e, 0x97, 0xd6, 0x9b, 0xfb, 0x4d, 0xda, 0xc8, 0xa5, 0xf0,
	0x3a, 0x3c, 0x4e, 0x16, 0x95, 0xba, 0xda, 0xec, 0xb4, 0x7b, 0x39, 0x84, 0x09, 0x14, 0xee, 0x16,
	0x8e, 0xa8, 0xd6, 0x53, 0x3b, 0x4c, 0x39, 0xa0, 0xb9, 0x34, 0x2e, 0xc2, 0x66, 0xb2, 0xce, 0xa8,
	0xaa, 0x34, 0xdb, 0xb4, 0xf1, 0x47, 0x91, 0xd9, 0xd6, 0xa6, 0x29, 0xa2, 0xc0, 0x89, 0x14, 0xfd,
	0x76, 0x53, 0xbd, 0x93, 0x62, 0x0d, 0x70, 0xb2, 0xd8, 0xee, 0xb7, 0x6a, 0x94, 0xe5, 0x10, 0xde,
	0x84, 0x7c, 0xf2, 0xbc, 0x36, 0x50, 0xa9, 0xd6, 0xa3, 0xf5, 0x4e, 0xbb, 0xd1, 0xcb, 0xa5, 0xb7,
	0xf7, 0x01, 0x66, 0x6f, 0x15, 0x69, 0x0f, 0x58, 0xa7, 0xdf, 0xd5, 0x6a, 0x03, 0xed, 0x90, 0x0e,
	0xee, 0x74, 0x28, 0xc0, 0xda, 0x5f, 0xd5, 0xb6, 0xd2, 0xa2, 0xbd, 0xae, 0x52, 0xa7, 0x39, 0x54,
	0xfb, 0x81, 0xce, 0x2f, 0x49, 0xea, 0xe2, 0x92, 0xa4, 0x6e, 0x2e, 0x09, 0xfa, 0x10, 0x12, 0xf4,
	0x35, 0x24, 0xe8, 0x7b, 0x48, 0xd0, 0x79, 0x48, 0xd0, 0xcf, 0x90, 0xa0, 0x5f, 0x21, 0x49, 0xdd,
	0x84, 0x04, 0x7d, 0xbe, 0x22, 0xa9, 0xf3, 0x2b, 0x92, 0xba, 0xb8, 0x22, 0x29, 0x20, 0x86, 0x75,
	0xdf, 0x6b, 0xd5, 0x56, 0x5b, 0xf1, 0x24, 0xe9, 0x46, 0xbf, 0x68, 0x17, 0x1d, 0x6f, 0x8d, 0x12,
	0x7a, 0xc3, 0xfa, 0xc7, 0xec, 0xd9, 0x13, 0x8b, 0x6f, 0xe9, 0xa7, 0xea, 0xad, 0xcc, 0xb0, 0x24,
	0xc5, 0x36, 0xa4, 0xba, 0x30, 0xee, 0x0b, 0xe3, 0xa3, 0xea, 0x75, 0xfa, 0xf9, 0xac, 0x2e, 0xcb,
	0x8a, 0x6d, 0xc8, 0xb2, 0x50, 0xc8, 0xb2, 0x90, 0xc8, 0xf2, 0x51, 0xf5, 0x64, 0x51, 0x0c, 0x86,
	0xd7, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0x77, 0x04, 0xc7, 0xa1, 0xeb, 0x04, 0x00, 0x00,
}

func (x RecordType) String() string {
	s, ok := RecordType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x RecordUnit) String() string {
	s, ok := RecordUnit_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x GroupByKey) String() string {
	s, ok := GroupByKey_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Summary) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Summary)
	if !ok {
		that2, ok := that.(Summary)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.StartTime.Equal(that1.StartTime) {
		return false
	}
	if !this.EndTime.Equal(that1.EndTime) {
		return false
	}
	if len(this.RecordGroups) != len(that1.RecordGroups) {
		return false
	}
	for i := range this.RecordGroups {
		if !this.RecordGroups[i].Equal(that1.RecordGroups[i]) {
			return false
		}
	}
	if this.Incomplete != that1.Incomplete {
		return false
	}
	return true
}
func (this *RecordGroup) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RecordGroup)
	if !ok {
		that2, ok := that.(RecordGroup)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.GroupBys) != len(that1.GroupBys) {
		return false
	}
	for i := range this.GroupBys {
		if !this.GroupBys[i].Equal(that1.GroupBys[i]) {
			return false
		}
	}
	if len(this.Records) != len(that1.Records) {
		return false
	}
	for i := range this.Records {
		if !this.Records[i].Equal(that1.Records[i]) {
			return false
		}
	}
	return true
}
func (this *GroupBy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GroupBy)
	if !ok {
		that2, ok := that.(GroupBy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *Record) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Record)
	if !ok {
		that2, ok := that.(Record)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Unit != that1.Unit {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *Summary) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&usage.Summary{")
	if this.StartTime != nil {
		s = append(s, "StartTime: "+fmt.Sprintf("%#v", this.StartTime)+",\n")
	}
	if this.EndTime != nil {
		s = append(s, "EndTime: "+fmt.Sprintf("%#v", this.EndTime)+",\n")
	}
	if this.RecordGroups != nil {
		s = append(s, "RecordGroups: "+fmt.Sprintf("%#v", this.RecordGroups)+",\n")
	}
	s = append(s, "Incomplete: "+fmt.Sprintf("%#v", this.Incomplete)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RecordGroup) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&usage.RecordGroup{")
	if this.GroupBys != nil {
		s = append(s, "GroupBys: "+fmt.Sprintf("%#v", this.GroupBys)+",\n")
	}
	if this.Records != nil {
		s = append(s, "Records: "+fmt.Sprintf("%#v", this.Records)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GroupBy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&usage.GroupBy{")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Record) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&usage.Record{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Unit: "+fmt.Sprintf("%#v", this.Unit)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringMessage(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Summary) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Summary) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Summary) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Incomplete {
		i--
		if m.Incomplete {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.RecordGroups) > 0 {
		for iNdEx := len(m.RecordGroups) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RecordGroups[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.EndTime != nil {
		{
			size, err := m.EndTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.StartTime != nil {
		{
			size, err := m.StartTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RecordGroup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecordGroup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecordGroup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Records) > 0 {
		for iNdEx := len(m.Records) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Records[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.GroupBys) > 0 {
		for iNdEx := len(m.GroupBys) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GroupBys[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GroupBy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupBy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupBy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if m.Key != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Key))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Record) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Record) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Record) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Value))))
		i--
		dAtA[i] = 0x19
	}
	if m.Unit != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Unit))
		i--
		dAtA[i] = 0x10
	}
	if m.Type != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintMessage(dAtA []byte, offset int, v uint64) int {
	offset -= sovMessage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Summary) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StartTime != nil {
		l = m.StartTime.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.EndTime != nil {
		l = m.EndTime.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if len(m.RecordGroups) > 0 {
		for _, e := range m.RecordGroups {
			l = e.Size()
			n += 1 + l + sovMessage(uint64(l))
		}
	}
	if m.Incomplete {
		n += 2
	}
	return n
}

func (m *RecordGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.GroupBys) > 0 {
		for _, e := range m.GroupBys {
			l = e.Size()
			n += 1 + l + sovMessage(uint64(l))
		}
	}
	if len(m.Records) > 0 {
		for _, e := range m.Records {
			l = e.Size()
			n += 1 + l + sovMessage(uint64(l))
		}
	}
	return n
}

func (m *GroupBy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Key != 0 {
		n += 1 + sovMessage(uint64(m.Key))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *Record) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovMessage(uint64(m.Type))
	}
	if m.Unit != 0 {
		n += 1 + sovMessage(uint64(m.Unit))
	}
	if m.Value != 0 {
		n += 9
	}
	return n
}

func sovMessage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMessage(x uint64) (n int) {
	return sovMessage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Summary) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForRecordGroups := "[]*RecordGroup{"
	for _, f := range this.RecordGroups {
		repeatedStringForRecordGroups += strings.Replace(f.String(), "RecordGroup", "RecordGroup", 1) + ","
	}
	repeatedStringForRecordGroups += "}"
	s := strings.Join([]string{`&Summary{`,
		`StartTime:` + strings.Replace(fmt.Sprintf("%v", this.StartTime), "Timestamp", "types.Timestamp", 1) + `,`,
		`EndTime:` + strings.Replace(fmt.Sprintf("%v", this.EndTime), "Timestamp", "types.Timestamp", 1) + `,`,
		`RecordGroups:` + repeatedStringForRecordGroups + `,`,
		`Incomplete:` + fmt.Sprintf("%v", this.Incomplete) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RecordGroup) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForGroupBys := "[]*GroupBy{"
	for _, f := range this.GroupBys {
		repeatedStringForGroupBys += strings.Replace(f.String(), "GroupBy", "GroupBy", 1) + ","
	}
	repeatedStringForGroupBys += "}"
	repeatedStringForRecords := "[]*Record{"
	for _, f := range this.Records {
		repeatedStringForRecords += strings.Replace(f.String(), "Record", "Record", 1) + ","
	}
	repeatedStringForRecords += "}"
	s := strings.Join([]string{`&RecordGroup{`,
		`GroupBys:` + repeatedStringForGroupBys + `,`,
		`Records:` + repeatedStringForRecords + `,`,
		`}`,
	}, "")
	return s
}
func (this *GroupBy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GroupBy{`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Record) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Record{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Unit:` + fmt.Sprintf("%v", this.Unit) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringMessage(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Summary) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Summary: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Summary: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartTime == nil {
				m.StartTime = &types.Timestamp{}
			}
			if err := m.StartTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EndTime == nil {
				m.EndTime = &types.Timestamp{}
			}
			if err := m.EndTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordGroups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecordGroups = append(m.RecordGroups, &RecordGroup{})
			if err := m.RecordGroups[len(m.RecordGroups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Incomplete", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Incomplete = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecordGroup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecordGroup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecordGroup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupBys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupBys = append(m.GroupBys, &GroupBy{})
			if err := m.GroupBys[len(m.GroupBys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Records", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Records = append(m.Records, &Record{})
			if err := m.Records[len(m.Records)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupBy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupBy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupBy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			m.Key = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Key |= GroupByKey(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Record) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Record: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Record: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= RecordType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unit", wireType)
			}
			m.Unit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Unit |= RecordUnit(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Value = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMessage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMessage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMessage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMessage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMessage = fmt.Errorf("proto: unexpected end of group")
)
