// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: temporal/api/cloud/nexus/v1/message.proto

package nexus

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EndpointSpec struct {
	// The name of the endpoint. Must be unique within an account.
	// The name must match `[a-zA-Z_][a-zA-Z0-9_]*`.
	// This field is mutable.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Indicates where the endpoint should forward received nexus requests to.
	TargetSpec *EndpointTargetSpec `protobuf:"bytes,2,opt,name=target_spec,json=targetSpec,proto3" json:"target_spec,omitempty"`
	// The set of policies (e.g. authorization) for the endpoint. Each request's caller
	// must match with at least one of the specs to be accepted by the endpoint.
	// This field is mutable.
	PolicySpecs []*EndpointPolicySpec `protobuf:"bytes,3,rep,name=policy_specs,json=policySpecs,proto3" json:"policy_specs,omitempty"`
	// The markdown description of the endpoint - optional.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *EndpointSpec) Reset()      { *m = EndpointSpec{} }
func (*EndpointSpec) ProtoMessage() {}
func (*EndpointSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_799995496fe512b8, []int{0}
}
func (m *EndpointSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EndpointSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EndpointSpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EndpointSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EndpointSpec.Merge(m, src)
}
func (m *EndpointSpec) XXX_Size() int {
	return m.Size()
}
func (m *EndpointSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_EndpointSpec.DiscardUnknown(m)
}

var xxx_messageInfo_EndpointSpec proto.InternalMessageInfo

func (m *EndpointSpec) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *EndpointSpec) GetTargetSpec() *EndpointTargetSpec {
	if m != nil {
		return m.TargetSpec
	}
	return nil
}

func (m *EndpointSpec) GetPolicySpecs() []*EndpointPolicySpec {
	if m != nil {
		return m.PolicySpecs
	}
	return nil
}

func (m *EndpointSpec) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type EndpointTargetSpec struct {
	// A target spec for routing nexus requests to a specific cloud namespace worker.
	WorkerTargetSpec *WorkerTargetSpec `protobuf:"bytes,1,opt,name=worker_target_spec,json=workerTargetSpec,proto3" json:"worker_target_spec,omitempty"`
}

func (m *EndpointTargetSpec) Reset()      { *m = EndpointTargetSpec{} }
func (*EndpointTargetSpec) ProtoMessage() {}
func (*EndpointTargetSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_799995496fe512b8, []int{1}
}
func (m *EndpointTargetSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EndpointTargetSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EndpointTargetSpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EndpointTargetSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EndpointTargetSpec.Merge(m, src)
}
func (m *EndpointTargetSpec) XXX_Size() int {
	return m.Size()
}
func (m *EndpointTargetSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_EndpointTargetSpec.DiscardUnknown(m)
}

var xxx_messageInfo_EndpointTargetSpec proto.InternalMessageInfo

func (m *EndpointTargetSpec) GetWorkerTargetSpec() *WorkerTargetSpec {
	if m != nil {
		return m.WorkerTargetSpec
	}
	return nil
}

type WorkerTargetSpec struct {
	// The target cloud namespace to route requests to. Namespace must be in same account as the endpoint. This field is mutable.
	NamespaceId string `protobuf:"bytes,1,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`
	// The task queue on the cloud namespace to route requests to. This field is mutable.
	TaskQueue string `protobuf:"bytes,2,opt,name=task_queue,json=taskQueue,proto3" json:"task_queue,omitempty"`
}

func (m *WorkerTargetSpec) Reset()      { *m = WorkerTargetSpec{} }
func (*WorkerTargetSpec) ProtoMessage() {}
func (*WorkerTargetSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_799995496fe512b8, []int{2}
}
func (m *WorkerTargetSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkerTargetSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorkerTargetSpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorkerTargetSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkerTargetSpec.Merge(m, src)
}
func (m *WorkerTargetSpec) XXX_Size() int {
	return m.Size()
}
func (m *WorkerTargetSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkerTargetSpec.DiscardUnknown(m)
}

var xxx_messageInfo_WorkerTargetSpec proto.InternalMessageInfo

func (m *WorkerTargetSpec) GetNamespaceId() string {
	if m != nil {
		return m.NamespaceId
	}
	return ""
}

func (m *WorkerTargetSpec) GetTaskQueue() string {
	if m != nil {
		return m.TaskQueue
	}
	return ""
}

type EndpointPolicySpec struct {
	// A policy spec that allows one caller namespace to access the endpoint.
	AllowedCloudNamespacePolicySpec *AllowedCloudNamespacePolicySpec `protobuf:"bytes,1,opt,name=allowed_cloud_namespace_policy_spec,json=allowedCloudNamespacePolicySpec,proto3" json:"allowed_cloud_namespace_policy_spec,omitempty"`
}

func (m *EndpointPolicySpec) Reset()      { *m = EndpointPolicySpec{} }
func (*EndpointPolicySpec) ProtoMessage() {}
func (*EndpointPolicySpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_799995496fe512b8, []int{3}
}
func (m *EndpointPolicySpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EndpointPolicySpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EndpointPolicySpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EndpointPolicySpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EndpointPolicySpec.Merge(m, src)
}
func (m *EndpointPolicySpec) XXX_Size() int {
	return m.Size()
}
func (m *EndpointPolicySpec) XXX_DiscardUnknown() {
	xxx_messageInfo_EndpointPolicySpec.DiscardUnknown(m)
}

var xxx_messageInfo_EndpointPolicySpec proto.InternalMessageInfo

func (m *EndpointPolicySpec) GetAllowedCloudNamespacePolicySpec() *AllowedCloudNamespacePolicySpec {
	if m != nil {
		return m.AllowedCloudNamespacePolicySpec
	}
	return nil
}

type AllowedCloudNamespacePolicySpec struct {
	// The namespace that is allowed to call into this endpoint. Calling namespace must be in same account as the endpoint.
	NamespaceId string `protobuf:"bytes,1,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`
}

func (m *AllowedCloudNamespacePolicySpec) Reset()      { *m = AllowedCloudNamespacePolicySpec{} }
func (*AllowedCloudNamespacePolicySpec) ProtoMessage() {}
func (*AllowedCloudNamespacePolicySpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_799995496fe512b8, []int{4}
}
func (m *AllowedCloudNamespacePolicySpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AllowedCloudNamespacePolicySpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AllowedCloudNamespacePolicySpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AllowedCloudNamespacePolicySpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllowedCloudNamespacePolicySpec.Merge(m, src)
}
func (m *AllowedCloudNamespacePolicySpec) XXX_Size() int {
	return m.Size()
}
func (m *AllowedCloudNamespacePolicySpec) XXX_DiscardUnknown() {
	xxx_messageInfo_AllowedCloudNamespacePolicySpec.DiscardUnknown(m)
}

var xxx_messageInfo_AllowedCloudNamespacePolicySpec proto.InternalMessageInfo

func (m *AllowedCloudNamespacePolicySpec) GetNamespaceId() string {
	if m != nil {
		return m.NamespaceId
	}
	return ""
}

// An endpoint that receives and then routes Nexus requests
type Endpoint struct {
	// The id of the endpoint. This is generated by the server and is immutable.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The current version of the endpoint specification.
	// The next update operation must include this version.
	ResourceVersion string `protobuf:"bytes,2,opt,name=resource_version,json=resourceVersion,proto3" json:"resource_version,omitempty"`
	// The endpoint specification.
	Spec *EndpointSpec `protobuf:"bytes,3,opt,name=spec,proto3" json:"spec,omitempty"`
	// The current state of the endpoint.
	// Possible values: activating, activationfailed, active, updating, updatefailed, deleting, deletefailed, deleted
	// For any failed state, reach out to Temporal Cloud support for remediation.
	State string `protobuf:"bytes,4,opt,name=state,proto3" json:"state,omitempty"`
	// The id of any ongoing async operation that is creating, updating, or deleting the endpoint, if any.
	AsyncOperationId string `protobuf:"bytes,5,opt,name=async_operation_id,json=asyncOperationId,proto3" json:"async_operation_id,omitempty"`
	// The date and time when the endpoint was created.
	CreatedTime *types.Timestamp `protobuf:"bytes,6,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`
	// The date and time when the endpoint was last modified.
	LastModifiedTime *types.Timestamp `protobuf:"bytes,7,opt,name=last_modified_time,json=lastModifiedTime,proto3" json:"last_modified_time,omitempty"`
}

func (m *Endpoint) Reset()      { *m = Endpoint{} }
func (*Endpoint) ProtoMessage() {}
func (*Endpoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_799995496fe512b8, []int{5}
}
func (m *Endpoint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Endpoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Endpoint.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Endpoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Endpoint.Merge(m, src)
}
func (m *Endpoint) XXX_Size() int {
	return m.Size()
}
func (m *Endpoint) XXX_DiscardUnknown() {
	xxx_messageInfo_Endpoint.DiscardUnknown(m)
}

var xxx_messageInfo_Endpoint proto.InternalMessageInfo

func (m *Endpoint) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Endpoint) GetResourceVersion() string {
	if m != nil {
		return m.ResourceVersion
	}
	return ""
}

func (m *Endpoint) GetSpec() *EndpointSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *Endpoint) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *Endpoint) GetAsyncOperationId() string {
	if m != nil {
		return m.AsyncOperationId
	}
	return ""
}

func (m *Endpoint) GetCreatedTime() *types.Timestamp {
	if m != nil {
		return m.CreatedTime
	}
	return nil
}

func (m *Endpoint) GetLastModifiedTime() *types.Timestamp {
	if m != nil {
		return m.LastModifiedTime
	}
	return nil
}

func init() {
	proto.RegisterType((*EndpointSpec)(nil), "temporal.api.cloud.nexus.v1.EndpointSpec")
	proto.RegisterType((*EndpointTargetSpec)(nil), "temporal.api.cloud.nexus.v1.EndpointTargetSpec")
	proto.RegisterType((*WorkerTargetSpec)(nil), "temporal.api.cloud.nexus.v1.WorkerTargetSpec")
	proto.RegisterType((*EndpointPolicySpec)(nil), "temporal.api.cloud.nexus.v1.EndpointPolicySpec")
	proto.RegisterType((*AllowedCloudNamespacePolicySpec)(nil), "temporal.api.cloud.nexus.v1.AllowedCloudNamespacePolicySpec")
	proto.RegisterType((*Endpoint)(nil), "temporal.api.cloud.nexus.v1.Endpoint")
}

func init() {
	proto.RegisterFile("temporal/api/cloud/nexus/v1/message.proto", fileDescriptor_799995496fe512b8)
}

var fileDescriptor_799995496fe512b8 = []byte{
	// 584 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0xcf, 0x6f, 0xd3, 0x30,
	0x18, 0x8d, 0xdb, 0x6e, 0x50, 0xa7, 0x82, 0xca, 0xe2, 0x50, 0x0d, 0xe1, 0x96, 0x70, 0x60, 0x95,
	0x20, 0xd1, 0xe0, 0x08, 0x3b, 0xf0, 0x4b, 0x62, 0x07, 0x60, 0x94, 0x0a, 0x24, 0x10, 0x8a, 0xbc,
	0xc4, 0xab, 0xac, 0x25, 0xb1, 0x17, 0x3b, 0x2d, 0xbb, 0x71, 0xe6, 0xc4, 0xbf, 0xc0, 0x8d, 0x3f,
	0x85, 0x63, 0xb9, 0xed, 0x48, 0xd3, 0x0b, 0xe2, 0xb4, 0x3f, 0x01, 0xd9, 0x69, 0xda, 0x6a, 0xa0,
	0xae, 0xb7, 0xaf, 0xcf, 0xef, 0x7b, 0xfe, 0xde, 0xab, 0xbf, 0xc0, 0xae, 0xa2, 0xb1, 0xe0, 0x29,
	0x89, 0x3c, 0x22, 0x98, 0x17, 0x44, 0x3c, 0x0b, 0xbd, 0x84, 0x7e, 0xca, 0xa4, 0x37, 0xdc, 0xf1,
	0x62, 0x2a, 0x25, 0x19, 0x50, 0x57, 0xa4, 0x5c, 0x71, 0x74, 0xbd, 0xa4, 0xba, 0x44, 0x30, 0xd7,
	0x50, 0x5d, 0x43, 0x75, 0x87, 0x3b, 0x5b, 0xed, 0x01, 0xe7, 0x83, 0x88, 0x7a, 0x86, 0x7a, 0x90,
	0x1d, 0x7a, 0x8a, 0xc5, 0x54, 0x2a, 0x12, 0x8b, 0xa2, 0xdb, 0xf9, 0x03, 0x60, 0xe3, 0x59, 0x12,
	0x0a, 0xce, 0x12, 0xf5, 0x46, 0xd0, 0x00, 0x21, 0x58, 0x4b, 0x48, 0x4c, 0x5b, 0xa0, 0x03, 0xb6,
	0xeb, 0x3d, 0x53, 0xa3, 0x7d, 0x68, 0x2b, 0x92, 0x0e, 0xa8, 0xf2, 0xa5, 0xa0, 0x41, 0xab, 0xd2,
	0x01, 0xdb, 0xf6, 0x3d, 0xcf, 0x5d, 0x71, 0xb1, 0x5b, 0x6a, 0xf6, 0x4d, 0x9f, 0x56, 0xee, 0x41,
	0x35, 0xaf, 0x51, 0x0f, 0x36, 0x04, 0x8f, 0x58, 0x70, 0x62, 0x14, 0x65, 0xab, 0xda, 0xa9, 0xae,
	0x2d, 0xb9, 0x6f, 0x1a, 0x8d, 0xa4, 0x2d, 0xe6, 0xb5, 0x44, 0x1d, 0x68, 0x87, 0x54, 0x06, 0x29,
	0x13, 0x8a, 0xf1, 0xa4, 0x55, 0x33, 0x06, 0x96, 0x21, 0xe7, 0x18, 0xa2, 0x7f, 0xe7, 0x42, 0x1f,
	0x20, 0x1a, 0xf1, 0xf4, 0x88, 0xa6, 0xfe, 0xb2, 0x49, 0x60, 0x4c, 0xde, 0x5d, 0x39, 0xd1, 0x3b,
	0xd3, 0xb6, 0x64, 0xb1, 0x39, 0x3a, 0x87, 0x38, 0x7d, 0xd8, 0x3c, 0xcf, 0x42, 0x37, 0x61, 0x43,
	0xc7, 0x2a, 0x05, 0x09, 0xa8, 0xcf, 0xc2, 0x59, 0xd4, 0xf6, 0x1c, 0xdb, 0x0b, 0xd1, 0x0d, 0x08,
	0x15, 0x91, 0x47, 0xfe, 0x71, 0x46, 0x33, 0x6a, 0x02, 0xaf, 0xf7, 0xea, 0x1a, 0x79, 0xad, 0x01,
	0xe7, 0x1b, 0x58, 0x38, 0x59, 0xc4, 0x81, 0xbe, 0x00, 0x78, 0x8b, 0x44, 0x11, 0x1f, 0xd1, 0xd0,
	0x37, 0xa3, 0xfa, 0x8b, 0x7b, 0x96, 0xe2, 0x9e, 0x79, 0x7b, 0xb8, 0xd2, 0xdb, 0xa3, 0x42, 0xe7,
	0x89, 0x46, 0x5f, 0x96, 0x2a, 0x4b, 0xd1, 0xb7, 0xc9, 0x6a, 0x82, 0xf3, 0x14, 0xb6, 0x2f, 0xd0,
	0x58, 0x23, 0x08, 0xe7, 0x67, 0x05, 0x5e, 0x2e, 0x9d, 0xa2, 0x2b, 0xb0, 0x32, 0x67, 0x55, 0x58,
	0x88, 0xba, 0xb0, 0x99, 0x52, 0xc9, 0xb3, 0x34, 0xa0, 0xfe, 0x90, 0xa6, 0x52, 0xff, 0xed, 0x45,
	0x56, 0x57, 0x4b, 0xfc, 0x6d, 0x01, 0xa3, 0x5d, 0x58, 0x33, 0xd6, 0xab, 0xc6, 0x7a, 0x77, 0xad,
	0x87, 0x66, 0x7c, 0x9a, 0x36, 0x74, 0x0d, 0x6e, 0x48, 0x45, 0x14, 0x9d, 0xbd, 0xaa, 0xe2, 0x07,
	0xba, 0x03, 0x11, 0x91, 0x27, 0x49, 0xe0, 0x73, 0x41, 0x53, 0xa2, 0x9f, 0x98, 0x76, 0xb1, 0x61,
	0x28, 0x4d, 0x73, 0xf2, 0xaa, 0x3c, 0xd8, 0x0b, 0xd1, 0x2e, 0x6c, 0x04, 0x29, 0x25, 0x8a, 0x86,
	0xbe, 0xde, 0xc2, 0xd6, 0xa6, 0x19, 0x65, 0xcb, 0x2d, 0x56, 0xd4, 0x2d, 0x57, 0xd4, 0xed, 0x97,
	0x2b, 0xda, 0xb3, 0x67, 0x7c, 0x8d, 0xa0, 0xe7, 0x10, 0x45, 0x44, 0x2a, 0x3f, 0xe6, 0x21, 0x3b,
	0x64, 0xa5, 0xc8, 0xa5, 0x0b, 0x45, 0x9a, 0xba, 0xeb, 0xc5, 0xac, 0x49, 0xc3, 0x8f, 0x3f, 0x8e,
	0x27, 0xd8, 0x3a, 0x9d, 0x60, 0xeb, 0x6c, 0x82, 0xc1, 0xe7, 0x1c, 0x83, 0xef, 0x39, 0x06, 0x3f,
	0x72, 0x0c, 0xc6, 0x39, 0x06, 0xbf, 0x72, 0x0c, 0x7e, 0xe7, 0xd8, 0x3a, 0xcb, 0x31, 0xf8, 0x3a,
	0xc5, 0xd6, 0x78, 0x8a, 0xad, 0xd3, 0x29, 0xb6, 0xde, 0xdf, 0x1e, 0xf0, 0x45, 0x6a, 0x8c, 0xff,
	0xe7, 0xc3, 0xf4, 0xc0, 0x14, 0x07, 0x9b, 0x66, 0x88, 0xfb, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff,
	0x30, 0x52, 0x47, 0x23, 0xc4, 0x04, 0x00, 0x00,
}

func (this *EndpointSpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EndpointSpec)
	if !ok {
		that2, ok := that.(EndpointSpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if !this.TargetSpec.Equal(that1.TargetSpec) {
		return false
	}
	if len(this.PolicySpecs) != len(that1.PolicySpecs) {
		return false
	}
	for i := range this.PolicySpecs {
		if !this.PolicySpecs[i].Equal(that1.PolicySpecs[i]) {
			return false
		}
	}
	if this.Description != that1.Description {
		return false
	}
	return true
}
func (this *EndpointTargetSpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EndpointTargetSpec)
	if !ok {
		that2, ok := that.(EndpointTargetSpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.WorkerTargetSpec.Equal(that1.WorkerTargetSpec) {
		return false
	}
	return true
}
func (this *WorkerTargetSpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WorkerTargetSpec)
	if !ok {
		that2, ok := that.(WorkerTargetSpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NamespaceId != that1.NamespaceId {
		return false
	}
	if this.TaskQueue != that1.TaskQueue {
		return false
	}
	return true
}
func (this *EndpointPolicySpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EndpointPolicySpec)
	if !ok {
		that2, ok := that.(EndpointPolicySpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AllowedCloudNamespacePolicySpec.Equal(that1.AllowedCloudNamespacePolicySpec) {
		return false
	}
	return true
}
func (this *AllowedCloudNamespacePolicySpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AllowedCloudNamespacePolicySpec)
	if !ok {
		that2, ok := that.(AllowedCloudNamespacePolicySpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NamespaceId != that1.NamespaceId {
		return false
	}
	return true
}
func (this *Endpoint) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Endpoint)
	if !ok {
		that2, ok := that.(Endpoint)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.ResourceVersion != that1.ResourceVersion {
		return false
	}
	if !this.Spec.Equal(that1.Spec) {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if this.AsyncOperationId != that1.AsyncOperationId {
		return false
	}
	if !this.CreatedTime.Equal(that1.CreatedTime) {
		return false
	}
	if !this.LastModifiedTime.Equal(that1.LastModifiedTime) {
		return false
	}
	return true
}
func (this *EndpointSpec) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&nexus.EndpointSpec{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.TargetSpec != nil {
		s = append(s, "TargetSpec: "+fmt.Sprintf("%#v", this.TargetSpec)+",\n")
	}
	if this.PolicySpecs != nil {
		s = append(s, "PolicySpecs: "+fmt.Sprintf("%#v", this.PolicySpecs)+",\n")
	}
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EndpointTargetSpec) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&nexus.EndpointTargetSpec{")
	if this.WorkerTargetSpec != nil {
		s = append(s, "WorkerTargetSpec: "+fmt.Sprintf("%#v", this.WorkerTargetSpec)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WorkerTargetSpec) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&nexus.WorkerTargetSpec{")
	s = append(s, "NamespaceId: "+fmt.Sprintf("%#v", this.NamespaceId)+",\n")
	s = append(s, "TaskQueue: "+fmt.Sprintf("%#v", this.TaskQueue)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EndpointPolicySpec) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&nexus.EndpointPolicySpec{")
	if this.AllowedCloudNamespacePolicySpec != nil {
		s = append(s, "AllowedCloudNamespacePolicySpec: "+fmt.Sprintf("%#v", this.AllowedCloudNamespacePolicySpec)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AllowedCloudNamespacePolicySpec) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&nexus.AllowedCloudNamespacePolicySpec{")
	s = append(s, "NamespaceId: "+fmt.Sprintf("%#v", this.NamespaceId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Endpoint) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&nexus.Endpoint{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "ResourceVersion: "+fmt.Sprintf("%#v", this.ResourceVersion)+",\n")
	if this.Spec != nil {
		s = append(s, "Spec: "+fmt.Sprintf("%#v", this.Spec)+",\n")
	}
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "AsyncOperationId: "+fmt.Sprintf("%#v", this.AsyncOperationId)+",\n")
	if this.CreatedTime != nil {
		s = append(s, "CreatedTime: "+fmt.Sprintf("%#v", this.CreatedTime)+",\n")
	}
	if this.LastModifiedTime != nil {
		s = append(s, "LastModifiedTime: "+fmt.Sprintf("%#v", this.LastModifiedTime)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringMessage(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *EndpointSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndpointSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EndpointSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PolicySpecs) > 0 {
		for iNdEx := len(m.PolicySpecs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PolicySpecs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.TargetSpec != nil {
		{
			size, err := m.TargetSpec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EndpointTargetSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndpointTargetSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EndpointTargetSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.WorkerTargetSpec != nil {
		{
			size, err := m.WorkerTargetSpec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WorkerTargetSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkerTargetSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkerTargetSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TaskQueue) > 0 {
		i -= len(m.TaskQueue)
		copy(dAtA[i:], m.TaskQueue)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.TaskQueue)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NamespaceId) > 0 {
		i -= len(m.NamespaceId)
		copy(dAtA[i:], m.NamespaceId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.NamespaceId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EndpointPolicySpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndpointPolicySpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EndpointPolicySpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AllowedCloudNamespacePolicySpec != nil {
		{
			size, err := m.AllowedCloudNamespacePolicySpec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AllowedCloudNamespacePolicySpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllowedCloudNamespacePolicySpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AllowedCloudNamespacePolicySpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NamespaceId) > 0 {
		i -= len(m.NamespaceId)
		copy(dAtA[i:], m.NamespaceId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.NamespaceId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Endpoint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Endpoint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Endpoint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastModifiedTime != nil {
		{
			size, err := m.LastModifiedTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.CreatedTime != nil {
		{
			size, err := m.CreatedTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.AsyncOperationId) > 0 {
		i -= len(m.AsyncOperationId)
		copy(dAtA[i:], m.AsyncOperationId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.AsyncOperationId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.State) > 0 {
		i -= len(m.State)
		copy(dAtA[i:], m.State)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.State)))
		i--
		dAtA[i] = 0x22
	}
	if m.Spec != nil {
		{
			size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ResourceVersion) > 0 {
		i -= len(m.ResourceVersion)
		copy(dAtA[i:], m.ResourceVersion)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.ResourceVersion)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMessage(dAtA []byte, offset int, v uint64) int {
	offset -= sovMessage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EndpointSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.TargetSpec != nil {
		l = m.TargetSpec.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if len(m.PolicySpecs) > 0 {
		for _, e := range m.PolicySpecs {
			l = e.Size()
			n += 1 + l + sovMessage(uint64(l))
		}
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *EndpointTargetSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WorkerTargetSpec != nil {
		l = m.WorkerTargetSpec.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *WorkerTargetSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NamespaceId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.TaskQueue)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *EndpointPolicySpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AllowedCloudNamespacePolicySpec != nil {
		l = m.AllowedCloudNamespacePolicySpec.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *AllowedCloudNamespacePolicySpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NamespaceId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *Endpoint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.ResourceVersion)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.AsyncOperationId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.CreatedTime != nil {
		l = m.CreatedTime.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.LastModifiedTime != nil {
		l = m.LastModifiedTime.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func sovMessage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMessage(x uint64) (n int) {
	return sovMessage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *EndpointSpec) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForPolicySpecs := "[]*EndpointPolicySpec{"
	for _, f := range this.PolicySpecs {
		repeatedStringForPolicySpecs += strings.Replace(f.String(), "EndpointPolicySpec", "EndpointPolicySpec", 1) + ","
	}
	repeatedStringForPolicySpecs += "}"
	s := strings.Join([]string{`&EndpointSpec{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`TargetSpec:` + strings.Replace(this.TargetSpec.String(), "EndpointTargetSpec", "EndpointTargetSpec", 1) + `,`,
		`PolicySpecs:` + repeatedStringForPolicySpecs + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EndpointTargetSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EndpointTargetSpec{`,
		`WorkerTargetSpec:` + strings.Replace(this.WorkerTargetSpec.String(), "WorkerTargetSpec", "WorkerTargetSpec", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WorkerTargetSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WorkerTargetSpec{`,
		`NamespaceId:` + fmt.Sprintf("%v", this.NamespaceId) + `,`,
		`TaskQueue:` + fmt.Sprintf("%v", this.TaskQueue) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EndpointPolicySpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EndpointPolicySpec{`,
		`AllowedCloudNamespacePolicySpec:` + strings.Replace(this.AllowedCloudNamespacePolicySpec.String(), "AllowedCloudNamespacePolicySpec", "AllowedCloudNamespacePolicySpec", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AllowedCloudNamespacePolicySpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AllowedCloudNamespacePolicySpec{`,
		`NamespaceId:` + fmt.Sprintf("%v", this.NamespaceId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Endpoint) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Endpoint{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`ResourceVersion:` + fmt.Sprintf("%v", this.ResourceVersion) + `,`,
		`Spec:` + strings.Replace(this.Spec.String(), "EndpointSpec", "EndpointSpec", 1) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`AsyncOperationId:` + fmt.Sprintf("%v", this.AsyncOperationId) + `,`,
		`CreatedTime:` + strings.Replace(fmt.Sprintf("%v", this.CreatedTime), "Timestamp", "types.Timestamp", 1) + `,`,
		`LastModifiedTime:` + strings.Replace(fmt.Sprintf("%v", this.LastModifiedTime), "Timestamp", "types.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringMessage(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *EndpointSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EndpointSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EndpointSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetSpec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TargetSpec == nil {
				m.TargetSpec = &EndpointTargetSpec{}
			}
			if err := m.TargetSpec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicySpecs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PolicySpecs = append(m.PolicySpecs, &EndpointPolicySpec{})
			if err := m.PolicySpecs[len(m.PolicySpecs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndpointTargetSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EndpointTargetSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EndpointTargetSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkerTargetSpec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkerTargetSpec == nil {
				m.WorkerTargetSpec = &WorkerTargetSpec{}
			}
			if err := m.WorkerTargetSpec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkerTargetSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkerTargetSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkerTargetSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NamespaceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NamespaceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskQueue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskQueue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndpointPolicySpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EndpointPolicySpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EndpointPolicySpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowedCloudNamespacePolicySpec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AllowedCloudNamespacePolicySpec == nil {
				m.AllowedCloudNamespacePolicySpec = &AllowedCloudNamespacePolicySpec{}
			}
			if err := m.AllowedCloudNamespacePolicySpec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AllowedCloudNamespacePolicySpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllowedCloudNamespacePolicySpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllowedCloudNamespacePolicySpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NamespaceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NamespaceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Endpoint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Endpoint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Endpoint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &EndpointSpec{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AsyncOperationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AsyncOperationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedTime == nil {
				m.CreatedTime = &types.Timestamp{}
			}
			if err := m.CreatedTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastModifiedTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastModifiedTime == nil {
				m.LastModifiedTime = &types.Timestamp{}
			}
			if err := m.LastModifiedTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMessage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMessage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMessage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMessage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMessage = fmt.Errorf("proto: unexpected end of group")
)
