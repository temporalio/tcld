// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: temporal/api/cloud/sink/v1/message.proto

package sink

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type S3Spec struct {
	// The IAM role that Temporal Cloud assumes for writing records to the customer's S3 bucket.
	RoleName string `protobuf:"bytes,1,opt,name=role_name,json=roleName,proto3" json:"role_name,omitempty"`
	// The name of the destination S3 bucket where Temporal will send data.
	BucketName string `protobuf:"bytes,2,opt,name=bucket_name,json=bucketName,proto3" json:"bucket_name,omitempty"`
	// The region where the S3 bucket is located.
	Region string `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
	// The AWS Key Management Service (KMS) ARN used for encryption.
	KmsArn string `protobuf:"bytes,4,opt,name=kms_arn,json=kmsArn,proto3" json:"kms_arn,omitempty"`
	// The AWS account ID associated with the S3 bucket and the assumed role.
	AwsAccountId string `protobuf:"bytes,5,opt,name=aws_account_id,json=awsAccountId,proto3" json:"aws_account_id,omitempty"`
}

func (m *S3Spec) Reset()      { *m = S3Spec{} }
func (*S3Spec) ProtoMessage() {}
func (*S3Spec) Descriptor() ([]byte, []int) {
	return fileDescriptor_b248175bea0f2dac, []int{0}
}
func (m *S3Spec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S3Spec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S3Spec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S3Spec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S3Spec.Merge(m, src)
}
func (m *S3Spec) XXX_Size() int {
	return m.Size()
}
func (m *S3Spec) XXX_DiscardUnknown() {
	xxx_messageInfo_S3Spec.DiscardUnknown(m)
}

var xxx_messageInfo_S3Spec proto.InternalMessageInfo

func (m *S3Spec) GetRoleName() string {
	if m != nil {
		return m.RoleName
	}
	return ""
}

func (m *S3Spec) GetBucketName() string {
	if m != nil {
		return m.BucketName
	}
	return ""
}

func (m *S3Spec) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *S3Spec) GetKmsArn() string {
	if m != nil {
		return m.KmsArn
	}
	return ""
}

func (m *S3Spec) GetAwsAccountId() string {
	if m != nil {
		return m.AwsAccountId
	}
	return ""
}

type GCSSpec struct {
	// The customer service account ID that Temporal Cloud impersonates for writing records to the customer's GCS bucket.
	SaId string `protobuf:"bytes,1,opt,name=sa_id,json=saId,proto3" json:"sa_id,omitempty"`
	// The name of the destination GCS bucket where Temporal will send data.
	BucketName string `protobuf:"bytes,2,opt,name=bucket_name,json=bucketName,proto3" json:"bucket_name,omitempty"`
	// The GCP project ID associated with the GCS bucket and service account.
	GcpProjectId string `protobuf:"bytes,3,opt,name=gcp_project_id,json=gcpProjectId,proto3" json:"gcp_project_id,omitempty"`
	// The region of the gcs bucket
	Region string `protobuf:"bytes,4,opt,name=region,proto3" json:"region,omitempty"`
}

func (m *GCSSpec) Reset()      { *m = GCSSpec{} }
func (*GCSSpec) ProtoMessage() {}
func (*GCSSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_b248175bea0f2dac, []int{1}
}
func (m *GCSSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GCSSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GCSSpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GCSSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GCSSpec.Merge(m, src)
}
func (m *GCSSpec) XXX_Size() int {
	return m.Size()
}
func (m *GCSSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_GCSSpec.DiscardUnknown(m)
}

var xxx_messageInfo_GCSSpec proto.InternalMessageInfo

func (m *GCSSpec) GetSaId() string {
	if m != nil {
		return m.SaId
	}
	return ""
}

func (m *GCSSpec) GetBucketName() string {
	if m != nil {
		return m.BucketName
	}
	return ""
}

func (m *GCSSpec) GetGcpProjectId() string {
	if m != nil {
		return m.GcpProjectId
	}
	return ""
}

func (m *GCSSpec) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func init() {
	proto.RegisterType((*S3Spec)(nil), "temporal.api.cloud.sink.v1.S3Spec")
	proto.RegisterType((*GCSSpec)(nil), "temporal.api.cloud.sink.v1.GCSSpec")
}

func init() {
	proto.RegisterFile("temporal/api/cloud/sink/v1/message.proto", fileDescriptor_b248175bea0f2dac)
}

var fileDescriptor_b248175bea0f2dac = []byte{
	// 394 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0xbd, 0xae, 0xd3, 0x30,
	0x18, 0x86, 0xe3, 0xd2, 0xd3, 0xc3, 0x31, 0x55, 0x87, 0x20, 0x41, 0xc4, 0x8f, 0xa9, 0xaa, 0x22,
	0x75, 0x72, 0x14, 0x75, 0x33, 0x53, 0xda, 0x01, 0x75, 0x00, 0x55, 0x04, 0x75, 0x60, 0x89, 0x5c,
	0xc7, 0x8a, 0x4c, 0x9a, 0xd8, 0x8a, 0xd3, 0x76, 0x42, 0xe2, 0x12, 0xb8, 0x01, 0x76, 0xc4, 0x95,
	0x30, 0x30, 0x74, 0xec, 0x48, 0xd3, 0x05, 0x31, 0xf5, 0x12, 0x50, 0xec, 0x22, 0x2a, 0x21, 0x74,
	0xa6, 0x28, 0xef, 0xfb, 0xe8, 0xf3, 0x23, 0x7f, 0x86, 0xa3, 0x8a, 0xe7, 0x4a, 0x96, 0x74, 0xe5,
	0x53, 0x25, 0x7c, 0xb6, 0x92, 0xeb, 0xc4, 0xd7, 0xa2, 0xc8, 0xfc, 0x4d, 0xe0, 0xe7, 0x5c, 0x6b,
	0x9a, 0x72, 0xac, 0x4a, 0x59, 0x49, 0xf7, 0xd1, 0x1f, 0x12, 0x53, 0x25, 0xb0, 0x21, 0x71, 0x43,
	0xe2, 0x4d, 0x30, 0xf8, 0x0c, 0x60, 0x27, 0x1a, 0x47, 0x8a, 0x33, 0xf7, 0x31, 0xbc, 0x29, 0xe5,
	0x8a, 0xc7, 0x05, 0xcd, 0xb9, 0x07, 0xfa, 0x60, 0x74, 0xf3, 0xe6, 0x6e, 0x13, 0xbc, 0xa6, 0x39,
	0x77, 0x9f, 0xc1, 0x7b, 0xcb, 0x35, 0xcb, 0x78, 0x65, 0xeb, 0x96, 0xa9, 0xa1, 0x8d, 0x0c, 0xf0,
	0x00, 0x76, 0x4a, 0x9e, 0x0a, 0x59, 0x78, 0x77, 0x4c, 0x77, 0xfe, 0x73, 0x1f, 0xc2, 0xeb, 0x2c,
	0xd7, 0x31, 0x2d, 0x0b, 0xaf, 0x6d, 0x8b, 0x2c, 0xd7, 0x61, 0x59, 0xb8, 0x43, 0xd8, 0xa3, 0x5b,
	0x1d, 0x53, 0xc6, 0xe4, 0xba, 0xa8, 0x62, 0x91, 0x78, 0x57, 0xa6, 0xef, 0xd2, 0xad, 0x0e, 0x6d,
	0x38, 0x4b, 0x06, 0x1f, 0xe0, 0xf5, 0xcb, 0x69, 0x64, 0xfc, 0xee, 0xc3, 0x2b, 0x4d, 0x1b, 0xce,
	0xba, 0xb5, 0x35, 0x9d, 0x25, 0xb7, 0x7b, 0x0d, 0x61, 0x2f, 0x65, 0x2a, 0x56, 0xa5, 0x7c, 0xcf,
	0x99, 0x39, 0xc6, 0xfa, 0x75, 0x53, 0xa6, 0xe6, 0x36, 0x9c, 0x25, 0x17, 0xf6, 0xed, 0x4b, 0xfb,
	0xc9, 0x77, 0xb0, 0x3b, 0x20, 0x67, 0x7f, 0x40, 0xce, 0xe9, 0x80, 0xc0, 0xc7, 0x1a, 0x81, 0x2f,
	0x35, 0x02, 0xdf, 0x6a, 0x04, 0x76, 0x35, 0x02, 0x3f, 0x6a, 0x04, 0x7e, 0xd6, 0xc8, 0x39, 0xd5,
	0x08, 0x7c, 0x3a, 0x22, 0x67, 0x77, 0x44, 0xce, 0xfe, 0x88, 0x1c, 0xf8, 0x54, 0x48, 0xfc, 0xff,
	0x4b, 0x9f, 0x74, 0x5f, 0xd9, 0xfd, 0xcc, 0x9b, 0xf5, 0xcc, 0xc1, 0xbb, 0xe7, 0xe9, 0x05, 0x2e,
	0xe4, 0xbf, 0x0b, 0x7d, 0xd1, 0x7c, 0xbf, 0xb6, 0x9e, 0xbc, 0x3d, 0x43, 0x42, 0xe2, 0x50, 0x09,
	0x3c, 0x35, 0x53, 0xa3, 0x66, 0xea, 0x22, 0xf8, 0xd5, 0xea, 0xff, 0xad, 0x09, 0x09, 0x95, 0x20,
	0xc4, 0x00, 0x84, 0x34, 0x04, 0x21, 0x8b, 0x60, 0xd9, 0x31, 0x0f, 0x62, 0xfc, 0x3b, 0x00, 0x00,
	0xff, 0xff, 0x7d, 0x4b, 0xac, 0x4b, 0x3c, 0x02, 0x00, 0x00,
}

func (this *S3Spec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*S3Spec)
	if !ok {
		that2, ok := that.(S3Spec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleName != that1.RoleName {
		return false
	}
	if this.BucketName != that1.BucketName {
		return false
	}
	if this.Region != that1.Region {
		return false
	}
	if this.KmsArn != that1.KmsArn {
		return false
	}
	if this.AwsAccountId != that1.AwsAccountId {
		return false
	}
	return true
}
func (this *GCSSpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GCSSpec)
	if !ok {
		that2, ok := that.(GCSSpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SaId != that1.SaId {
		return false
	}
	if this.BucketName != that1.BucketName {
		return false
	}
	if this.GcpProjectId != that1.GcpProjectId {
		return false
	}
	if this.Region != that1.Region {
		return false
	}
	return true
}
func (this *S3Spec) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&sink.S3Spec{")
	s = append(s, "RoleName: "+fmt.Sprintf("%#v", this.RoleName)+",\n")
	s = append(s, "BucketName: "+fmt.Sprintf("%#v", this.BucketName)+",\n")
	s = append(s, "Region: "+fmt.Sprintf("%#v", this.Region)+",\n")
	s = append(s, "KmsArn: "+fmt.Sprintf("%#v", this.KmsArn)+",\n")
	s = append(s, "AwsAccountId: "+fmt.Sprintf("%#v", this.AwsAccountId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GCSSpec) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&sink.GCSSpec{")
	s = append(s, "SaId: "+fmt.Sprintf("%#v", this.SaId)+",\n")
	s = append(s, "BucketName: "+fmt.Sprintf("%#v", this.BucketName)+",\n")
	s = append(s, "GcpProjectId: "+fmt.Sprintf("%#v", this.GcpProjectId)+",\n")
	s = append(s, "Region: "+fmt.Sprintf("%#v", this.Region)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringMessage(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *S3Spec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S3Spec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S3Spec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AwsAccountId) > 0 {
		i -= len(m.AwsAccountId)
		copy(dAtA[i:], m.AwsAccountId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.AwsAccountId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.KmsArn) > 0 {
		i -= len(m.KmsArn)
		copy(dAtA[i:], m.KmsArn)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.KmsArn)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Region) > 0 {
		i -= len(m.Region)
		copy(dAtA[i:], m.Region)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Region)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.BucketName) > 0 {
		i -= len(m.BucketName)
		copy(dAtA[i:], m.BucketName)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.BucketName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RoleName) > 0 {
		i -= len(m.RoleName)
		copy(dAtA[i:], m.RoleName)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.RoleName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GCSSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GCSSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GCSSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Region) > 0 {
		i -= len(m.Region)
		copy(dAtA[i:], m.Region)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Region)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.GcpProjectId) > 0 {
		i -= len(m.GcpProjectId)
		copy(dAtA[i:], m.GcpProjectId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.GcpProjectId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.BucketName) > 0 {
		i -= len(m.BucketName)
		copy(dAtA[i:], m.BucketName)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.BucketName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SaId) > 0 {
		i -= len(m.SaId)
		copy(dAtA[i:], m.SaId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.SaId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMessage(dAtA []byte, offset int, v uint64) int {
	offset -= sovMessage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *S3Spec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleName)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.BucketName)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Region)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.KmsArn)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.AwsAccountId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *GCSSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SaId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.BucketName)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.GcpProjectId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Region)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func sovMessage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMessage(x uint64) (n int) {
	return sovMessage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *S3Spec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&S3Spec{`,
		`RoleName:` + fmt.Sprintf("%v", this.RoleName) + `,`,
		`BucketName:` + fmt.Sprintf("%v", this.BucketName) + `,`,
		`Region:` + fmt.Sprintf("%v", this.Region) + `,`,
		`KmsArn:` + fmt.Sprintf("%v", this.KmsArn) + `,`,
		`AwsAccountId:` + fmt.Sprintf("%v", this.AwsAccountId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GCSSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GCSSpec{`,
		`SaId:` + fmt.Sprintf("%v", this.SaId) + `,`,
		`BucketName:` + fmt.Sprintf("%v", this.BucketName) + `,`,
		`GcpProjectId:` + fmt.Sprintf("%v", this.GcpProjectId) + `,`,
		`Region:` + fmt.Sprintf("%v", this.Region) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringMessage(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *S3Spec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S3Spec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S3Spec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BucketName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BucketName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Region = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KmsArn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KmsArn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwsAccountId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AwsAccountId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GCSSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GCSSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GCSSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SaId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SaId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BucketName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BucketName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GcpProjectId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GcpProjectId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Region = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMessage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMessage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMessage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMessage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMessage = fmt.Errorf("proto: unexpected end of group")
)
