// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: temporal/api/cloud/cloudservice/v1/service.proto

package cloudservice

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("temporal/api/cloud/cloudservice/v1/service.proto", fileDescriptor_9201a2f120d8d47c)
}

var fileDescriptor_9201a2f120d8d47c = []byte{
	// 2375 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x9b, 0x5f, 0x6c, 0x1c, 0x47,
	0x1d, 0xc7, 0x3d, 0x79, 0xe0, 0xcf, 0xe0, 0xc6, 0xc9, 0xd8, 0xb5, 0x6b, 0x27, 0xb9, 0xb6, 0x4b,
	0x92, 0xa6, 0xd7, 0xdc, 0x6d, 0x1c, 0x27, 0xb1, 0x7d, 0x4e, 0x93, 0x5c, 0x9c, 0xc4, 0x54, 0xd0,
	0x12, 0xd9, 0x6d, 0x1e, 0x78, 0xb1, 0x36, 0x77, 0xd3, 0xeb, 0x92, 0xf3, 0xee, 0xb1, 0xbb, 0x67,
	0x35, 0x3a, 0x45, 0x42, 0xbc, 0xf2, 0x82, 0x68, 0x25, 0xc4, 0x7f, 0x10, 0x02, 0xb5, 0x45, 0x48,
	0x20, 0x55, 0x42, 0xfc, 0x93, 0x10, 0x82, 0xd2, 0x07, 0x24, 0x22, 0x40, 0xa8, 0x20, 0x24, 0x1a,
	0x9b, 0x07, 0x04, 0x12, 0xea, 0x03, 0x02, 0x1e, 0xd1, 0xce, 0xfc, 0x76, 0x6f, 0x67, 0xff, 0x9c,
	0xe7, 0xb7, 0x7e, 0xa9, 0xaf, 0x97, 0xf9, 0xfe, 0xf6, 0xf3, 0x9d, 0xf9, 0xed, 0xec, 0x6f, 0x66,
	0xf6, 0xe8, 0x99, 0x80, 0x6f, 0xf5, 0x5c, 0xcf, 0xea, 0x9a, 0x56, 0xcf, 0x36, 0x5b, 0x5d, 0xb7,
	0xdf, 0x96, 0xff, 0xf5, 0xb9, 0xb7, 0x6d, 0xb7, 0xb8, 0xb9, 0x3d, 0x6f, 0xc2, 0xc7, 0x7a, 0xcf,
	0x73, 0x03, 0x97, 0x19, 0x91, 0xa2, 0x6e, 0xf5, 0xec, 0xba, 0x68, 0x5b, 0x4f, 0x2a, 0xea, 0xdb,
	0xf3, 0x73, 0xcb, 0x1a, 0x51, 0x3d, 0xfe, 0xa9, 0x3e, 0xf7, 0x83, 0x4d, 0x8f, 0xfb, 0x3d, 0xd7,
	0xf1, 0x21, 0xfc, 0xdc, 0xd1, 0x8e, 0xeb, 0x76, 0xba, 0x5c, 0x08, 0x2d, 0xc7, 0x71, 0x03, 0x2b,
	0xb0, 0x5d, 0xc7, 0x97, 0xff, 0x7a, 0xf6, 0x7f, 0x9c, 0x8e, 0xaf, 0x86, 0x81, 0x36, 0x64, 0x20,
	0xf6, 0x59, 0x42, 0x3f, 0xb0, 0xc6, 0x83, 0x17, 0x7c, 0xee, 0xf9, 0x6c, 0xa1, 0xbe, 0x37, 0x5b,
	0x3d, 0x6a, 0xbd, 0x2e, 0xaf, 0x3f, 0x77, 0x0e, 0x27, 0x92, 0xb0, 0xc6, 0xd4, 0x67, 0x7e, 0xff,
	0xb7, 0x57, 0x0e, 0x1c, 0x64, 0xe3, 0xe0, 0xae, 0x2f, 0x00, 0x3e, 0x4f, 0xe8, 0xfb, 0xa1, 0x29,
	0x3b, 0x8b, 0x88, 0x1b, 0xb1, 0x2c, 0xa0, 0x34, 0x80, 0x52, 0x11, 0x28, 0x8f, 0xb0, 0xe9, 0x24,
	0x8a, 0x39, 0x08, 0xff, 0x6c, 0xda, 0xed, 0x7b, 0xec, 0x55, 0x42, 0xe9, 0xaa, 0xc7, 0xad, 0x80,
	0x0b, 0xae, 0xf3, 0x3a, 0xd7, 0x18, 0xb6, 0x8f, 0xd0, 0x2e, 0x60, 0x65, 0x40, 0x37, 0x23, 0xe8,
	0x0e, 0x1b, 0x4a, 0x47, 0x35, 0x48, 0x95, 0x7d, 0x8d, 0x50, 0xfa, 0x42, 0xaf, 0x8d, 0xc2, 0x1a,
	0xb6, 0x47, 0x61, 0x25, 0x65, 0x80, 0xf5, 0xb8, 0xc0, 0x3a, 0x62, 0x14, 0x74, 0x5a, 0x08, 0xf8,
	0x65, 0x42, 0xe9, 0x35, 0xde, 0xe5, 0x18, 0xc0, 0x61, 0x7b, 0x14, 0x60, 0x52, 0xa6, 0x8e, 0x6a,
	0xb5, 0x68, 0x54, 0xdf, 0x25, 0x74, 0x7a, 0x43, 0x66, 0xc2, 0x73, 0xd6, 0x16, 0xf7, 0x7b, 0x56,
	0x8b, 0x37, 0x5b, 0x2d, 0xee, 0xfb, 0xac, 0xa9, 0x73, 0xc9, 0x7c, 0x6d, 0x44, 0x7d, 0x75, 0x3f,
	0x21, 0xc0, 0xc1, 0x65, 0xe1, 0x60, 0xd9, 0x38, 0x07, 0x0e, 0x9c, 0xa8, 0x9d, 0x6f, 0x0e, 0xe2,
	0xcf, 0xf7, 0xd2, 0xc6, 0x4c, 0x4b, 0x44, 0x09, 0x07, 0xe0, 0xe7, 0x84, 0x1e, 0x5e, 0xe3, 0x41,
	0xd3, 0xbf, 0xeb, 0xb4, 0x3e, 0xde, 0xe3, 0x9e, 0x98, 0x09, 0xd8, 0x45, 0xcd, 0x7b, 0x44, 0x95,
	0x45, 0xc6, 0x9e, 0x2e, 0xa9, 0x06, 0x4f, 0x75, 0xe1, 0xe9, 0x14, 0x3b, 0x09, 0x9e, 0xdc, 0xa8,
	0x85, 0x6f, 0x0e, 0xac, 0x50, 0xb2, 0x19, 0x7f, 0x23, 0x46, 0xe9, 0x35, 0x42, 0x27, 0xe4, 0x4d,
	0x11, 0xf7, 0x12, 0x6b, 0xe8, 0xdf, 0x49, 0xb1, 0x28, 0xc2, 0x5f, 0x29, 0xa5, 0x05, 0xf8, 0xa3,
	0x02, 0x7e, 0xda, 0x38, 0x9c, 0x19, 0x90, 0xb0, 0xb7, 0xbf, 0x4e, 0xe8, 0x43, 0x6b, 0x3c, 0x88,
	0x65, 0x3e, 0x5b, 0xd2, 0xec, 0xab, 0xa1, 0x24, 0xc2, 0x5c, 0x2e, 0xa1, 0x04, 0xc8, 0x59, 0x01,
	0x39, 0xc9, 0xb2, 0x90, 0xec, 0x75, 0x42, 0x27, 0x92, 0xa2, 0x67, 0xae, 0xf9, 0x7a, 0x9d, 0x99,
	0x12, 0xa1, 0x3a, 0x33, 0xa3, 0x05, 0xce, 0x63, 0x82, 0x73, 0x86, 0x3d, 0x9c, 0xed, 0x4c, 0xbb,
	0xed, 0x87, 0x03, 0x3f, 0x9e, 0x94, 0xb2, 0x45, 0xec, 0xc5, 0x22, 0xca, 0x25, 0xbc, 0x10, 0x10,
	0x4f, 0x08, 0xc4, 0x47, 0xd9, 0xb1, 0x91, 0x37, 0x20, 0x7b, 0x93, 0xd0, 0x09, 0x39, 0x43, 0x22,
	0x73, 0x34, 0x25, 0x42, 0x75, 0x6b, 0x46, 0x0b, 0xcc, 0xa7, 0x04, 0xb3, 0x61, 0x8c, 0x66, 0x0e,
	0xf3, 0xf5, 0xbf, 0x84, 0x1e, 0x59, 0xe7, 0xe1, 0x77, 0xab, 0x7d, 0x3f, 0x70, 0xb7, 0x36, 0xb8,
	0xe5, 0xb5, 0x5e, 0x6a, 0x06, 0x81, 0x67, 0xdf, 0xee, 0x07, 0x9c, 0xdd, 0xd0, 0xc1, 0x18, 0x11,
	0x20, 0xb2, 0xb3, 0xb6, 0xef, 0x38, 0x60, 0x6d, 0x4d, 0x58, 0x6b, 0x1a, 0x17, 0x47, 0xcf, 0x87,
	0x9e, 0x08, 0x55, 0x6b, 0x89, 0x58, 0x35, 0x5f, 0x04, 0xab, 0x59, 0x51, 0xb4, 0xd0, 0xf9, 0x0f,
	0x08, 0x9d, 0x90, 0x4f, 0x0c, 0xe4, 0x80, 0xa5, 0x44, 0xa8, 0x01, 0xcb, 0x68, 0xd5, 0x24, 0xab,
	0xee, 0x91, 0x64, 0x7f, 0x21, 0x74, 0xe6, 0x86, 0x65, 0x77, 0xdd, 0xed, 0xc4, 0x03, 0x63, 0x9d,
	0x77, 0xc2, 0x19, 0x5d, 0xeb, 0x61, 0x53, 0x20, 0x8e, 0x3c, 0xac, 0xee, 0x2b, 0x06, 0x78, 0x59,
	0x12, 0x5e, 0xce, 0x1a, 0xb5, 0xd1, 0x23, 0xf4, 0x22, 0x84, 0xa9, 0x79, 0x42, 0x1e, 0x0e, 0xc9,
	0xdb, 0x84, 0xb2, 0x66, 0xbb, 0x9d, 0x76, 0xa6, 0xf5, 0xb4, 0xc9, 0xea, 0x22, 0x53, 0x97, 0xca,
	0xca, 0xc1, 0xcf, 0x82, 0xf0, 0x53, 0x33, 0x4e, 0x8d, 0xf6, 0x63, 0xb5, 0xdb, 0x09, 0x2b, 0x7f,
	0x20, 0xf4, 0xe1, 0xcc, 0x60, 0x0b, 0x37, 0x57, 0x4a, 0xe5, 0x49, 0xd2, 0x50, 0x73, 0x1f, 0x11,
	0xc0, 0xd3, 0x05, 0xe1, 0xe9, 0x4c, 0xb5, 0xbe, 0xd7, 0x5d, 0xd4, 0x91, 0x4f, 0x65, 0xf9, 0xe1,
	0x1e, 0x7b, 0x85, 0x50, 0xba, 0xc6, 0x03, 0x19, 0xcd, 0xd7, 0xab, 0xe6, 0x86, 0xed, 0x51, 0xd5,
	0x5c, 0x52, 0x06, 0xd4, 0xd3, 0x82, 0xfa, 0x10, 0x3b, 0x08, 0xd4, 0x80, 0xc7, 0xbe, 0x48, 0xe8,
	0x07, 0xe3, 0xe6, 0xec, 0x1c, 0x2a, 0x7a, 0xc4, 0x74, 0x1e, 0xa9, 0x02, 0xa4, 0x47, 0x05, 0xd2,
	0x2c, 0x9b, 0x51, 0x91, 0x86, 0x3d, 0xf6, 0x7d, 0x59, 0x7e, 0x3d, 0xc7, 0x5f, 0xee, 0xfb, 0xd7,
	0x9d, 0x76, 0xcf, 0xb5, 0x9d, 0xc0, 0xd7, 0x2e, 0xbf, 0x54, 0x19, 0xb6, 0xfc, 0x4a, 0xab, 0x0b,
	0x96, 0x3a, 0x4e, 0xd8, 0xcc, 0xe4, 0x31, 0xdc, 0x4f, 0x08, 0x3d, 0x94, 0x56, 0xb3, 0x95, 0x32,
	0xd7, 0x8c, 0x80, 0x2f, 0x96, 0x13, 0x03, 0xef, 0x69, 0xc1, 0x7b, 0x92, 0x1d, 0xcf, 0xe7, 0x35,
	0x07, 0xd1, 0x47, 0x51, 0x2c, 0xfe, 0x88, 0xd0, 0x49, 0xa8, 0xdd, 0x14, 0x03, 0x97, 0x10, 0x45,
	0x5f, 0x9e, 0x87, 0xcb, 0xa5, 0xf5, 0x05, 0x8b, 0xa5, 0x94, 0x8d, 0x70, 0xd6, 0xf8, 0x35, 0xa1,
	0x93, 0xf0, 0x4c, 0xc7, 0xb3, 0xe7, 0x08, 0x51, 0xec, 0xb9, 0x7a, 0x60, 0x37, 0x05, 0xfb, 0x93,
	0x86, 0xd6, 0x10, 0x84, 0x4e, 0x7e, 0x49, 0xe8, 0x24, 0x4c, 0x41, 0x78, 0x27, 0x39, 0x42, 0x94,
	0x93, 0x5c, 0xbd, 0x9a, 0x4c, 0x55, 0xbd, 0x64, 0xfa, 0x86, 0x2c, 0xe7, 0xc3, 0x05, 0xda, 0x9a,
	0xe7, 0xf6, 0x7b, 0xfa, 0xe5, 0xfc, 0x50, 0x82, 0x2d, 0xe7, 0x93, 0x4a, 0x80, 0x9e, 0x13, 0xd0,
	0x53, 0x8c, 0x25, 0x96, 0xb1, 0xb5, 0x8e, 0x04, 0x82, 0x1a, 0x39, 0x56, 0x69, 0xd7, 0xc8, 0xb1,
	0x02, 0x5b, 0x23, 0x27, 0x84, 0x05, 0x35, 0x72, 0x82, 0xcf, 0x1c, 0x88, 0xbf, 0xa2, 0x37, 0x5f,
	0x8f, 0xd7, 0x71, 0x43, 0xda, 0x06, 0x6e, 0x47, 0x44, 0x01, 0x5e, 0x29, 0xa5, 0x55, 0x97, 0x1e,
	0x46, 0x4e, 0x9f, 0x86, 0x09, 0x3c, 0xac, 0xe7, 0x91, 0xac, 0x29, 0x51, 0x89, 0x7a, 0x3e, 0xcb,
	0x9a, 0xae, 0xe7, 0xf3, 0xfb, 0x57, 0xad, 0x6a, 0x91, 0xd8, 0x29, 0x51, 0x89, 0xaa, 0xb6, 0x30,
	0x2d, 0xaa, 0x7b, 0xa4, 0xc5, 0x7f, 0x08, 0x3d, 0xb2, 0x91, 0x48, 0xab, 0xf4, 0x4e, 0xcc, 0x0d,
	0xc4, 0x36, 0x4a, 0x5e, 0x00, 0xd4, 0x1a, 0x64, 0x64, 0x1c, 0xf0, 0x75, 0x43, 0xf8, 0xba, 0x62,
	0xac, 0xec, 0xbd, 0x27, 0x93, 0xb5, 0x9b, 0xd8, 0x9a, 0xf9, 0x95, 0xac, 0x77, 0xe3, 0xeb, 0x3d,
	0xcb, 0xb7, 0x6e, 0x73, 0x4f, 0xbb, 0xde, 0x4d, 0xe9, 0xb0, 0xf5, 0x6e, 0x46, 0x0e, 0xee, 0xce,
	0x08, 0x77, 0x55, 0xe3, 0xc4, 0xc8, 0x51, 0x33, 0xb7, 0x84, 0xca, 0x8f, 0x8a, 0xdd, 0x75, 0xbe,
	0xe5, 0x6e, 0xf3, 0xb4, 0x95, 0x2b, 0x7a, 0xcb, 0xbe, 0x1c, 0x29, 0xaa, 0xd8, 0x2d, 0x88, 0xa0,
	0x16, 0xbb, 0xc6, 0x53, 0xa3, 0x0d, 0x79, 0x22, 0x48, 0x4d, 0xfa, 0x82, 0xe1, 0x99, 0x4c, 0x4e,
	0x77, 0x32, 0xac, 0xaf, 0xf7, 0x0c, 0xcb, 0x11, 0xa2, 0x9e, 0x61, 0xb9, 0x7a, 0x30, 0x54, 0x13,
	0x86, 0x9e, 0x60, 0x7a, 0x23, 0xc4, 0x7e, 0x46, 0xe8, 0x94, 0x9c, 0x05, 0x61, 0xbf, 0xbf, 0xd9,
	0x6a, 0xb9, 0x7d, 0x27, 0x60, 0x88, 0x92, 0x46, 0x55, 0x46, 0x4e, 0xae, 0x94, 0x0f, 0x00, 0x56,
	0x0c, 0x61, 0xe5, 0xa8, 0x11, 0xd5, 0xcf, 0xa0, 0xab, 0x59, 0xb2, 0x9d, 0x48, 0xaf, 0xb7, 0x64,
	0x09, 0x9d, 0x82, 0xd7, 0xad, 0x29, 0xf3, 0xc9, 0x9f, 0x2e, 0xa9, 0x06, 0xec, 0x73, 0x02, 0xbb,
	0xce, 0x4e, 0x17, 0x60, 0x9b, 0x03, 0xf8, 0x66, 0x13, 0xbe, 0x11, 0x13, 0xdd, 0x9b, 0x84, 0xb2,
	0x4c, 0x4c, 0x9f, 0x95, 0x63, 0xf1, 0x51, 0xf7, 0x7b, 0x9e, 0xbc, 0x60, 0x09, 0x93, 0xf6, 0xc2,
	0x7e, 0x47, 0xe8, 0x94, 0x7c, 0x32, 0x95, 0xc9, 0x9f, 0x3c, 0x25, 0x2a, 0x7f, 0xf2, 0x03, 0x00,
	0xfc, 0xa2, 0x80, 0x9f, 0x37, 0x50, 0x03, 0x11, 0x26, 0xd5, 0x6f, 0x09, 0x9d, 0x92, 0xcf, 0xad,
	0x32, 0xa6, 0xf2, 0x94, 0x28, 0x53, 0xf9, 0x01, 0xd4, 0xec, 0xaa, 0xe2, 0xb2, 0xeb, 0x55, 0xb9,
	0x36, 0x6f, 0xf6, 0xec, 0x8f, 0xf2, 0xbb, 0xfa, 0x6b, 0x73, 0x68, 0x8f, 0x5d, 0x9b, 0xc7, 0x32,
	0xf5, 0x84, 0x8a, 0x4d, 0x00, 0xb3, 0xd5, 0xb3, 0x6b, 0x77, 0x42, 0x8e, 0x2f, 0xc9, 0xc5, 0xb9,
	0x6c, 0xaf, 0xbd, 0x38, 0x97, 0xcd, 0xb1, 0x8b, 0xf3, 0x48, 0x05, 0x4c, 0x8f, 0x09, 0xa6, 0x39,
	0xf6, 0x48, 0x8a, 0xc9, 0x1c, 0xdc, 0xe1, 0x77, 0x45, 0x9f, 0x7d, 0x95, 0xd0, 0x71, 0x39, 0x3f,
	0x01, 0xdf, 0xa2, 0xfe, 0x8c, 0xa6, 0x22, 0x2e, 0xe1, 0x85, 0x6a, 0x71, 0x6f, 0xa4, 0x7b, 0x2e,
	0xcc, 0xd2, 0xef, 0x10, 0x3a, 0x2e, 0xf3, 0x1f, 0xc3, 0x97, 0x54, 0xa0, 0xf8, 0x54, 0x21, 0xf0,
	0x7d, 0x58, 0xf0, 0x1d, 0x33, 0x0a, 0x7b, 0x31, 0x04, 0xfd, 0x16, 0xa1, 0xe3, 0x32, 0xa7, 0x31,
	0xa0, 0x49, 0x05, 0x0a, 0x54, 0x15, 0xaa, 0xc3, 0x5d, 0x2d, 0x1e, 0xee, 0xaf, 0xc8, 0xb5, 0x52,
	0xb3, 0xdf, 0xb6, 0x83, 0x8f, 0xb9, 0x1d, 0x5f, 0x7b, 0xad, 0x14, 0x2b, 0xb0, 0x6b, 0xa5, 0x84,
	0xb0, 0xe0, 0x68, 0xc6, 0x0a, 0x5b, 0xd4, 0xba, 0x21, 0x4d, 0x7c, 0x0c, 0x6f, 0x75, 0x38, 0xe2,
	0x18, 0xde, 0xea, 0x70, 0xfc, 0x31, 0xbc, 0x10, 0x15, 0x1e, 0xc3, 0x87, 0x00, 0xb0, 0xd7, 0x17,
	0xcd, 0x8b, 0xda, 0xf7, 0xa0, 0x3a, 0x1b, 0x5e, 0xc0, 0xca, 0x0a, 0xf6, 0xfa, 0x60, 0xa6, 0x13,
	0x07, 0x6c, 0x90, 0xa6, 0xf0, 0x0d, 0x26, 0xb3, 0x55, 0xb6, 0xe5, 0x12, 0x4a, 0x75, 0x14, 0x8d,
	0x14, 0x5e, 0x78, 0x2b, 0xfc, 0x95, 0xd0, 0xd9, 0xd4, 0xe1, 0xe1, 0xf5, 0x97, 0x7b, 0xae, 0x17,
	0x6c, 0xd8, 0xce, 0x1d, 0x76, 0xad, 0xc4, 0xd9, 0xe3, 0x50, 0x1e, 0x91, 0x5f, 0xdf, 0x67, 0x14,
	0x70, 0x71, 0x5e, 0xb8, 0x30, 0x8d, 0xea, 0xe8, 0x85, 0x0c, 0x17, 0xca, 0x9a, 0x6f, 0x3b, 0x77,
	0xc4, 0xac, 0xf4, 0x67, 0x42, 0xa7, 0x93, 0x67, 0x65, 0x09, 0x7b, 0x4d, 0xec, 0x39, 0x5b, 0xd6,
	0xdb, 0xd5, 0xfd, 0x84, 0x00, 0x63, 0xcb, 0xc2, 0xd8, 0x02, 0x9b, 0xd7, 0x37, 0x26, 0xff, 0xe1,
	0x1e, 0xfb, 0x23, 0xa1, 0x33, 0xf9, 0xd1, 0x7d, 0xb6, 0x0f, 0x34, 0x1f, 0x75, 0xc6, 0x52, 0x18,
	0x03, 0xfc, 0x9d, 0x15, 0xfe, 0x4e, 0x33, 0xc4, 0xc0, 0xb1, 0x7f, 0x12, 0x3a, 0x9b, 0x3a, 0x30,
	0xc4, 0xe6, 0x65, 0xa1, 0x1c, 0x95, 0x97, 0x23, 0xa2, 0x80, 0xbd, 0xa6, 0xb0, 0xb7, 0x62, 0x5c,
	0xc0, 0x0c, 0x9f, 0xdf, 0xe3, 0xad, 0xba, 0x18, 0xc3, 0x30, 0x47, 0x77, 0x09, 0x9d, 0x4d, 0x9d,
	0x81, 0x60, 0xdd, 0x16, 0xca, 0x51, 0x6e, 0x47, 0x44, 0x51, 0x93, 0xb5, 0x5a, 0x22, 0x59, 0xff,
	0x45, 0xe8, 0x91, 0x5b, 0x56, 0xd7, 0x2e, 0x1a, 0x55, 0xad, 0xad, 0x93, 0x11, 0x01, 0x50, 0x5b,
	0x27, 0x23, 0xe3, 0x80, 0xd7, 0x4b, 0xc2, 0xeb, 0x92, 0xb1, 0x80, 0xf0, 0xba, 0x0d, 0x71, 0xc3,
	0x61, 0xfd, 0x36, 0xa1, 0x07, 0x37, 0x02, 0xcb, 0x0b, 0x9e, 0xb5, 0x3b, 0xf0, 0x2a, 0x8b, 0xd6,
	0x2c, 0xae, 0x6a, 0x22, 0x5b, 0x8d, 0x32, 0xd2, 0x82, 0xf7, 0x40, 0xb6, 0xa2, 0x16, 0xc9, 0xf7,
	0x40, 0x62, 0x99, 0xfe, 0xc6, 0xf1, 0x50, 0x82, 0xdd, 0x38, 0x4e, 0x2a, 0x0b, 0x8a, 0x8d, 0x21,
	0x24, 0xfb, 0xae, 0xac, 0x85, 0x86, 0xfd, 0xb8, 0x88, 0xbd, 0x0c, 0xb6, 0x16, 0xca, 0xf6, 0x21,
	0xec, 0x6b, 0xb2, 0xc7, 0x32, 0x78, 0xe6, 0x20, 0xfe, 0x2c, 0x2a, 0xb7, 0xb7, 0x08, 0x3d, 0xfc,
	0x11, 0xcb, 0x69, 0x2b, 0x07, 0xcf, 0x7a, 0x7b, 0x00, 0x19, 0x19, 0x6a, 0x0f, 0x20, 0x47, 0xad,
	0xae, 0xd2, 0x8c, 0x27, 0xf7, 0x82, 0x37, 0x5f, 0x82, 0x18, 0x61, 0x62, 0xfc, 0x98, 0xd0, 0x83,
	0xcd, 0xdb, 0x2e, 0x3a, 0x81, 0x55, 0x0d, 0x2a, 0x81, 0xd3, 0x52, 0xe0, 0x9f, 0x17, 0xfc, 0x4f,
	0x19, 0x27, 0xf7, 0xe4, 0xb7, 0xc2, 0x00, 0x21, 0xfc, 0x2f, 0x08, 0x3d, 0xb4, 0xea, 0x3a, 0x2f,
	0xda, 0xde, 0xd6, 0x10, 0x5f, 0x6f, 0x17, 0x3e, 0xa5, 0x42, 0x9d, 0x0c, 0x66, 0xc5, 0x05, 0x47,
	0xf3, 0xc5, 0x16, 0x5a, 0x32, 0x04, 0x6c, 0xeb, 0x4d, 0xcb, 0xd2, 0x68, 0xd5, 0x75, 0x1c, 0xde,
	0x0a, 0xec, 0x6d, 0x3b, 0xb8, 0xbb, 0xde, 0xef, 0x72, 0xbd, 0xea, 0x25, 0x5f, 0x8b, 0xaa, 0x5e,
	0x8a, 0x42, 0x80, 0xad, 0xe3, 0xc2, 0x56, 0xc5, 0x98, 0x8d, 0x5e, 0xfa, 0x4d, 0x34, 0xac, 0x79,
	0xfd, 0xae, 0x7c, 0xd5, 0xec, 0xbe, 0xdc, 0x9e, 0xcc, 0x98, 0xd0, 0xdd, 0x0f, 0x2a, 0x72, 0x70,
	0xb9, 0xb4, 0x5e, 0x7d, 0x01, 0x84, 0x9d, 0x29, 0xc4, 0x37, 0x07, 0xc9, 0xef, 0x36, 0xc3, 0xef,
	0xc4, 0x5d, 0xfe, 0x53, 0x42, 0xa7, 0x72, 0x22, 0xfb, 0xac, 0x2c, 0x93, 0x8f, 0xda, 0x94, 0xc9,
	0x0f, 0xa0, 0x1e, 0xdf, 0xb2, 0xe2, 0x41, 0x61, 0x7f, 0x22, 0x74, 0x5a, 0x3e, 0xee, 0xcb, 0x65,
	0x56, 0xbe, 0x16, 0x95, 0x59, 0x45, 0x21, 0xd4, 0xa1, 0xa9, 0xe2, 0x87, 0xe6, 0x0b, 0x84, 0x7e,
	0x68, 0x8d, 0x07, 0x37, 0x3d, 0xf7, 0x93, 0xbc, 0x15, 0xf8, 0x4c, 0x77, 0x5d, 0x17, 0x09, 0x22,
	0x17, 0x8b, 0x68, 0x5d, 0xc1, 0x06, 0x53, 0x2f, 0x22, 0xf9, 0xa6, 0x5c, 0xa7, 0x82, 0x40, 0x7b,
	0x9d, 0x0a, 0xed, 0xb1, 0xeb, 0xd4, 0x58, 0xa6, 0xde, 0xab, 0xec, 0x68, 0x0a, 0xcb, 0x1c, 0xc0,
	0xa7, 0xf8, 0x1c, 0x59, 0xde, 0xf4, 0x11, 0x26, 0x62, 0xbf, 0x28, 0x45, 0xba, 0x5c, 0x42, 0x59,
	0xb0, 0xd5, 0x14, 0xc1, 0x86, 0xd3, 0xc9, 0xf7, 0xe2, 0x85, 0x35, 0x0a, 0x51, 0x91, 0x94, 0x58,
	0x58, 0xa7, 0x11, 0x9f, 0x10, 0x88, 0x8f, 0x1b, 0x23, 0xfb, 0x33, 0xe4, 0x7d, 0x83, 0xd0, 0x87,
	0x64, 0xb6, 0xa3, 0x78, 0x15, 0x09, 0x8a, 0x37, 0xa5, 0x54, 0xc7, 0xbf, 0x3a, 0x7a, 0xfc, 0x7f,
	0x48, 0xe8, 0xa1, 0x75, 0xee, 0x73, 0x47, 0x9c, 0xba, 0x3d, 0xe3, 0x6c, 0xdb, 0x01, 0xd7, 0x7b,
	0x70, 0xa6, 0x55, 0xa8, 0x07, 0x67, 0x56, 0x3c, 0xe2, 0x40, 0x39, 0xf9, 0xfa, 0xb8, 0x27, 0x84,
	0x61, 0x37, 0xff, 0x66, 0xf8, 0x4a, 0x4a, 0x54, 0x01, 0x3d, 0x6f, 0x75, 0x7c, 0xd4, 0x2b, 0x29,
	0x49, 0x61, 0x99, 0x57, 0x52, 0x54, 0x7d, 0x41, 0xf9, 0x55, 0x74, 0x08, 0x2b, 0x42, 0xd4, 0x02,
	0xab, 0x13, 0x66, 0xf9, 0xd5, 0x7f, 0x93, 0xfb, 0x0f, 0x2a, 0x63, 0xef, 0x3c, 0xa8, 0x8c, 0xbd,
	0xf7, 0xa0, 0x42, 0x3e, 0xbd, 0x53, 0x21, 0xaf, 0xed, 0x54, 0xc8, 0xdb, 0x3b, 0x15, 0x72, 0x7f,
	0xa7, 0x42, 0xde, 0xdd, 0xa9, 0x90, 0xbf, 0xef, 0x54, 0xc6, 0xde, 0xdb, 0xa9, 0x90, 0xcf, 0xed,
	0x56, 0xc6, 0xee, 0xef, 0x56, 0xc6, 0xde, 0xd9, 0xad, 0x8c, 0xd1, 0x13, 0xb6, 0xab, 0xc1, 0x7b,
	0x75, 0x1c, 0x36, 0xf4, 0x6f, 0x7a, 0x6e, 0xe0, 0xde, 0x24, 0x9f, 0x38, 0xdf, 0x49, 0xc8, 0x6c,
	0xb7, 0xf8, 0x77, 0x3c, 0x2b, 0xc9, 0xff, 0x7f, 0xe3, 0xc0, 0xf1, 0xe7, 0x41, 0x64, 0xbb, 0xf5,
	0x66, 0xcf, 0xae, 0x8b, 0x1f, 0xeb, 0xd4, 0x93, 0x3f, 0xd9, 0xa9, 0xdf, 0x9a, 0xff, 0xc7, 0x81,
	0x53, 0xc3, 0x66, 0x8d, 0x46, 0xb3, 0x67, 0x37, 0x1a, 0xa2, 0x09, 0xfc, 0x81, 0x96, 0x8d, 0xc6,
	0xad, 0xf9, 0xdb, 0xef, 0x13, 0x3f, 0xfc, 0x59, 0xf8, 0x7f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x06,
	0x54, 0x02, 0x50, 0xa9, 0x34, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CloudServiceClient is the client API for CloudService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CloudServiceClient interface {
	// Gets all known users
	GetUsers(ctx context.Context, in *GetUsersRequest, opts ...grpc.CallOption) (*GetUsersResponse, error)
	// Get a user
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	// Create a user
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	// Update a user
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error)
	// Delete a user
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error)
	// Set a user's access to a namespace
	SetUserNamespaceAccess(ctx context.Context, in *SetUserNamespaceAccessRequest, opts ...grpc.CallOption) (*SetUserNamespaceAccessResponse, error)
	// Get the latest information on an async operation
	GetAsyncOperation(ctx context.Context, in *GetAsyncOperationRequest, opts ...grpc.CallOption) (*GetAsyncOperationResponse, error)
	// Create a new namespace
	CreateNamespace(ctx context.Context, in *CreateNamespaceRequest, opts ...grpc.CallOption) (*CreateNamespaceResponse, error)
	// Get all namespaces
	GetNamespaces(ctx context.Context, in *GetNamespacesRequest, opts ...grpc.CallOption) (*GetNamespacesResponse, error)
	// Get all namespace ids
	// temporal:ui
	GetNamespaceIDs(ctx context.Context, in *GetNamespaceIDsRequest, opts ...grpc.CallOption) (*GetNamespaceIDsResponse, error)
	// Get a namespace
	GetNamespace(ctx context.Context, in *GetNamespaceRequest, opts ...grpc.CallOption) (*GetNamespaceResponse, error)
	// Update a namespace
	UpdateNamespace(ctx context.Context, in *UpdateNamespaceRequest, opts ...grpc.CallOption) (*UpdateNamespaceResponse, error)
	// Rename an existing customer search attribute
	RenameCustomSearchAttribute(ctx context.Context, in *RenameCustomSearchAttributeRequest, opts ...grpc.CallOption) (*RenameCustomSearchAttributeResponse, error)
	// Delete a namespace
	DeleteNamespace(ctx context.Context, in *DeleteNamespaceRequest, opts ...grpc.CallOption) (*DeleteNamespaceResponse, error)
	// Failover a multi-region namespace
	FailoverNamespaceRegion(ctx context.Context, in *FailoverNamespaceRegionRequest, opts ...grpc.CallOption) (*FailoverNamespaceRegionResponse, error)
	// Add a new region to a namespace
	AddNamespaceRegion(ctx context.Context, in *AddNamespaceRegionRequest, opts ...grpc.CallOption) (*AddNamespaceRegionResponse, error)
	// Delete a region from a namespace
	DeleteNamespaceRegion(ctx context.Context, in *DeleteNamespaceRegionRequest, opts ...grpc.CallOption) (*DeleteNamespaceRegionResponse, error)
	// Get all regions
	GetRegions(ctx context.Context, in *GetRegionsRequest, opts ...grpc.CallOption) (*GetRegionsResponse, error)
	// Get a region
	GetRegion(ctx context.Context, in *GetRegionRequest, opts ...grpc.CallOption) (*GetRegionResponse, error)
	// Gets nexus endpoints
	GetNexusEndpoints(ctx context.Context, in *GetNexusEndpointsRequest, opts ...grpc.CallOption) (*GetNexusEndpointsResponse, error)
	// Get a nexus endpoint
	GetNexusEndpoint(ctx context.Context, in *GetNexusEndpointRequest, opts ...grpc.CallOption) (*GetNexusEndpointResponse, error)
	// Create a nexus endpoint
	CreateNexusEndpoint(ctx context.Context, in *CreateNexusEndpointRequest, opts ...grpc.CallOption) (*CreateNexusEndpointResponse, error)
	// Update a nexus endpoint
	UpdateNexusEndpoint(ctx context.Context, in *UpdateNexusEndpointRequest, opts ...grpc.CallOption) (*UpdateNexusEndpointResponse, error)
	// Delete a nexus endpoint
	DeleteNexusEndpoint(ctx context.Context, in *DeleteNexusEndpointRequest, opts ...grpc.CallOption) (*DeleteNexusEndpointResponse, error)
	// Get all user groups
	GetUserGroups(ctx context.Context, in *GetUserGroupsRequest, opts ...grpc.CallOption) (*GetUserGroupsResponse, error)
	// Get a user group
	GetUserGroup(ctx context.Context, in *GetUserGroupRequest, opts ...grpc.CallOption) (*GetUserGroupResponse, error)
	// Create new a user group
	CreateUserGroup(ctx context.Context, in *CreateUserGroupRequest, opts ...grpc.CallOption) (*CreateUserGroupResponse, error)
	// Update a user group
	UpdateUserGroup(ctx context.Context, in *UpdateUserGroupRequest, opts ...grpc.CallOption) (*UpdateUserGroupResponse, error)
	// Delete a user group
	DeleteUserGroup(ctx context.Context, in *DeleteUserGroupRequest, opts ...grpc.CallOption) (*DeleteUserGroupResponse, error)
	// Set a user group's access to a namespace
	SetUserGroupNamespaceAccess(ctx context.Context, in *SetUserGroupNamespaceAccessRequest, opts ...grpc.CallOption) (*SetUserGroupNamespaceAccessResponse, error)
	// Add a member to the group, can only be used with Cloud group types.
	AddUserGroupMember(ctx context.Context, in *AddUserGroupMemberRequest, opts ...grpc.CallOption) (*AddUserGroupMemberResponse, error)
	// Remove a member from the group, can only be used with Cloud group types.
	RemoveUserGroupMember(ctx context.Context, in *RemoveUserGroupMemberRequest, opts ...grpc.CallOption) (*RemoveUserGroupMemberResponse, error)
	GetUserGroupMembers(ctx context.Context, in *GetUserGroupMembersRequest, opts ...grpc.CallOption) (*GetUserGroupMembersResponse, error)
	// Create a service account.
	CreateServiceAccount(ctx context.Context, in *CreateServiceAccountRequest, opts ...grpc.CallOption) (*CreateServiceAccountResponse, error)
	// Get a service account.
	GetServiceAccount(ctx context.Context, in *GetServiceAccountRequest, opts ...grpc.CallOption) (*GetServiceAccountResponse, error)
	// Get service accounts.
	GetServiceAccounts(ctx context.Context, in *GetServiceAccountsRequest, opts ...grpc.CallOption) (*GetServiceAccountsResponse, error)
	// Update a service account.
	UpdateServiceAccount(ctx context.Context, in *UpdateServiceAccountRequest, opts ...grpc.CallOption) (*UpdateServiceAccountResponse, error)
	// Delete a service account.
	DeleteServiceAccount(ctx context.Context, in *DeleteServiceAccountRequest, opts ...grpc.CallOption) (*DeleteServiceAccountResponse, error)
	// Get all known API keys
	GetApiKeys(ctx context.Context, in *GetApiKeysRequest, opts ...grpc.CallOption) (*GetApiKeysResponse, error)
	// Get an API key
	GetApiKey(ctx context.Context, in *GetApiKeyRequest, opts ...grpc.CallOption) (*GetApiKeyResponse, error)
	// Create an API key
	CreateApiKey(ctx context.Context, in *CreateApiKeyRequest, opts ...grpc.CallOption) (*CreateApiKeyResponse, error)
	// Update an API key
	UpdateApiKey(ctx context.Context, in *UpdateApiKeyRequest, opts ...grpc.CallOption) (*UpdateApiKeyResponse, error)
	// Delete an API key
	DeleteApiKey(ctx context.Context, in *DeleteApiKeyRequest, opts ...grpc.CallOption) (*DeleteApiKeyResponse, error)
	// Get audit logs
	// temporal:dev
	GetAuditLogs(ctx context.Context, in *GetAuditLogsRequest, opts ...grpc.CallOption) (*GetAuditLogsResponse, error)
	// Get usage
	GetUsage(ctx context.Context, in *GetUsageRequest, opts ...grpc.CallOption) (*GetUsageResponse, error)
	// Get account information
	GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*GetAccountResponse, error)
	// Update account information
	UpdateAccount(ctx context.Context, in *UpdateAccountRequest, opts ...grpc.CallOption) (*UpdateAccountResponse, error)
	// Create an export sink
	CreateNamespaceExportSink(ctx context.Context, in *CreateNamespaceExportSinkRequest, opts ...grpc.CallOption) (*CreateNamespaceExportSinkResponse, error)
	// Get an export sink
	GetNamespaceExportSink(ctx context.Context, in *GetNamespaceExportSinkRequest, opts ...grpc.CallOption) (*GetNamespaceExportSinkResponse, error)
	// Get export sinks
	GetNamespaceExportSinks(ctx context.Context, in *GetNamespaceExportSinksRequest, opts ...grpc.CallOption) (*GetNamespaceExportSinksResponse, error)
	// Update an export sink
	UpdateNamespaceExportSink(ctx context.Context, in *UpdateNamespaceExportSinkRequest, opts ...grpc.CallOption) (*UpdateNamespaceExportSinkResponse, error)
	// Delete an export sink
	DeleteNamespaceExportSink(ctx context.Context, in *DeleteNamespaceExportSinkRequest, opts ...grpc.CallOption) (*DeleteNamespaceExportSinkResponse, error)
	// Validates an export sink configuration by delivering an empty test file to the specified sink.
	// This operation verifies that the sink is correctly configured, accessible, and ready for data export.
	ValidateNamespaceExportSink(ctx context.Context, in *ValidateNamespaceExportSinkRequest, opts ...grpc.CallOption) (*ValidateNamespaceExportSinkResponse, error)
	// Starts a namespace migration
	// temporal:dev
	StartMigration(ctx context.Context, in *StartMigrationRequest, opts ...grpc.CallOption) (*StartMigrationResponse, error)
	// Get namespace migrations for an account
	// temporal:dev
	GetMigrations(ctx context.Context, in *GetMigrationsRequest, opts ...grpc.CallOption) (*GetMigrationsResponse, error)
	// Get a namespace migration
	// temporal:dev
	GetMigration(ctx context.Context, in *GetMigrationRequest, opts ...grpc.CallOption) (*GetMigrationResponse, error)
	// Handover the namespace during a migration, which switches the active and passive replicas
	// temporal:dev
	HandoverNamespace(ctx context.Context, in *HandoverNamespaceRequest, opts ...grpc.CallOption) (*HandoverNamespaceResponse, error)
	// Abort a namespace migration
	// temporal:dev
	AbortMigration(ctx context.Context, in *AbortMigrationRequest, opts ...grpc.CallOption) (*AbortMigrationResponse, error)
	// Confirm a namespace migration, which completes the migration
	// temporal:dev
	ConfirmMigration(ctx context.Context, in *ConfirmMigrationRequest, opts ...grpc.CallOption) (*ConfirmMigrationResponse, error)
	// Creates a connectivity rule
	CreateConnectivityRule(ctx context.Context, in *CreateConnectivityRuleRequest, opts ...grpc.CallOption) (*CreateConnectivityRuleResponse, error)
	// Gets a connectivity rule by id
	GetConnectivityRule(ctx context.Context, in *GetConnectivityRuleRequest, opts ...grpc.CallOption) (*GetConnectivityRuleResponse, error)
	// Lists connectivity rules by account
	GetConnectivityRules(ctx context.Context, in *GetConnectivityRulesRequest, opts ...grpc.CallOption) (*GetConnectivityRulesResponse, error)
	// Deletes a connectivity rule
	DeleteConnectivityRule(ctx context.Context, in *DeleteConnectivityRuleRequest, opts ...grpc.CallOption) (*DeleteConnectivityRuleResponse, error)
	// Get all projects
	// temporal:dev
	GetProjects(ctx context.Context, in *GetProjectsRequest, opts ...grpc.CallOption) (*GetProjectsResponse, error)
	// Get a projects
	// temporal:dev
	GetProject(ctx context.Context, in *GetProjectRequest, opts ...grpc.CallOption) (*GetProjectResponse, error)
	// Create new a projects
	// temporal:dev
	CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...grpc.CallOption) (*CreateProjectResponse, error)
	// Update a projects
	// temporal:dev
	UpdateProject(ctx context.Context, in *UpdateProjectRequest, opts ...grpc.CallOption) (*UpdateProjectResponse, error)
	// Delete a projects
	// temporal:dev
	DeleteProject(ctx context.Context, in *DeleteProjectRequest, opts ...grpc.CallOption) (*DeleteProjectResponse, error)
	// Resend a user invite
	// temporal:ui
	ResendUserInvite(ctx context.Context, in *ResendUserInviteRequest, opts ...grpc.CallOption) (*ResendUserInviteResponse, error)
	// Updates tags for a namespace
	// temporal:dev
	UpdateNamespaceTags(ctx context.Context, in *UpdateNamespaceTagsRequest, opts ...grpc.CallOption) (*UpdateNamespaceTagsResponse, error)
}

type cloudServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCloudServiceClient(cc grpc.ClientConnInterface) CloudServiceClient {
	return &cloudServiceClient{cc}
}

func (c *cloudServiceClient) GetUsers(ctx context.Context, in *GetUsersRequest, opts ...grpc.CallOption) (*GetUsersResponse, error) {
	out := new(GetUsersResponse)
	err := c.cc.Invoke(ctx, "/temporal.api.cloud.cloudservice.v1.CloudService/GetUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, "/temporal.api.cloud.cloudservice.v1.CloudService/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, "/temporal.api.cloud.cloudservice.v1.CloudService/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error) {
	out := new(UpdateUserResponse)
	err := c.cc.Invoke(ctx, "/temporal.api.cloud.cloudservice.v1.CloudService/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceClient) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error) {
	out := new(DeleteUserResponse)
	err := c.cc.Invoke(ctx, "/temporal.api.cloud.cloudservice.v1.CloudService/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceClient) SetUserNamespaceAccess(ctx context.Context, in *SetUserNamespaceAccessRequest, opts ...grpc.CallOption) (*SetUserNamespaceAccessResponse, error) {
	out := new(SetUserNamespaceAccessResponse)
	err := c.cc.Invoke(ctx, "/temporal.api.cloud.cloudservice.v1.CloudService/SetUserNamespaceAccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceClient) GetAsyncOperation(ctx context.Context, in *GetAsyncOperationRequest, opts ...grpc.CallOption) (*GetAsyncOperationResponse, error) {
	out := new(GetAsyncOperationResponse)
	err := c.cc.Invoke(ctx, "/temporal.api.cloud.cloudservice.v1.CloudService/GetAsyncOperation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceClient) CreateNamespace(ctx context.Context, in *CreateNamespaceRequest, opts ...grpc.CallOption) (*CreateNamespaceResponse, error) {
	out := new(CreateNamespaceResponse)
	err := c.cc.Invoke(ctx, "/temporal.api.cloud.cloudservice.v1.CloudService/CreateNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceClient) GetNamespaces(ctx context.Context, in *GetNamespacesRequest, opts ...grpc.CallOption) (*GetNamespacesResponse, error) {
	out := new(GetNamespacesResponse)
	err := c.cc.Invoke(ctx, "/temporal.api.cloud.cloudservice.v1.CloudService/GetNamespaces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceClient) GetNamespaceIDs(ctx context.Context, in *GetNamespaceIDsRequest, opts ...grpc.CallOption) (*GetNamespaceIDsResponse, error) {
	out := new(GetNamespaceIDsResponse)
	err := c.cc.Invoke(ctx, "/temporal.api.cloud.cloudservice.v1.CloudService/GetNamespaceIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceClient) GetNamespace(ctx context.Context, in *GetNamespaceRequest, opts ...grpc.CallOption) (*GetNamespaceResponse, error) {
	out := new(GetNamespaceResponse)
	err := c.cc.Invoke(ctx, "/temporal.api.cloud.cloudservice.v1.CloudService/GetNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceClient) UpdateNamespace(ctx context.Context, in *UpdateNamespaceRequest, opts ...grpc.CallOption) (*UpdateNamespaceResponse, error) {
	out := new(UpdateNamespaceResponse)
	err := c.cc.Invoke(ctx, "/temporal.api.cloud.cloudservice.v1.CloudService/UpdateNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceClient) RenameCustomSearchAttribute(ctx context.Context, in *RenameCustomSearchAttributeRequest, opts ...grpc.CallOption) (*RenameCustomSearchAttributeResponse, error) {
	out := new(RenameCustomSearchAttributeResponse)
	err := c.cc.Invoke(ctx, "/temporal.api.cloud.cloudservice.v1.CloudService/RenameCustomSearchAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceClient) DeleteNamespace(ctx context.Context, in *DeleteNamespaceRequest, opts ...grpc.CallOption) (*DeleteNamespaceResponse, error) {
	out := new(DeleteNamespaceResponse)
	err := c.cc.Invoke(ctx, "/temporal.api.cloud.cloudservice.v1.CloudService/DeleteNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceClient) FailoverNamespaceRegion(ctx context.Context, in *FailoverNamespaceRegionRequest, opts ...grpc.CallOption) (*FailoverNamespaceRegionResponse, error) {
	out := new(FailoverNamespaceRegionResponse)
	err := c.cc.Invoke(ctx, "/temporal.api.cloud.cloudservice.v1.CloudService/FailoverNamespaceRegion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceClient) AddNamespaceRegion(ctx context.Context, in *AddNamespaceRegionRequest, opts ...grpc.CallOption) (*AddNamespaceRegionResponse, error) {
	out := new(AddNamespaceRegionResponse)
	err := c.cc.Invoke(ctx, "/temporal.api.cloud.cloudservice.v1.CloudService/AddNamespaceRegion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceClient) DeleteNamespaceRegion(ctx context.Context, in *DeleteNamespaceRegionRequest, opts ...grpc.CallOption) (*DeleteNamespaceRegionResponse, error) {
	out := new(DeleteNamespaceRegionResponse)
	err := c.cc.Invoke(ctx, "/temporal.api.cloud.cloudservice.v1.CloudService/DeleteNamespaceRegion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceClient) GetRegions(ctx context.Context, in *GetRegionsRequest, opts ...grpc.CallOption) (*GetRegionsResponse, error) {
	out := new(GetRegionsResponse)
	err := c.cc.Invoke(ctx, "/temporal.api.cloud.cloudservice.v1.CloudService/GetRegions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceClient) GetRegion(ctx context.Context, in *GetRegionRequest, opts ...grpc.CallOption) (*GetRegionResponse, error) {
	out := new(GetRegionResponse)
	err := c.cc.Invoke(ctx, "/temporal.api.cloud.cloudservice.v1.CloudService/GetRegion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceClient) GetNexusEndpoints(ctx context.Context, in *GetNexusEndpointsRequest, opts ...grpc.CallOption) (*GetNexusEndpointsResponse, error) {
	out := new(GetNexusEndpointsResponse)
	err := c.cc.Invoke(ctx, "/temporal.api.cloud.cloudservice.v1.CloudService/GetNexusEndpoints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceClient) GetNexusEndpoint(ctx context.Context, in *GetNexusEndpointRequest, opts ...grpc.CallOption) (*GetNexusEndpointResponse, error) {
	out := new(GetNexusEndpointResponse)
	err := c.cc.Invoke(ctx, "/temporal.api.cloud.cloudservice.v1.CloudService/GetNexusEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceClient) CreateNexusEndpoint(ctx context.Context, in *CreateNexusEndpointRequest, opts ...grpc.CallOption) (*CreateNexusEndpointResponse, error) {
	out := new(CreateNexusEndpointResponse)
	err := c.cc.Invoke(ctx, "/temporal.api.cloud.cloudservice.v1.CloudService/CreateNexusEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceClient) UpdateNexusEndpoint(ctx context.Context, in *UpdateNexusEndpointRequest, opts ...grpc.CallOption) (*UpdateNexusEndpointResponse, error) {
	out := new(UpdateNexusEndpointResponse)
	err := c.cc.Invoke(ctx, "/temporal.api.cloud.cloudservice.v1.CloudService/UpdateNexusEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceClient) DeleteNexusEndpoint(ctx context.Context, in *DeleteNexusEndpointRequest, opts ...grpc.CallOption) (*DeleteNexusEndpointResponse, error) {
	out := new(DeleteNexusEndpointResponse)
	err := c.cc.Invoke(ctx, "/temporal.api.cloud.cloudservice.v1.CloudService/DeleteNexusEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceClient) GetUserGroups(ctx context.Context, in *GetUserGroupsRequest, opts ...grpc.CallOption) (*GetUserGroupsResponse, error) {
	out := new(GetUserGroupsResponse)
	err := c.cc.Invoke(ctx, "/temporal.api.cloud.cloudservice.v1.CloudService/GetUserGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceClient) GetUserGroup(ctx context.Context, in *GetUserGroupRequest, opts ...grpc.CallOption) (*GetUserGroupResponse, error) {
	out := new(GetUserGroupResponse)
	err := c.cc.Invoke(ctx, "/temporal.api.cloud.cloudservice.v1.CloudService/GetUserGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceClient) CreateUserGroup(ctx context.Context, in *CreateUserGroupRequest, opts ...grpc.CallOption) (*CreateUserGroupResponse, error) {
	out := new(CreateUserGroupResponse)
	err := c.cc.Invoke(ctx, "/temporal.api.cloud.cloudservice.v1.CloudService/CreateUserGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceClient) UpdateUserGroup(ctx context.Context, in *UpdateUserGroupRequest, opts ...grpc.CallOption) (*UpdateUserGroupResponse, error) {
	out := new(UpdateUserGroupResponse)
	err := c.cc.Invoke(ctx, "/temporal.api.cloud.cloudservice.v1.CloudService/UpdateUserGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceClient) DeleteUserGroup(ctx context.Context, in *DeleteUserGroupRequest, opts ...grpc.CallOption) (*DeleteUserGroupResponse, error) {
	out := new(DeleteUserGroupResponse)
	err := c.cc.Invoke(ctx, "/temporal.api.cloud.cloudservice.v1.CloudService/DeleteUserGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceClient) SetUserGroupNamespaceAccess(ctx context.Context, in *SetUserGroupNamespaceAccessRequest, opts ...grpc.CallOption) (*SetUserGroupNamespaceAccessResponse, error) {
	out := new(SetUserGroupNamespaceAccessResponse)
	err := c.cc.Invoke(ctx, "/temporal.api.cloud.cloudservice.v1.CloudService/SetUserGroupNamespaceAccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceClient) AddUserGroupMember(ctx context.Context, in *AddUserGroupMemberRequest, opts ...grpc.CallOption) (*AddUserGroupMemberResponse, error) {
	out := new(AddUserGroupMemberResponse)
	err := c.cc.Invoke(ctx, "/temporal.api.cloud.cloudservice.v1.CloudService/AddUserGroupMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceClient) RemoveUserGroupMember(ctx context.Context, in *RemoveUserGroupMemberRequest, opts ...grpc.CallOption) (*RemoveUserGroupMemberResponse, error) {
	out := new(RemoveUserGroupMemberResponse)
	err := c.cc.Invoke(ctx, "/temporal.api.cloud.cloudservice.v1.CloudService/RemoveUserGroupMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceClient) GetUserGroupMembers(ctx context.Context, in *GetUserGroupMembersRequest, opts ...grpc.CallOption) (*GetUserGroupMembersResponse, error) {
	out := new(GetUserGroupMembersResponse)
	err := c.cc.Invoke(ctx, "/temporal.api.cloud.cloudservice.v1.CloudService/GetUserGroupMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceClient) CreateServiceAccount(ctx context.Context, in *CreateServiceAccountRequest, opts ...grpc.CallOption) (*CreateServiceAccountResponse, error) {
	out := new(CreateServiceAccountResponse)
	err := c.cc.Invoke(ctx, "/temporal.api.cloud.cloudservice.v1.CloudService/CreateServiceAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceClient) GetServiceAccount(ctx context.Context, in *GetServiceAccountRequest, opts ...grpc.CallOption) (*GetServiceAccountResponse, error) {
	out := new(GetServiceAccountResponse)
	err := c.cc.Invoke(ctx, "/temporal.api.cloud.cloudservice.v1.CloudService/GetServiceAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceClient) GetServiceAccounts(ctx context.Context, in *GetServiceAccountsRequest, opts ...grpc.CallOption) (*GetServiceAccountsResponse, error) {
	out := new(GetServiceAccountsResponse)
	err := c.cc.Invoke(ctx, "/temporal.api.cloud.cloudservice.v1.CloudService/GetServiceAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceClient) UpdateServiceAccount(ctx context.Context, in *UpdateServiceAccountRequest, opts ...grpc.CallOption) (*UpdateServiceAccountResponse, error) {
	out := new(UpdateServiceAccountResponse)
	err := c.cc.Invoke(ctx, "/temporal.api.cloud.cloudservice.v1.CloudService/UpdateServiceAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceClient) DeleteServiceAccount(ctx context.Context, in *DeleteServiceAccountRequest, opts ...grpc.CallOption) (*DeleteServiceAccountResponse, error) {
	out := new(DeleteServiceAccountResponse)
	err := c.cc.Invoke(ctx, "/temporal.api.cloud.cloudservice.v1.CloudService/DeleteServiceAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceClient) GetApiKeys(ctx context.Context, in *GetApiKeysRequest, opts ...grpc.CallOption) (*GetApiKeysResponse, error) {
	out := new(GetApiKeysResponse)
	err := c.cc.Invoke(ctx, "/temporal.api.cloud.cloudservice.v1.CloudService/GetApiKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceClient) GetApiKey(ctx context.Context, in *GetApiKeyRequest, opts ...grpc.CallOption) (*GetApiKeyResponse, error) {
	out := new(GetApiKeyResponse)
	err := c.cc.Invoke(ctx, "/temporal.api.cloud.cloudservice.v1.CloudService/GetApiKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceClient) CreateApiKey(ctx context.Context, in *CreateApiKeyRequest, opts ...grpc.CallOption) (*CreateApiKeyResponse, error) {
	out := new(CreateApiKeyResponse)
	err := c.cc.Invoke(ctx, "/temporal.api.cloud.cloudservice.v1.CloudService/CreateApiKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceClient) UpdateApiKey(ctx context.Context, in *UpdateApiKeyRequest, opts ...grpc.CallOption) (*UpdateApiKeyResponse, error) {
	out := new(UpdateApiKeyResponse)
	err := c.cc.Invoke(ctx, "/temporal.api.cloud.cloudservice.v1.CloudService/UpdateApiKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceClient) DeleteApiKey(ctx context.Context, in *DeleteApiKeyRequest, opts ...grpc.CallOption) (*DeleteApiKeyResponse, error) {
	out := new(DeleteApiKeyResponse)
	err := c.cc.Invoke(ctx, "/temporal.api.cloud.cloudservice.v1.CloudService/DeleteApiKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceClient) GetAuditLogs(ctx context.Context, in *GetAuditLogsRequest, opts ...grpc.CallOption) (*GetAuditLogsResponse, error) {
	out := new(GetAuditLogsResponse)
	err := c.cc.Invoke(ctx, "/temporal.api.cloud.cloudservice.v1.CloudService/GetAuditLogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceClient) GetUsage(ctx context.Context, in *GetUsageRequest, opts ...grpc.CallOption) (*GetUsageResponse, error) {
	out := new(GetUsageResponse)
	err := c.cc.Invoke(ctx, "/temporal.api.cloud.cloudservice.v1.CloudService/GetUsage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceClient) GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*GetAccountResponse, error) {
	out := new(GetAccountResponse)
	err := c.cc.Invoke(ctx, "/temporal.api.cloud.cloudservice.v1.CloudService/GetAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceClient) UpdateAccount(ctx context.Context, in *UpdateAccountRequest, opts ...grpc.CallOption) (*UpdateAccountResponse, error) {
	out := new(UpdateAccountResponse)
	err := c.cc.Invoke(ctx, "/temporal.api.cloud.cloudservice.v1.CloudService/UpdateAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceClient) CreateNamespaceExportSink(ctx context.Context, in *CreateNamespaceExportSinkRequest, opts ...grpc.CallOption) (*CreateNamespaceExportSinkResponse, error) {
	out := new(CreateNamespaceExportSinkResponse)
	err := c.cc.Invoke(ctx, "/temporal.api.cloud.cloudservice.v1.CloudService/CreateNamespaceExportSink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceClient) GetNamespaceExportSink(ctx context.Context, in *GetNamespaceExportSinkRequest, opts ...grpc.CallOption) (*GetNamespaceExportSinkResponse, error) {
	out := new(GetNamespaceExportSinkResponse)
	err := c.cc.Invoke(ctx, "/temporal.api.cloud.cloudservice.v1.CloudService/GetNamespaceExportSink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceClient) GetNamespaceExportSinks(ctx context.Context, in *GetNamespaceExportSinksRequest, opts ...grpc.CallOption) (*GetNamespaceExportSinksResponse, error) {
	out := new(GetNamespaceExportSinksResponse)
	err := c.cc.Invoke(ctx, "/temporal.api.cloud.cloudservice.v1.CloudService/GetNamespaceExportSinks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceClient) UpdateNamespaceExportSink(ctx context.Context, in *UpdateNamespaceExportSinkRequest, opts ...grpc.CallOption) (*UpdateNamespaceExportSinkResponse, error) {
	out := new(UpdateNamespaceExportSinkResponse)
	err := c.cc.Invoke(ctx, "/temporal.api.cloud.cloudservice.v1.CloudService/UpdateNamespaceExportSink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceClient) DeleteNamespaceExportSink(ctx context.Context, in *DeleteNamespaceExportSinkRequest, opts ...grpc.CallOption) (*DeleteNamespaceExportSinkResponse, error) {
	out := new(DeleteNamespaceExportSinkResponse)
	err := c.cc.Invoke(ctx, "/temporal.api.cloud.cloudservice.v1.CloudService/DeleteNamespaceExportSink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceClient) ValidateNamespaceExportSink(ctx context.Context, in *ValidateNamespaceExportSinkRequest, opts ...grpc.CallOption) (*ValidateNamespaceExportSinkResponse, error) {
	out := new(ValidateNamespaceExportSinkResponse)
	err := c.cc.Invoke(ctx, "/temporal.api.cloud.cloudservice.v1.CloudService/ValidateNamespaceExportSink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceClient) StartMigration(ctx context.Context, in *StartMigrationRequest, opts ...grpc.CallOption) (*StartMigrationResponse, error) {
	out := new(StartMigrationResponse)
	err := c.cc.Invoke(ctx, "/temporal.api.cloud.cloudservice.v1.CloudService/StartMigration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceClient) GetMigrations(ctx context.Context, in *GetMigrationsRequest, opts ...grpc.CallOption) (*GetMigrationsResponse, error) {
	out := new(GetMigrationsResponse)
	err := c.cc.Invoke(ctx, "/temporal.api.cloud.cloudservice.v1.CloudService/GetMigrations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceClient) GetMigration(ctx context.Context, in *GetMigrationRequest, opts ...grpc.CallOption) (*GetMigrationResponse, error) {
	out := new(GetMigrationResponse)
	err := c.cc.Invoke(ctx, "/temporal.api.cloud.cloudservice.v1.CloudService/GetMigration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceClient) HandoverNamespace(ctx context.Context, in *HandoverNamespaceRequest, opts ...grpc.CallOption) (*HandoverNamespaceResponse, error) {
	out := new(HandoverNamespaceResponse)
	err := c.cc.Invoke(ctx, "/temporal.api.cloud.cloudservice.v1.CloudService/HandoverNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceClient) AbortMigration(ctx context.Context, in *AbortMigrationRequest, opts ...grpc.CallOption) (*AbortMigrationResponse, error) {
	out := new(AbortMigrationResponse)
	err := c.cc.Invoke(ctx, "/temporal.api.cloud.cloudservice.v1.CloudService/AbortMigration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceClient) ConfirmMigration(ctx context.Context, in *ConfirmMigrationRequest, opts ...grpc.CallOption) (*ConfirmMigrationResponse, error) {
	out := new(ConfirmMigrationResponse)
	err := c.cc.Invoke(ctx, "/temporal.api.cloud.cloudservice.v1.CloudService/ConfirmMigration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceClient) CreateConnectivityRule(ctx context.Context, in *CreateConnectivityRuleRequest, opts ...grpc.CallOption) (*CreateConnectivityRuleResponse, error) {
	out := new(CreateConnectivityRuleResponse)
	err := c.cc.Invoke(ctx, "/temporal.api.cloud.cloudservice.v1.CloudService/CreateConnectivityRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceClient) GetConnectivityRule(ctx context.Context, in *GetConnectivityRuleRequest, opts ...grpc.CallOption) (*GetConnectivityRuleResponse, error) {
	out := new(GetConnectivityRuleResponse)
	err := c.cc.Invoke(ctx, "/temporal.api.cloud.cloudservice.v1.CloudService/GetConnectivityRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceClient) GetConnectivityRules(ctx context.Context, in *GetConnectivityRulesRequest, opts ...grpc.CallOption) (*GetConnectivityRulesResponse, error) {
	out := new(GetConnectivityRulesResponse)
	err := c.cc.Invoke(ctx, "/temporal.api.cloud.cloudservice.v1.CloudService/GetConnectivityRules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceClient) DeleteConnectivityRule(ctx context.Context, in *DeleteConnectivityRuleRequest, opts ...grpc.CallOption) (*DeleteConnectivityRuleResponse, error) {
	out := new(DeleteConnectivityRuleResponse)
	err := c.cc.Invoke(ctx, "/temporal.api.cloud.cloudservice.v1.CloudService/DeleteConnectivityRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceClient) GetProjects(ctx context.Context, in *GetProjectsRequest, opts ...grpc.CallOption) (*GetProjectsResponse, error) {
	out := new(GetProjectsResponse)
	err := c.cc.Invoke(ctx, "/temporal.api.cloud.cloudservice.v1.CloudService/GetProjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceClient) GetProject(ctx context.Context, in *GetProjectRequest, opts ...grpc.CallOption) (*GetProjectResponse, error) {
	out := new(GetProjectResponse)
	err := c.cc.Invoke(ctx, "/temporal.api.cloud.cloudservice.v1.CloudService/GetProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceClient) CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...grpc.CallOption) (*CreateProjectResponse, error) {
	out := new(CreateProjectResponse)
	err := c.cc.Invoke(ctx, "/temporal.api.cloud.cloudservice.v1.CloudService/CreateProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceClient) UpdateProject(ctx context.Context, in *UpdateProjectRequest, opts ...grpc.CallOption) (*UpdateProjectResponse, error) {
	out := new(UpdateProjectResponse)
	err := c.cc.Invoke(ctx, "/temporal.api.cloud.cloudservice.v1.CloudService/UpdateProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceClient) DeleteProject(ctx context.Context, in *DeleteProjectRequest, opts ...grpc.CallOption) (*DeleteProjectResponse, error) {
	out := new(DeleteProjectResponse)
	err := c.cc.Invoke(ctx, "/temporal.api.cloud.cloudservice.v1.CloudService/DeleteProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceClient) ResendUserInvite(ctx context.Context, in *ResendUserInviteRequest, opts ...grpc.CallOption) (*ResendUserInviteResponse, error) {
	out := new(ResendUserInviteResponse)
	err := c.cc.Invoke(ctx, "/temporal.api.cloud.cloudservice.v1.CloudService/ResendUserInvite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudServiceClient) UpdateNamespaceTags(ctx context.Context, in *UpdateNamespaceTagsRequest, opts ...grpc.CallOption) (*UpdateNamespaceTagsResponse, error) {
	out := new(UpdateNamespaceTagsResponse)
	err := c.cc.Invoke(ctx, "/temporal.api.cloud.cloudservice.v1.CloudService/UpdateNamespaceTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CloudServiceServer is the server API for CloudService service.
type CloudServiceServer interface {
	// Gets all known users
	GetUsers(context.Context, *GetUsersRequest) (*GetUsersResponse, error)
	// Get a user
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
	// Create a user
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	// Update a user
	UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error)
	// Delete a user
	DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error)
	// Set a user's access to a namespace
	SetUserNamespaceAccess(context.Context, *SetUserNamespaceAccessRequest) (*SetUserNamespaceAccessResponse, error)
	// Get the latest information on an async operation
	GetAsyncOperation(context.Context, *GetAsyncOperationRequest) (*GetAsyncOperationResponse, error)
	// Create a new namespace
	CreateNamespace(context.Context, *CreateNamespaceRequest) (*CreateNamespaceResponse, error)
	// Get all namespaces
	GetNamespaces(context.Context, *GetNamespacesRequest) (*GetNamespacesResponse, error)
	// Get all namespace ids
	// temporal:ui
	GetNamespaceIDs(context.Context, *GetNamespaceIDsRequest) (*GetNamespaceIDsResponse, error)
	// Get a namespace
	GetNamespace(context.Context, *GetNamespaceRequest) (*GetNamespaceResponse, error)
	// Update a namespace
	UpdateNamespace(context.Context, *UpdateNamespaceRequest) (*UpdateNamespaceResponse, error)
	// Rename an existing customer search attribute
	RenameCustomSearchAttribute(context.Context, *RenameCustomSearchAttributeRequest) (*RenameCustomSearchAttributeResponse, error)
	// Delete a namespace
	DeleteNamespace(context.Context, *DeleteNamespaceRequest) (*DeleteNamespaceResponse, error)
	// Failover a multi-region namespace
	FailoverNamespaceRegion(context.Context, *FailoverNamespaceRegionRequest) (*FailoverNamespaceRegionResponse, error)
	// Add a new region to a namespace
	AddNamespaceRegion(context.Context, *AddNamespaceRegionRequest) (*AddNamespaceRegionResponse, error)
	// Delete a region from a namespace
	DeleteNamespaceRegion(context.Context, *DeleteNamespaceRegionRequest) (*DeleteNamespaceRegionResponse, error)
	// Get all regions
	GetRegions(context.Context, *GetRegionsRequest) (*GetRegionsResponse, error)
	// Get a region
	GetRegion(context.Context, *GetRegionRequest) (*GetRegionResponse, error)
	// Gets nexus endpoints
	GetNexusEndpoints(context.Context, *GetNexusEndpointsRequest) (*GetNexusEndpointsResponse, error)
	// Get a nexus endpoint
	GetNexusEndpoint(context.Context, *GetNexusEndpointRequest) (*GetNexusEndpointResponse, error)
	// Create a nexus endpoint
	CreateNexusEndpoint(context.Context, *CreateNexusEndpointRequest) (*CreateNexusEndpointResponse, error)
	// Update a nexus endpoint
	UpdateNexusEndpoint(context.Context, *UpdateNexusEndpointRequest) (*UpdateNexusEndpointResponse, error)
	// Delete a nexus endpoint
	DeleteNexusEndpoint(context.Context, *DeleteNexusEndpointRequest) (*DeleteNexusEndpointResponse, error)
	// Get all user groups
	GetUserGroups(context.Context, *GetUserGroupsRequest) (*GetUserGroupsResponse, error)
	// Get a user group
	GetUserGroup(context.Context, *GetUserGroupRequest) (*GetUserGroupResponse, error)
	// Create new a user group
	CreateUserGroup(context.Context, *CreateUserGroupRequest) (*CreateUserGroupResponse, error)
	// Update a user group
	UpdateUserGroup(context.Context, *UpdateUserGroupRequest) (*UpdateUserGroupResponse, error)
	// Delete a user group
	DeleteUserGroup(context.Context, *DeleteUserGroupRequest) (*DeleteUserGroupResponse, error)
	// Set a user group's access to a namespace
	SetUserGroupNamespaceAccess(context.Context, *SetUserGroupNamespaceAccessRequest) (*SetUserGroupNamespaceAccessResponse, error)
	// Add a member to the group, can only be used with Cloud group types.
	AddUserGroupMember(context.Context, *AddUserGroupMemberRequest) (*AddUserGroupMemberResponse, error)
	// Remove a member from the group, can only be used with Cloud group types.
	RemoveUserGroupMember(context.Context, *RemoveUserGroupMemberRequest) (*RemoveUserGroupMemberResponse, error)
	GetUserGroupMembers(context.Context, *GetUserGroupMembersRequest) (*GetUserGroupMembersResponse, error)
	// Create a service account.
	CreateServiceAccount(context.Context, *CreateServiceAccountRequest) (*CreateServiceAccountResponse, error)
	// Get a service account.
	GetServiceAccount(context.Context, *GetServiceAccountRequest) (*GetServiceAccountResponse, error)
	// Get service accounts.
	GetServiceAccounts(context.Context, *GetServiceAccountsRequest) (*GetServiceAccountsResponse, error)
	// Update a service account.
	UpdateServiceAccount(context.Context, *UpdateServiceAccountRequest) (*UpdateServiceAccountResponse, error)
	// Delete a service account.
	DeleteServiceAccount(context.Context, *DeleteServiceAccountRequest) (*DeleteServiceAccountResponse, error)
	// Get all known API keys
	GetApiKeys(context.Context, *GetApiKeysRequest) (*GetApiKeysResponse, error)
	// Get an API key
	GetApiKey(context.Context, *GetApiKeyRequest) (*GetApiKeyResponse, error)
	// Create an API key
	CreateApiKey(context.Context, *CreateApiKeyRequest) (*CreateApiKeyResponse, error)
	// Update an API key
	UpdateApiKey(context.Context, *UpdateApiKeyRequest) (*UpdateApiKeyResponse, error)
	// Delete an API key
	DeleteApiKey(context.Context, *DeleteApiKeyRequest) (*DeleteApiKeyResponse, error)
	// Get audit logs
	// temporal:dev
	GetAuditLogs(context.Context, *GetAuditLogsRequest) (*GetAuditLogsResponse, error)
	// Get usage
	GetUsage(context.Context, *GetUsageRequest) (*GetUsageResponse, error)
	// Get account information
	GetAccount(context.Context, *GetAccountRequest) (*GetAccountResponse, error)
	// Update account information
	UpdateAccount(context.Context, *UpdateAccountRequest) (*UpdateAccountResponse, error)
	// Create an export sink
	CreateNamespaceExportSink(context.Context, *CreateNamespaceExportSinkRequest) (*CreateNamespaceExportSinkResponse, error)
	// Get an export sink
	GetNamespaceExportSink(context.Context, *GetNamespaceExportSinkRequest) (*GetNamespaceExportSinkResponse, error)
	// Get export sinks
	GetNamespaceExportSinks(context.Context, *GetNamespaceExportSinksRequest) (*GetNamespaceExportSinksResponse, error)
	// Update an export sink
	UpdateNamespaceExportSink(context.Context, *UpdateNamespaceExportSinkRequest) (*UpdateNamespaceExportSinkResponse, error)
	// Delete an export sink
	DeleteNamespaceExportSink(context.Context, *DeleteNamespaceExportSinkRequest) (*DeleteNamespaceExportSinkResponse, error)
	// Validates an export sink configuration by delivering an empty test file to the specified sink.
	// This operation verifies that the sink is correctly configured, accessible, and ready for data export.
	ValidateNamespaceExportSink(context.Context, *ValidateNamespaceExportSinkRequest) (*ValidateNamespaceExportSinkResponse, error)
	// Starts a namespace migration
	// temporal:dev
	StartMigration(context.Context, *StartMigrationRequest) (*StartMigrationResponse, error)
	// Get namespace migrations for an account
	// temporal:dev
	GetMigrations(context.Context, *GetMigrationsRequest) (*GetMigrationsResponse, error)
	// Get a namespace migration
	// temporal:dev
	GetMigration(context.Context, *GetMigrationRequest) (*GetMigrationResponse, error)
	// Handover the namespace during a migration, which switches the active and passive replicas
	// temporal:dev
	HandoverNamespace(context.Context, *HandoverNamespaceRequest) (*HandoverNamespaceResponse, error)
	// Abort a namespace migration
	// temporal:dev
	AbortMigration(context.Context, *AbortMigrationRequest) (*AbortMigrationResponse, error)
	// Confirm a namespace migration, which completes the migration
	// temporal:dev
	ConfirmMigration(context.Context, *ConfirmMigrationRequest) (*ConfirmMigrationResponse, error)
	// Creates a connectivity rule
	CreateConnectivityRule(context.Context, *CreateConnectivityRuleRequest) (*CreateConnectivityRuleResponse, error)
	// Gets a connectivity rule by id
	GetConnectivityRule(context.Context, *GetConnectivityRuleRequest) (*GetConnectivityRuleResponse, error)
	// Lists connectivity rules by account
	GetConnectivityRules(context.Context, *GetConnectivityRulesRequest) (*GetConnectivityRulesResponse, error)
	// Deletes a connectivity rule
	DeleteConnectivityRule(context.Context, *DeleteConnectivityRuleRequest) (*DeleteConnectivityRuleResponse, error)
	// Get all projects
	// temporal:dev
	GetProjects(context.Context, *GetProjectsRequest) (*GetProjectsResponse, error)
	// Get a projects
	// temporal:dev
	GetProject(context.Context, *GetProjectRequest) (*GetProjectResponse, error)
	// Create new a projects
	// temporal:dev
	CreateProject(context.Context, *CreateProjectRequest) (*CreateProjectResponse, error)
	// Update a projects
	// temporal:dev
	UpdateProject(context.Context, *UpdateProjectRequest) (*UpdateProjectResponse, error)
	// Delete a projects
	// temporal:dev
	DeleteProject(context.Context, *DeleteProjectRequest) (*DeleteProjectResponse, error)
	// Resend a user invite
	// temporal:ui
	ResendUserInvite(context.Context, *ResendUserInviteRequest) (*ResendUserInviteResponse, error)
	// Updates tags for a namespace
	// temporal:dev
	UpdateNamespaceTags(context.Context, *UpdateNamespaceTagsRequest) (*UpdateNamespaceTagsResponse, error)
}

// UnimplementedCloudServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCloudServiceServer struct {
}

func (*UnimplementedCloudServiceServer) GetUsers(ctx context.Context, req *GetUsersRequest) (*GetUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsers not implemented")
}
func (*UnimplementedCloudServiceServer) GetUser(ctx context.Context, req *GetUserRequest) (*GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (*UnimplementedCloudServiceServer) CreateUser(ctx context.Context, req *CreateUserRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (*UnimplementedCloudServiceServer) UpdateUser(ctx context.Context, req *UpdateUserRequest) (*UpdateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (*UnimplementedCloudServiceServer) DeleteUser(ctx context.Context, req *DeleteUserRequest) (*DeleteUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (*UnimplementedCloudServiceServer) SetUserNamespaceAccess(ctx context.Context, req *SetUserNamespaceAccessRequest) (*SetUserNamespaceAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUserNamespaceAccess not implemented")
}
func (*UnimplementedCloudServiceServer) GetAsyncOperation(ctx context.Context, req *GetAsyncOperationRequest) (*GetAsyncOperationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAsyncOperation not implemented")
}
func (*UnimplementedCloudServiceServer) CreateNamespace(ctx context.Context, req *CreateNamespaceRequest) (*CreateNamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNamespace not implemented")
}
func (*UnimplementedCloudServiceServer) GetNamespaces(ctx context.Context, req *GetNamespacesRequest) (*GetNamespacesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNamespaces not implemented")
}
func (*UnimplementedCloudServiceServer) GetNamespaceIDs(ctx context.Context, req *GetNamespaceIDsRequest) (*GetNamespaceIDsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNamespaceIDs not implemented")
}
func (*UnimplementedCloudServiceServer) GetNamespace(ctx context.Context, req *GetNamespaceRequest) (*GetNamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNamespace not implemented")
}
func (*UnimplementedCloudServiceServer) UpdateNamespace(ctx context.Context, req *UpdateNamespaceRequest) (*UpdateNamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNamespace not implemented")
}
func (*UnimplementedCloudServiceServer) RenameCustomSearchAttribute(ctx context.Context, req *RenameCustomSearchAttributeRequest) (*RenameCustomSearchAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenameCustomSearchAttribute not implemented")
}
func (*UnimplementedCloudServiceServer) DeleteNamespace(ctx context.Context, req *DeleteNamespaceRequest) (*DeleteNamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNamespace not implemented")
}
func (*UnimplementedCloudServiceServer) FailoverNamespaceRegion(ctx context.Context, req *FailoverNamespaceRegionRequest) (*FailoverNamespaceRegionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FailoverNamespaceRegion not implemented")
}
func (*UnimplementedCloudServiceServer) AddNamespaceRegion(ctx context.Context, req *AddNamespaceRegionRequest) (*AddNamespaceRegionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNamespaceRegion not implemented")
}
func (*UnimplementedCloudServiceServer) DeleteNamespaceRegion(ctx context.Context, req *DeleteNamespaceRegionRequest) (*DeleteNamespaceRegionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNamespaceRegion not implemented")
}
func (*UnimplementedCloudServiceServer) GetRegions(ctx context.Context, req *GetRegionsRequest) (*GetRegionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRegions not implemented")
}
func (*UnimplementedCloudServiceServer) GetRegion(ctx context.Context, req *GetRegionRequest) (*GetRegionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRegion not implemented")
}
func (*UnimplementedCloudServiceServer) GetNexusEndpoints(ctx context.Context, req *GetNexusEndpointsRequest) (*GetNexusEndpointsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNexusEndpoints not implemented")
}
func (*UnimplementedCloudServiceServer) GetNexusEndpoint(ctx context.Context, req *GetNexusEndpointRequest) (*GetNexusEndpointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNexusEndpoint not implemented")
}
func (*UnimplementedCloudServiceServer) CreateNexusEndpoint(ctx context.Context, req *CreateNexusEndpointRequest) (*CreateNexusEndpointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNexusEndpoint not implemented")
}
func (*UnimplementedCloudServiceServer) UpdateNexusEndpoint(ctx context.Context, req *UpdateNexusEndpointRequest) (*UpdateNexusEndpointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNexusEndpoint not implemented")
}
func (*UnimplementedCloudServiceServer) DeleteNexusEndpoint(ctx context.Context, req *DeleteNexusEndpointRequest) (*DeleteNexusEndpointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNexusEndpoint not implemented")
}
func (*UnimplementedCloudServiceServer) GetUserGroups(ctx context.Context, req *GetUserGroupsRequest) (*GetUserGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserGroups not implemented")
}
func (*UnimplementedCloudServiceServer) GetUserGroup(ctx context.Context, req *GetUserGroupRequest) (*GetUserGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserGroup not implemented")
}
func (*UnimplementedCloudServiceServer) CreateUserGroup(ctx context.Context, req *CreateUserGroupRequest) (*CreateUserGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserGroup not implemented")
}
func (*UnimplementedCloudServiceServer) UpdateUserGroup(ctx context.Context, req *UpdateUserGroupRequest) (*UpdateUserGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserGroup not implemented")
}
func (*UnimplementedCloudServiceServer) DeleteUserGroup(ctx context.Context, req *DeleteUserGroupRequest) (*DeleteUserGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserGroup not implemented")
}
func (*UnimplementedCloudServiceServer) SetUserGroupNamespaceAccess(ctx context.Context, req *SetUserGroupNamespaceAccessRequest) (*SetUserGroupNamespaceAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUserGroupNamespaceAccess not implemented")
}
func (*UnimplementedCloudServiceServer) AddUserGroupMember(ctx context.Context, req *AddUserGroupMemberRequest) (*AddUserGroupMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserGroupMember not implemented")
}
func (*UnimplementedCloudServiceServer) RemoveUserGroupMember(ctx context.Context, req *RemoveUserGroupMemberRequest) (*RemoveUserGroupMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUserGroupMember not implemented")
}
func (*UnimplementedCloudServiceServer) GetUserGroupMembers(ctx context.Context, req *GetUserGroupMembersRequest) (*GetUserGroupMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserGroupMembers not implemented")
}
func (*UnimplementedCloudServiceServer) CreateServiceAccount(ctx context.Context, req *CreateServiceAccountRequest) (*CreateServiceAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateServiceAccount not implemented")
}
func (*UnimplementedCloudServiceServer) GetServiceAccount(ctx context.Context, req *GetServiceAccountRequest) (*GetServiceAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceAccount not implemented")
}
func (*UnimplementedCloudServiceServer) GetServiceAccounts(ctx context.Context, req *GetServiceAccountsRequest) (*GetServiceAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceAccounts not implemented")
}
func (*UnimplementedCloudServiceServer) UpdateServiceAccount(ctx context.Context, req *UpdateServiceAccountRequest) (*UpdateServiceAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateServiceAccount not implemented")
}
func (*UnimplementedCloudServiceServer) DeleteServiceAccount(ctx context.Context, req *DeleteServiceAccountRequest) (*DeleteServiceAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteServiceAccount not implemented")
}
func (*UnimplementedCloudServiceServer) GetApiKeys(ctx context.Context, req *GetApiKeysRequest) (*GetApiKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApiKeys not implemented")
}
func (*UnimplementedCloudServiceServer) GetApiKey(ctx context.Context, req *GetApiKeyRequest) (*GetApiKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApiKey not implemented")
}
func (*UnimplementedCloudServiceServer) CreateApiKey(ctx context.Context, req *CreateApiKeyRequest) (*CreateApiKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateApiKey not implemented")
}
func (*UnimplementedCloudServiceServer) UpdateApiKey(ctx context.Context, req *UpdateApiKeyRequest) (*UpdateApiKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateApiKey not implemented")
}
func (*UnimplementedCloudServiceServer) DeleteApiKey(ctx context.Context, req *DeleteApiKeyRequest) (*DeleteApiKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteApiKey not implemented")
}
func (*UnimplementedCloudServiceServer) GetAuditLogs(ctx context.Context, req *GetAuditLogsRequest) (*GetAuditLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuditLogs not implemented")
}
func (*UnimplementedCloudServiceServer) GetUsage(ctx context.Context, req *GetUsageRequest) (*GetUsageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsage not implemented")
}
func (*UnimplementedCloudServiceServer) GetAccount(ctx context.Context, req *GetAccountRequest) (*GetAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccount not implemented")
}
func (*UnimplementedCloudServiceServer) UpdateAccount(ctx context.Context, req *UpdateAccountRequest) (*UpdateAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccount not implemented")
}
func (*UnimplementedCloudServiceServer) CreateNamespaceExportSink(ctx context.Context, req *CreateNamespaceExportSinkRequest) (*CreateNamespaceExportSinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNamespaceExportSink not implemented")
}
func (*UnimplementedCloudServiceServer) GetNamespaceExportSink(ctx context.Context, req *GetNamespaceExportSinkRequest) (*GetNamespaceExportSinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNamespaceExportSink not implemented")
}
func (*UnimplementedCloudServiceServer) GetNamespaceExportSinks(ctx context.Context, req *GetNamespaceExportSinksRequest) (*GetNamespaceExportSinksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNamespaceExportSinks not implemented")
}
func (*UnimplementedCloudServiceServer) UpdateNamespaceExportSink(ctx context.Context, req *UpdateNamespaceExportSinkRequest) (*UpdateNamespaceExportSinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNamespaceExportSink not implemented")
}
func (*UnimplementedCloudServiceServer) DeleteNamespaceExportSink(ctx context.Context, req *DeleteNamespaceExportSinkRequest) (*DeleteNamespaceExportSinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNamespaceExportSink not implemented")
}
func (*UnimplementedCloudServiceServer) ValidateNamespaceExportSink(ctx context.Context, req *ValidateNamespaceExportSinkRequest) (*ValidateNamespaceExportSinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateNamespaceExportSink not implemented")
}
func (*UnimplementedCloudServiceServer) StartMigration(ctx context.Context, req *StartMigrationRequest) (*StartMigrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartMigration not implemented")
}
func (*UnimplementedCloudServiceServer) GetMigrations(ctx context.Context, req *GetMigrationsRequest) (*GetMigrationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMigrations not implemented")
}
func (*UnimplementedCloudServiceServer) GetMigration(ctx context.Context, req *GetMigrationRequest) (*GetMigrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMigration not implemented")
}
func (*UnimplementedCloudServiceServer) HandoverNamespace(ctx context.Context, req *HandoverNamespaceRequest) (*HandoverNamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandoverNamespace not implemented")
}
func (*UnimplementedCloudServiceServer) AbortMigration(ctx context.Context, req *AbortMigrationRequest) (*AbortMigrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AbortMigration not implemented")
}
func (*UnimplementedCloudServiceServer) ConfirmMigration(ctx context.Context, req *ConfirmMigrationRequest) (*ConfirmMigrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmMigration not implemented")
}
func (*UnimplementedCloudServiceServer) CreateConnectivityRule(ctx context.Context, req *CreateConnectivityRuleRequest) (*CreateConnectivityRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConnectivityRule not implemented")
}
func (*UnimplementedCloudServiceServer) GetConnectivityRule(ctx context.Context, req *GetConnectivityRuleRequest) (*GetConnectivityRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConnectivityRule not implemented")
}
func (*UnimplementedCloudServiceServer) GetConnectivityRules(ctx context.Context, req *GetConnectivityRulesRequest) (*GetConnectivityRulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConnectivityRules not implemented")
}
func (*UnimplementedCloudServiceServer) DeleteConnectivityRule(ctx context.Context, req *DeleteConnectivityRuleRequest) (*DeleteConnectivityRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConnectivityRule not implemented")
}
func (*UnimplementedCloudServiceServer) GetProjects(ctx context.Context, req *GetProjectsRequest) (*GetProjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjects not implemented")
}
func (*UnimplementedCloudServiceServer) GetProject(ctx context.Context, req *GetProjectRequest) (*GetProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProject not implemented")
}
func (*UnimplementedCloudServiceServer) CreateProject(ctx context.Context, req *CreateProjectRequest) (*CreateProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProject not implemented")
}
func (*UnimplementedCloudServiceServer) UpdateProject(ctx context.Context, req *UpdateProjectRequest) (*UpdateProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProject not implemented")
}
func (*UnimplementedCloudServiceServer) DeleteProject(ctx context.Context, req *DeleteProjectRequest) (*DeleteProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProject not implemented")
}
func (*UnimplementedCloudServiceServer) ResendUserInvite(ctx context.Context, req *ResendUserInviteRequest) (*ResendUserInviteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResendUserInvite not implemented")
}
func (*UnimplementedCloudServiceServer) UpdateNamespaceTags(ctx context.Context, req *UpdateNamespaceTagsRequest) (*UpdateNamespaceTagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNamespaceTags not implemented")
}

func RegisterCloudServiceServer(s *grpc.Server, srv CloudServiceServer) {
	s.RegisterService(&_CloudService_serviceDesc, srv)
}

func _CloudService_GetUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceServer).GetUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/temporal.api.cloud.cloudservice.v1.CloudService/GetUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceServer).GetUsers(ctx, req.(*GetUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/temporal.api.cloud.cloudservice.v1.CloudService/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/temporal.api.cloud.cloudservice.v1.CloudService/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/temporal.api.cloud.cloudservice.v1.CloudService/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/temporal.api.cloud.cloudservice.v1.CloudService/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceServer).DeleteUser(ctx, req.(*DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudService_SetUserNamespaceAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUserNamespaceAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceServer).SetUserNamespaceAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/temporal.api.cloud.cloudservice.v1.CloudService/SetUserNamespaceAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceServer).SetUserNamespaceAccess(ctx, req.(*SetUserNamespaceAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudService_GetAsyncOperation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAsyncOperationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceServer).GetAsyncOperation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/temporal.api.cloud.cloudservice.v1.CloudService/GetAsyncOperation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceServer).GetAsyncOperation(ctx, req.(*GetAsyncOperationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudService_CreateNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceServer).CreateNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/temporal.api.cloud.cloudservice.v1.CloudService/CreateNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceServer).CreateNamespace(ctx, req.(*CreateNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudService_GetNamespaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNamespacesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceServer).GetNamespaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/temporal.api.cloud.cloudservice.v1.CloudService/GetNamespaces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceServer).GetNamespaces(ctx, req.(*GetNamespacesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudService_GetNamespaceIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNamespaceIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceServer).GetNamespaceIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/temporal.api.cloud.cloudservice.v1.CloudService/GetNamespaceIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceServer).GetNamespaceIDs(ctx, req.(*GetNamespaceIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudService_GetNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceServer).GetNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/temporal.api.cloud.cloudservice.v1.CloudService/GetNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceServer).GetNamespace(ctx, req.(*GetNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudService_UpdateNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceServer).UpdateNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/temporal.api.cloud.cloudservice.v1.CloudService/UpdateNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceServer).UpdateNamespace(ctx, req.(*UpdateNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudService_RenameCustomSearchAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameCustomSearchAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceServer).RenameCustomSearchAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/temporal.api.cloud.cloudservice.v1.CloudService/RenameCustomSearchAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceServer).RenameCustomSearchAttribute(ctx, req.(*RenameCustomSearchAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudService_DeleteNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceServer).DeleteNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/temporal.api.cloud.cloudservice.v1.CloudService/DeleteNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceServer).DeleteNamespace(ctx, req.(*DeleteNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudService_FailoverNamespaceRegion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FailoverNamespaceRegionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceServer).FailoverNamespaceRegion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/temporal.api.cloud.cloudservice.v1.CloudService/FailoverNamespaceRegion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceServer).FailoverNamespaceRegion(ctx, req.(*FailoverNamespaceRegionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudService_AddNamespaceRegion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddNamespaceRegionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceServer).AddNamespaceRegion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/temporal.api.cloud.cloudservice.v1.CloudService/AddNamespaceRegion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceServer).AddNamespaceRegion(ctx, req.(*AddNamespaceRegionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudService_DeleteNamespaceRegion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNamespaceRegionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceServer).DeleteNamespaceRegion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/temporal.api.cloud.cloudservice.v1.CloudService/DeleteNamespaceRegion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceServer).DeleteNamespaceRegion(ctx, req.(*DeleteNamespaceRegionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudService_GetRegions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRegionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceServer).GetRegions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/temporal.api.cloud.cloudservice.v1.CloudService/GetRegions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceServer).GetRegions(ctx, req.(*GetRegionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudService_GetRegion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRegionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceServer).GetRegion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/temporal.api.cloud.cloudservice.v1.CloudService/GetRegion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceServer).GetRegion(ctx, req.(*GetRegionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudService_GetNexusEndpoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNexusEndpointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceServer).GetNexusEndpoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/temporal.api.cloud.cloudservice.v1.CloudService/GetNexusEndpoints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceServer).GetNexusEndpoints(ctx, req.(*GetNexusEndpointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudService_GetNexusEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNexusEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceServer).GetNexusEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/temporal.api.cloud.cloudservice.v1.CloudService/GetNexusEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceServer).GetNexusEndpoint(ctx, req.(*GetNexusEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudService_CreateNexusEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNexusEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceServer).CreateNexusEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/temporal.api.cloud.cloudservice.v1.CloudService/CreateNexusEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceServer).CreateNexusEndpoint(ctx, req.(*CreateNexusEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudService_UpdateNexusEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNexusEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceServer).UpdateNexusEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/temporal.api.cloud.cloudservice.v1.CloudService/UpdateNexusEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceServer).UpdateNexusEndpoint(ctx, req.(*UpdateNexusEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudService_DeleteNexusEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNexusEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceServer).DeleteNexusEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/temporal.api.cloud.cloudservice.v1.CloudService/DeleteNexusEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceServer).DeleteNexusEndpoint(ctx, req.(*DeleteNexusEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudService_GetUserGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceServer).GetUserGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/temporal.api.cloud.cloudservice.v1.CloudService/GetUserGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceServer).GetUserGroups(ctx, req.(*GetUserGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudService_GetUserGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceServer).GetUserGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/temporal.api.cloud.cloudservice.v1.CloudService/GetUserGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceServer).GetUserGroup(ctx, req.(*GetUserGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudService_CreateUserGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceServer).CreateUserGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/temporal.api.cloud.cloudservice.v1.CloudService/CreateUserGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceServer).CreateUserGroup(ctx, req.(*CreateUserGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudService_UpdateUserGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceServer).UpdateUserGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/temporal.api.cloud.cloudservice.v1.CloudService/UpdateUserGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceServer).UpdateUserGroup(ctx, req.(*UpdateUserGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudService_DeleteUserGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceServer).DeleteUserGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/temporal.api.cloud.cloudservice.v1.CloudService/DeleteUserGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceServer).DeleteUserGroup(ctx, req.(*DeleteUserGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudService_SetUserGroupNamespaceAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUserGroupNamespaceAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceServer).SetUserGroupNamespaceAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/temporal.api.cloud.cloudservice.v1.CloudService/SetUserGroupNamespaceAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceServer).SetUserGroupNamespaceAccess(ctx, req.(*SetUserGroupNamespaceAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudService_AddUserGroupMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserGroupMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceServer).AddUserGroupMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/temporal.api.cloud.cloudservice.v1.CloudService/AddUserGroupMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceServer).AddUserGroupMember(ctx, req.(*AddUserGroupMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudService_RemoveUserGroupMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveUserGroupMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceServer).RemoveUserGroupMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/temporal.api.cloud.cloudservice.v1.CloudService/RemoveUserGroupMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceServer).RemoveUserGroupMember(ctx, req.(*RemoveUserGroupMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudService_GetUserGroupMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserGroupMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceServer).GetUserGroupMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/temporal.api.cloud.cloudservice.v1.CloudService/GetUserGroupMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceServer).GetUserGroupMembers(ctx, req.(*GetUserGroupMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudService_CreateServiceAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateServiceAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceServer).CreateServiceAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/temporal.api.cloud.cloudservice.v1.CloudService/CreateServiceAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceServer).CreateServiceAccount(ctx, req.(*CreateServiceAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudService_GetServiceAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceServer).GetServiceAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/temporal.api.cloud.cloudservice.v1.CloudService/GetServiceAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceServer).GetServiceAccount(ctx, req.(*GetServiceAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudService_GetServiceAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceServer).GetServiceAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/temporal.api.cloud.cloudservice.v1.CloudService/GetServiceAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceServer).GetServiceAccounts(ctx, req.(*GetServiceAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudService_UpdateServiceAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateServiceAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceServer).UpdateServiceAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/temporal.api.cloud.cloudservice.v1.CloudService/UpdateServiceAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceServer).UpdateServiceAccount(ctx, req.(*UpdateServiceAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudService_DeleteServiceAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteServiceAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceServer).DeleteServiceAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/temporal.api.cloud.cloudservice.v1.CloudService/DeleteServiceAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceServer).DeleteServiceAccount(ctx, req.(*DeleteServiceAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudService_GetApiKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApiKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceServer).GetApiKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/temporal.api.cloud.cloudservice.v1.CloudService/GetApiKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceServer).GetApiKeys(ctx, req.(*GetApiKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudService_GetApiKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApiKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceServer).GetApiKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/temporal.api.cloud.cloudservice.v1.CloudService/GetApiKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceServer).GetApiKey(ctx, req.(*GetApiKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudService_CreateApiKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateApiKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceServer).CreateApiKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/temporal.api.cloud.cloudservice.v1.CloudService/CreateApiKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceServer).CreateApiKey(ctx, req.(*CreateApiKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudService_UpdateApiKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateApiKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceServer).UpdateApiKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/temporal.api.cloud.cloudservice.v1.CloudService/UpdateApiKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceServer).UpdateApiKey(ctx, req.(*UpdateApiKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudService_DeleteApiKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteApiKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceServer).DeleteApiKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/temporal.api.cloud.cloudservice.v1.CloudService/DeleteApiKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceServer).DeleteApiKey(ctx, req.(*DeleteApiKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudService_GetAuditLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAuditLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceServer).GetAuditLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/temporal.api.cloud.cloudservice.v1.CloudService/GetAuditLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceServer).GetAuditLogs(ctx, req.(*GetAuditLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudService_GetUsage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceServer).GetUsage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/temporal.api.cloud.cloudservice.v1.CloudService/GetUsage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceServer).GetUsage(ctx, req.(*GetUsageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudService_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/temporal.api.cloud.cloudservice.v1.CloudService/GetAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceServer).GetAccount(ctx, req.(*GetAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudService_UpdateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceServer).UpdateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/temporal.api.cloud.cloudservice.v1.CloudService/UpdateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceServer).UpdateAccount(ctx, req.(*UpdateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudService_CreateNamespaceExportSink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNamespaceExportSinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceServer).CreateNamespaceExportSink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/temporal.api.cloud.cloudservice.v1.CloudService/CreateNamespaceExportSink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceServer).CreateNamespaceExportSink(ctx, req.(*CreateNamespaceExportSinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudService_GetNamespaceExportSink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNamespaceExportSinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceServer).GetNamespaceExportSink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/temporal.api.cloud.cloudservice.v1.CloudService/GetNamespaceExportSink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceServer).GetNamespaceExportSink(ctx, req.(*GetNamespaceExportSinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudService_GetNamespaceExportSinks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNamespaceExportSinksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceServer).GetNamespaceExportSinks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/temporal.api.cloud.cloudservice.v1.CloudService/GetNamespaceExportSinks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceServer).GetNamespaceExportSinks(ctx, req.(*GetNamespaceExportSinksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudService_UpdateNamespaceExportSink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNamespaceExportSinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceServer).UpdateNamespaceExportSink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/temporal.api.cloud.cloudservice.v1.CloudService/UpdateNamespaceExportSink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceServer).UpdateNamespaceExportSink(ctx, req.(*UpdateNamespaceExportSinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudService_DeleteNamespaceExportSink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNamespaceExportSinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceServer).DeleteNamespaceExportSink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/temporal.api.cloud.cloudservice.v1.CloudService/DeleteNamespaceExportSink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceServer).DeleteNamespaceExportSink(ctx, req.(*DeleteNamespaceExportSinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudService_ValidateNamespaceExportSink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateNamespaceExportSinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceServer).ValidateNamespaceExportSink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/temporal.api.cloud.cloudservice.v1.CloudService/ValidateNamespaceExportSink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceServer).ValidateNamespaceExportSink(ctx, req.(*ValidateNamespaceExportSinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudService_StartMigration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartMigrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceServer).StartMigration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/temporal.api.cloud.cloudservice.v1.CloudService/StartMigration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceServer).StartMigration(ctx, req.(*StartMigrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudService_GetMigrations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMigrationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceServer).GetMigrations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/temporal.api.cloud.cloudservice.v1.CloudService/GetMigrations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceServer).GetMigrations(ctx, req.(*GetMigrationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudService_GetMigration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMigrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceServer).GetMigration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/temporal.api.cloud.cloudservice.v1.CloudService/GetMigration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceServer).GetMigration(ctx, req.(*GetMigrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudService_HandoverNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandoverNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceServer).HandoverNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/temporal.api.cloud.cloudservice.v1.CloudService/HandoverNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceServer).HandoverNamespace(ctx, req.(*HandoverNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudService_AbortMigration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AbortMigrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceServer).AbortMigration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/temporal.api.cloud.cloudservice.v1.CloudService/AbortMigration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceServer).AbortMigration(ctx, req.(*AbortMigrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudService_ConfirmMigration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmMigrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceServer).ConfirmMigration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/temporal.api.cloud.cloudservice.v1.CloudService/ConfirmMigration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceServer).ConfirmMigration(ctx, req.(*ConfirmMigrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudService_CreateConnectivityRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConnectivityRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceServer).CreateConnectivityRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/temporal.api.cloud.cloudservice.v1.CloudService/CreateConnectivityRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceServer).CreateConnectivityRule(ctx, req.(*CreateConnectivityRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudService_GetConnectivityRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConnectivityRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceServer).GetConnectivityRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/temporal.api.cloud.cloudservice.v1.CloudService/GetConnectivityRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceServer).GetConnectivityRule(ctx, req.(*GetConnectivityRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudService_GetConnectivityRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConnectivityRulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceServer).GetConnectivityRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/temporal.api.cloud.cloudservice.v1.CloudService/GetConnectivityRules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceServer).GetConnectivityRules(ctx, req.(*GetConnectivityRulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudService_DeleteConnectivityRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConnectivityRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceServer).DeleteConnectivityRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/temporal.api.cloud.cloudservice.v1.CloudService/DeleteConnectivityRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceServer).DeleteConnectivityRule(ctx, req.(*DeleteConnectivityRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudService_GetProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceServer).GetProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/temporal.api.cloud.cloudservice.v1.CloudService/GetProjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceServer).GetProjects(ctx, req.(*GetProjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudService_GetProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceServer).GetProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/temporal.api.cloud.cloudservice.v1.CloudService/GetProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceServer).GetProject(ctx, req.(*GetProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudService_CreateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceServer).CreateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/temporal.api.cloud.cloudservice.v1.CloudService/CreateProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceServer).CreateProject(ctx, req.(*CreateProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudService_UpdateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceServer).UpdateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/temporal.api.cloud.cloudservice.v1.CloudService/UpdateProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceServer).UpdateProject(ctx, req.(*UpdateProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudService_DeleteProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceServer).DeleteProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/temporal.api.cloud.cloudservice.v1.CloudService/DeleteProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceServer).DeleteProject(ctx, req.(*DeleteProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudService_ResendUserInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResendUserInviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceServer).ResendUserInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/temporal.api.cloud.cloudservice.v1.CloudService/ResendUserInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceServer).ResendUserInvite(ctx, req.(*ResendUserInviteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudService_UpdateNamespaceTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNamespaceTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServiceServer).UpdateNamespaceTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/temporal.api.cloud.cloudservice.v1.CloudService/UpdateNamespaceTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServiceServer).UpdateNamespaceTags(ctx, req.(*UpdateNamespaceTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CloudService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "temporal.api.cloud.cloudservice.v1.CloudService",
	HandlerType: (*CloudServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUsers",
			Handler:    _CloudService_GetUsers_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _CloudService_GetUser_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _CloudService_CreateUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _CloudService_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _CloudService_DeleteUser_Handler,
		},
		{
			MethodName: "SetUserNamespaceAccess",
			Handler:    _CloudService_SetUserNamespaceAccess_Handler,
		},
		{
			MethodName: "GetAsyncOperation",
			Handler:    _CloudService_GetAsyncOperation_Handler,
		},
		{
			MethodName: "CreateNamespace",
			Handler:    _CloudService_CreateNamespace_Handler,
		},
		{
			MethodName: "GetNamespaces",
			Handler:    _CloudService_GetNamespaces_Handler,
		},
		{
			MethodName: "GetNamespaceIDs",
			Handler:    _CloudService_GetNamespaceIDs_Handler,
		},
		{
			MethodName: "GetNamespace",
			Handler:    _CloudService_GetNamespace_Handler,
		},
		{
			MethodName: "UpdateNamespace",
			Handler:    _CloudService_UpdateNamespace_Handler,
		},
		{
			MethodName: "RenameCustomSearchAttribute",
			Handler:    _CloudService_RenameCustomSearchAttribute_Handler,
		},
		{
			MethodName: "DeleteNamespace",
			Handler:    _CloudService_DeleteNamespace_Handler,
		},
		{
			MethodName: "FailoverNamespaceRegion",
			Handler:    _CloudService_FailoverNamespaceRegion_Handler,
		},
		{
			MethodName: "AddNamespaceRegion",
			Handler:    _CloudService_AddNamespaceRegion_Handler,
		},
		{
			MethodName: "DeleteNamespaceRegion",
			Handler:    _CloudService_DeleteNamespaceRegion_Handler,
		},
		{
			MethodName: "GetRegions",
			Handler:    _CloudService_GetRegions_Handler,
		},
		{
			MethodName: "GetRegion",
			Handler:    _CloudService_GetRegion_Handler,
		},
		{
			MethodName: "GetNexusEndpoints",
			Handler:    _CloudService_GetNexusEndpoints_Handler,
		},
		{
			MethodName: "GetNexusEndpoint",
			Handler:    _CloudService_GetNexusEndpoint_Handler,
		},
		{
			MethodName: "CreateNexusEndpoint",
			Handler:    _CloudService_CreateNexusEndpoint_Handler,
		},
		{
			MethodName: "UpdateNexusEndpoint",
			Handler:    _CloudService_UpdateNexusEndpoint_Handler,
		},
		{
			MethodName: "DeleteNexusEndpoint",
			Handler:    _CloudService_DeleteNexusEndpoint_Handler,
		},
		{
			MethodName: "GetUserGroups",
			Handler:    _CloudService_GetUserGroups_Handler,
		},
		{
			MethodName: "GetUserGroup",
			Handler:    _CloudService_GetUserGroup_Handler,
		},
		{
			MethodName: "CreateUserGroup",
			Handler:    _CloudService_CreateUserGroup_Handler,
		},
		{
			MethodName: "UpdateUserGroup",
			Handler:    _CloudService_UpdateUserGroup_Handler,
		},
		{
			MethodName: "DeleteUserGroup",
			Handler:    _CloudService_DeleteUserGroup_Handler,
		},
		{
			MethodName: "SetUserGroupNamespaceAccess",
			Handler:    _CloudService_SetUserGroupNamespaceAccess_Handler,
		},
		{
			MethodName: "AddUserGroupMember",
			Handler:    _CloudService_AddUserGroupMember_Handler,
		},
		{
			MethodName: "RemoveUserGroupMember",
			Handler:    _CloudService_RemoveUserGroupMember_Handler,
		},
		{
			MethodName: "GetUserGroupMembers",
			Handler:    _CloudService_GetUserGroupMembers_Handler,
		},
		{
			MethodName: "CreateServiceAccount",
			Handler:    _CloudService_CreateServiceAccount_Handler,
		},
		{
			MethodName: "GetServiceAccount",
			Handler:    _CloudService_GetServiceAccount_Handler,
		},
		{
			MethodName: "GetServiceAccounts",
			Handler:    _CloudService_GetServiceAccounts_Handler,
		},
		{
			MethodName: "UpdateServiceAccount",
			Handler:    _CloudService_UpdateServiceAccount_Handler,
		},
		{
			MethodName: "DeleteServiceAccount",
			Handler:    _CloudService_DeleteServiceAccount_Handler,
		},
		{
			MethodName: "GetApiKeys",
			Handler:    _CloudService_GetApiKeys_Handler,
		},
		{
			MethodName: "GetApiKey",
			Handler:    _CloudService_GetApiKey_Handler,
		},
		{
			MethodName: "CreateApiKey",
			Handler:    _CloudService_CreateApiKey_Handler,
		},
		{
			MethodName: "UpdateApiKey",
			Handler:    _CloudService_UpdateApiKey_Handler,
		},
		{
			MethodName: "DeleteApiKey",
			Handler:    _CloudService_DeleteApiKey_Handler,
		},
		{
			MethodName: "GetAuditLogs",
			Handler:    _CloudService_GetAuditLogs_Handler,
		},
		{
			MethodName: "GetUsage",
			Handler:    _CloudService_GetUsage_Handler,
		},
		{
			MethodName: "GetAccount",
			Handler:    _CloudService_GetAccount_Handler,
		},
		{
			MethodName: "UpdateAccount",
			Handler:    _CloudService_UpdateAccount_Handler,
		},
		{
			MethodName: "CreateNamespaceExportSink",
			Handler:    _CloudService_CreateNamespaceExportSink_Handler,
		},
		{
			MethodName: "GetNamespaceExportSink",
			Handler:    _CloudService_GetNamespaceExportSink_Handler,
		},
		{
			MethodName: "GetNamespaceExportSinks",
			Handler:    _CloudService_GetNamespaceExportSinks_Handler,
		},
		{
			MethodName: "UpdateNamespaceExportSink",
			Handler:    _CloudService_UpdateNamespaceExportSink_Handler,
		},
		{
			MethodName: "DeleteNamespaceExportSink",
			Handler:    _CloudService_DeleteNamespaceExportSink_Handler,
		},
		{
			MethodName: "ValidateNamespaceExportSink",
			Handler:    _CloudService_ValidateNamespaceExportSink_Handler,
		},
		{
			MethodName: "StartMigration",
			Handler:    _CloudService_StartMigration_Handler,
		},
		{
			MethodName: "GetMigrations",
			Handler:    _CloudService_GetMigrations_Handler,
		},
		{
			MethodName: "GetMigration",
			Handler:    _CloudService_GetMigration_Handler,
		},
		{
			MethodName: "HandoverNamespace",
			Handler:    _CloudService_HandoverNamespace_Handler,
		},
		{
			MethodName: "AbortMigration",
			Handler:    _CloudService_AbortMigration_Handler,
		},
		{
			MethodName: "ConfirmMigration",
			Handler:    _CloudService_ConfirmMigration_Handler,
		},
		{
			MethodName: "CreateConnectivityRule",
			Handler:    _CloudService_CreateConnectivityRule_Handler,
		},
		{
			MethodName: "GetConnectivityRule",
			Handler:    _CloudService_GetConnectivityRule_Handler,
		},
		{
			MethodName: "GetConnectivityRules",
			Handler:    _CloudService_GetConnectivityRules_Handler,
		},
		{
			MethodName: "DeleteConnectivityRule",
			Handler:    _CloudService_DeleteConnectivityRule_Handler,
		},
		{
			MethodName: "GetProjects",
			Handler:    _CloudService_GetProjects_Handler,
		},
		{
			MethodName: "GetProject",
			Handler:    _CloudService_GetProject_Handler,
		},
		{
			MethodName: "CreateProject",
			Handler:    _CloudService_CreateProject_Handler,
		},
		{
			MethodName: "UpdateProject",
			Handler:    _CloudService_UpdateProject_Handler,
		},
		{
			MethodName: "DeleteProject",
			Handler:    _CloudService_DeleteProject_Handler,
		},
		{
			MethodName: "ResendUserInvite",
			Handler:    _CloudService_ResendUserInvite_Handler,
		},
		{
			MethodName: "UpdateNamespaceTags",
			Handler:    _CloudService_UpdateNamespaceTags_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "temporal/api/cloud/cloudservice/v1/service.proto",
}
