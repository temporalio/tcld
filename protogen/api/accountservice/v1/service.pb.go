// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/accountservice/v1/service.proto

package accountservice

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("api/accountservice/v1/service.proto", fileDescriptor_3e50bdfe3e07e117)
}

var fileDescriptor_3e50bdfe3e07e117 = []byte{
	// 324 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0xb1, 0x4e, 0xc3, 0x30,
	0x10, 0x86, 0xed, 0x01, 0x06, 0x4b, 0x80, 0x88, 0xc4, 0xd2, 0xe1, 0x06, 0x58, 0x40, 0x14, 0xa7,
	0x85, 0x91, 0x09, 0x96, 0x6e, 0x0c, 0x45, 0x5d, 0x58, 0x90, 0x49, 0x8f, 0x2a, 0x52, 0x5b, 0x1b,
	0xdb, 0xad, 0x90, 0x58, 0x78, 0x04, 0x1e, 0x83, 0x9d, 0x97, 0x60, 0xec, 0xd8, 0x91, 0xba, 0x0b,
	0x63, 0x1f, 0x01, 0x09, 0x27, 0xa1, 0x81, 0x14, 0xcc, 0x66, 0xf9, 0xbe, 0xff, 0x3e, 0x9f, 0xa5,
	0x63, 0x7b, 0x42, 0xa5, 0xb1, 0x48, 0x12, 0x39, 0x1a, 0x5a, 0x83, 0x7a, 0x9c, 0x26, 0x18, 0x8f,
	0x9b, 0x71, 0x76, 0xe4, 0x4a, 0x4b, 0x2b, 0xa3, 0x1d, 0xa1, 0x52, 0x5e, 0x86, 0xf8, 0xb8, 0x59,
	0xab, 0x57, 0x67, 0x35, 0xde, 0x8d, 0xd0, 0xd8, 0x6b, 0x8d, 0x46, 0xc9, 0xa1, 0xc9, 0x9a, 0x1c,
	0xbf, 0xac, 0xb1, 0xcd, 0x33, 0x0f, 0x5f, 0x7a, 0x38, 0xba, 0x67, 0xdb, 0x2d, 0xb4, 0x17, 0x62,
	0x80, 0x46, 0x89, 0x04, 0x3b, 0x46, 0xf4, 0x30, 0x8a, 0x79, 0xa5, 0x8d, 0xff, 0x20, 0xdb, 0xde,
	0x53, 0x6b, 0x84, 0x07, 0xfc, 0x83, 0x76, 0x49, 0xf4, 0xc0, 0xa2, 0xe5, 0xb2, 0xf1, 0xea, 0x90,
	0x4e, 0xa6, 0xe4, 0x6e, 0xfe, 0x23, 0x51, 0xc8, 0x35, 0xdb, 0x6a, 0xa1, 0xcd, 0xfe, 0xc2, 0x9b,
	0x8f, 0x56, 0xf7, 0x59, 0xe6, 0x72, 0x2d, 0x0f, 0xc5, 0x0b, 0x67, 0xc2, 0xd8, 0x57, 0x31, 0xda,
	0xff, 0x33, 0x9f, 0x9b, 0x0e, 0x02, 0xc8, 0x42, 0xd2, 0x67, 0x1b, 0x1d, 0xd5, 0x15, 0x16, 0x73,
	0xcf, 0xe1, 0x8a, 0x74, 0x89, 0xca, 0x55, 0xf5, 0x30, 0xf8, 0xdb, 0x48, 0x6d, 0xec, 0xa5, 0x72,
	0x68, 0x7e, 0x1b, 0x29, 0x43, 0x02, 0x46, 0x2a, 0xc8, 0x5c, 0x72, 0x7e, 0x3b, 0x99, 0x01, 0x99,
	0xce, 0x80, 0x2c, 0x66, 0x40, 0x1f, 0x1d, 0xd0, 0x67, 0x07, 0xf4, 0xd5, 0x01, 0x9d, 0x38, 0xa0,
	0x6f, 0x0e, 0xe8, 0xbb, 0x03, 0xb2, 0x70, 0x40, 0x9f, 0xe6, 0x40, 0x26, 0x73, 0x20, 0xd3, 0x39,
	0x90, 0xab, 0x86, 0x1d, 0x28, 0xdd, 0xe7, 0x49, 0x5f, 0x8e, 0xba, 0x71, 0xe5, 0x96, 0x9c, 0x96,
	0x6f, 0x6e, 0xd6, 0x3f, 0x97, 0xe4, 0xe4, 0x23, 0x00, 0x00, 0xff, 0xff, 0xa1, 0xcd, 0x29, 0x05,
	0x90, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AccountServiceClient is the client API for AccountService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AccountServiceClient interface {
	// Gets the usage records of a given namespace.
	GetNamespaceUsage(ctx context.Context, in *GetNamespaceUsageRequest, opts ...grpc.CallOption) (*GetNamespaceUsageResponse, error)
	// Gets the usage records of a subset of namespaces belonging to a Temporal account.
	GetNamespacesUsage(ctx context.Context, in *GetNamespacesUsageRequest, opts ...grpc.CallOption) (*GetNamespacesUsageResponse, error)
	// Gets the usage records of a Temporal account.
	GetAccountUsage(ctx context.Context, in *GetAccountUsageRequest, opts ...grpc.CallOption) (*GetAccountUsageResponse, error)
	// Describes account configuration in detail
	GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*GetAccountResponse, error)
	// Updates Account configuration settings on Temporal cloud.
	UpdateAccount(ctx context.Context, in *UpdateAccountRequest, opts ...grpc.CallOption) (*UpdateAccountResponse, error)
	// Gets all cloud regions enabled for namespace creation.
	GetRegions(ctx context.Context, in *GetRegionsRequest, opts ...grpc.CallOption) (*GetRegionsResponse, error)
}

type accountServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountServiceClient(cc grpc.ClientConnInterface) AccountServiceClient {
	return &accountServiceClient{cc}
}

func (c *accountServiceClient) GetNamespaceUsage(ctx context.Context, in *GetNamespaceUsageRequest, opts ...grpc.CallOption) (*GetNamespaceUsageResponse, error) {
	out := new(GetNamespaceUsageResponse)
	err := c.cc.Invoke(ctx, "/api.accountservice.v1.AccountService/GetNamespaceUsage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) GetNamespacesUsage(ctx context.Context, in *GetNamespacesUsageRequest, opts ...grpc.CallOption) (*GetNamespacesUsageResponse, error) {
	out := new(GetNamespacesUsageResponse)
	err := c.cc.Invoke(ctx, "/api.accountservice.v1.AccountService/GetNamespacesUsage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) GetAccountUsage(ctx context.Context, in *GetAccountUsageRequest, opts ...grpc.CallOption) (*GetAccountUsageResponse, error) {
	out := new(GetAccountUsageResponse)
	err := c.cc.Invoke(ctx, "/api.accountservice.v1.AccountService/GetAccountUsage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*GetAccountResponse, error) {
	out := new(GetAccountResponse)
	err := c.cc.Invoke(ctx, "/api.accountservice.v1.AccountService/GetAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) UpdateAccount(ctx context.Context, in *UpdateAccountRequest, opts ...grpc.CallOption) (*UpdateAccountResponse, error) {
	out := new(UpdateAccountResponse)
	err := c.cc.Invoke(ctx, "/api.accountservice.v1.AccountService/UpdateAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) GetRegions(ctx context.Context, in *GetRegionsRequest, opts ...grpc.CallOption) (*GetRegionsResponse, error) {
	out := new(GetRegionsResponse)
	err := c.cc.Invoke(ctx, "/api.accountservice.v1.AccountService/GetRegions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountServiceServer is the server API for AccountService service.
type AccountServiceServer interface {
	// Gets the usage records of a given namespace.
	GetNamespaceUsage(context.Context, *GetNamespaceUsageRequest) (*GetNamespaceUsageResponse, error)
	// Gets the usage records of a subset of namespaces belonging to a Temporal account.
	GetNamespacesUsage(context.Context, *GetNamespacesUsageRequest) (*GetNamespacesUsageResponse, error)
	// Gets the usage records of a Temporal account.
	GetAccountUsage(context.Context, *GetAccountUsageRequest) (*GetAccountUsageResponse, error)
	// Describes account configuration in detail
	GetAccount(context.Context, *GetAccountRequest) (*GetAccountResponse, error)
	// Updates Account configuration settings on Temporal cloud.
	UpdateAccount(context.Context, *UpdateAccountRequest) (*UpdateAccountResponse, error)
	// Gets all cloud regions enabled for namespace creation.
	GetRegions(context.Context, *GetRegionsRequest) (*GetRegionsResponse, error)
}

// UnimplementedAccountServiceServer can be embedded to have forward compatible implementations.
type UnimplementedAccountServiceServer struct {
}

func (*UnimplementedAccountServiceServer) GetNamespaceUsage(ctx context.Context, req *GetNamespaceUsageRequest) (*GetNamespaceUsageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNamespaceUsage not implemented")
}
func (*UnimplementedAccountServiceServer) GetNamespacesUsage(ctx context.Context, req *GetNamespacesUsageRequest) (*GetNamespacesUsageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNamespacesUsage not implemented")
}
func (*UnimplementedAccountServiceServer) GetAccountUsage(ctx context.Context, req *GetAccountUsageRequest) (*GetAccountUsageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountUsage not implemented")
}
func (*UnimplementedAccountServiceServer) GetAccount(ctx context.Context, req *GetAccountRequest) (*GetAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccount not implemented")
}
func (*UnimplementedAccountServiceServer) UpdateAccount(ctx context.Context, req *UpdateAccountRequest) (*UpdateAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccount not implemented")
}
func (*UnimplementedAccountServiceServer) GetRegions(ctx context.Context, req *GetRegionsRequest) (*GetRegionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRegions not implemented")
}

func RegisterAccountServiceServer(s *grpc.Server, srv AccountServiceServer) {
	s.RegisterService(&_AccountService_serviceDesc, srv)
}

func _AccountService_GetNamespaceUsage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNamespaceUsageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).GetNamespaceUsage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.accountservice.v1.AccountService/GetNamespaceUsage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).GetNamespaceUsage(ctx, req.(*GetNamespaceUsageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_GetNamespacesUsage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNamespacesUsageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).GetNamespacesUsage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.accountservice.v1.AccountService/GetNamespacesUsage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).GetNamespacesUsage(ctx, req.(*GetNamespacesUsageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_GetAccountUsage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountUsageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).GetAccountUsage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.accountservice.v1.AccountService/GetAccountUsage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).GetAccountUsage(ctx, req.(*GetAccountUsageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.accountservice.v1.AccountService/GetAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).GetAccount(ctx, req.(*GetAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_UpdateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).UpdateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.accountservice.v1.AccountService/UpdateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).UpdateAccount(ctx, req.(*UpdateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_GetRegions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRegionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).GetRegions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.accountservice.v1.AccountService/GetRegions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).GetRegions(ctx, req.(*GetRegionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AccountService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.accountservice.v1.AccountService",
	HandlerType: (*AccountServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNamespaceUsage",
			Handler:    _AccountService_GetNamespaceUsage_Handler,
		},
		{
			MethodName: "GetNamespacesUsage",
			Handler:    _AccountService_GetNamespacesUsage_Handler,
		},
		{
			MethodName: "GetAccountUsage",
			Handler:    _AccountService_GetAccountUsage_Handler,
		},
		{
			MethodName: "GetAccount",
			Handler:    _AccountService_GetAccount_Handler,
		},
		{
			MethodName: "UpdateAccount",
			Handler:    _AccountService_UpdateAccount_Handler,
		},
		{
			MethodName: "GetRegions",
			Handler:    _AccountService_GetRegions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/accountservice/v1/service.proto",
}
