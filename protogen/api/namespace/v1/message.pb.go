// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/namespace/v1/message.proto

package namespace

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	types "github.com/gogo/protobuf/types"
	descriptor "github.com/golang/protobuf/protoc-gen-go/descriptor"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
	v1 "github.com/temporalio/tcld/protogen/api/common/v1"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SearchAttributeType int32

const (
	SEARCH_ATTRIBUTE_TYPE_UNSPECIFIED  SearchAttributeType = 0
	SEARCH_ATTRIBUTE_TYPE_KEYWORD      SearchAttributeType = 1
	SEARCH_ATTRIBUTE_TYPE_TEXT         SearchAttributeType = 2
	SEARCH_ATTRIBUTE_TYPE_INT          SearchAttributeType = 3
	SEARCH_ATTRIBUTE_TYPE_DOUBLE       SearchAttributeType = 4
	SEARCH_ATTRIBUTE_TYPE_DATETIME     SearchAttributeType = 5
	SEARCH_ATTRIBUTE_TYPE_BOOL         SearchAttributeType = 6
	SEARCH_ATTRIBUTE_TYPE_KEYWORD_LIST SearchAttributeType = 7
)

var SearchAttributeType_name = map[int32]string{
	0: "Unspecified",
	1: "Keyword",
	2: "Text",
	3: "Int",
	4: "Double",
	5: "Datetime",
	6: "Bool",
	7: "KeywordList",
}

var SearchAttributeType_value = map[string]int32{
	"Unspecified": 0,
	"Keyword":     1,
	"Text":        2,
	"Int":         3,
	"Double":      4,
	"Datetime":    5,
	"Bool":        6,
	"KeywordList": 7,
}

func (SearchAttributeType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_56458b48206aa18d, []int{0}
}

type State int32

const (
	STATE_UNSPECIFIED       State = 0
	STATE_ACTIVATING        State = 1
	STATE_ACTIVATION_FAILED State = 2
	STATE_ACTIVE            State = 3
	STATE_UPDATING          State = 4
	STATE_UPDATE_FAILED     State = 5
	STATE_DELETING          State = 6
	STATE_DELETE_FAILED     State = 7
	STATE_DELETED           State = 8
	STATE_SUSPENDING        State = 9
	STATE_SUSPEND_FAILED    State = 10
	STATE_SUSPENDED         State = 11
)

var State_name = map[int32]string{
	0:  "Unspecified",
	1:  "Activating",
	2:  "ActivationFailed",
	3:  "Active",
	4:  "Updating",
	5:  "UpdateFailed",
	6:  "Deleting",
	7:  "DeleteFailed",
	8:  "Deleted",
	9:  "Suspending",
	10: "SuspendFailed",
	11: "Suspended",
}

var State_value = map[string]int32{
	"Unspecified":      0,
	"Activating":       1,
	"ActivationFailed": 2,
	"Active":           3,
	"Updating":         4,
	"UpdateFailed":     5,
	"Deleting":         6,
	"DeleteFailed":     7,
	"Deleted":          8,
	"Suspending":       9,
	"SuspendFailed":    10,
	"Suspended":        11,
}

func (State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_56458b48206aa18d, []int{1}
}

type Environment int32

const (
	ENVIRONMENT_UNSPECIFIED Environment = 0
	ENVIRONMENT_DEV         Environment = 1
	ENVIRONMENT_TEST        Environment = 2
	ENVIRONMENT_PROD        Environment = 3
)

var Environment_name = map[int32]string{
	0: "Unspecified",
	1: "Dev",
	2: "Test",
	3: "Prod",
}

var Environment_value = map[string]int32{
	"Unspecified": 0,
	"Dev":         1,
	"Test":        2,
	"Prod":        3,
}

func (Environment) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_56458b48206aa18d, []int{2}
}

type AuthMethod int32

const (
	AUTH_METHOD_UNSPECIFIED     AuthMethod = 0
	AUTH_METHOD_RESTRICTED      AuthMethod = 1
	AUTH_METHOD_MTLS            AuthMethod = 2
	AUTH_METHOD_API_KEY         AuthMethod = 3
	AUTH_METHOD_API_KEY_OR_MTLS AuthMethod = 4
)

var AuthMethod_name = map[int32]string{
	0: "Unspecified",
	1: "Restricted",
	2: "Mtls",
	3: "ApiKey",
	4: "ApiKeyOrMtls",
}

var AuthMethod_value = map[string]int32{
	"Unspecified":  0,
	"Restricted":   1,
	"Mtls":         2,
	"ApiKey":       3,
	"ApiKeyOrMtls": 4,
}

func (AuthMethod) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_56458b48206aa18d, []int{3}
}

type NamespaceSpec struct {
	// the region where the namespace is (or will be) active.
	Region string `protobuf:"bytes,1,opt,name=region,proto3" json:"region,omitempty"` // Deprecated: Do not use.
	// the base64 encoded ca cert(s) that the clients can use for authentication and authorization
	AcceptedClientCa string `protobuf:"bytes,2,opt,name=accepted_client_ca,json=acceptedClientCa,proto3" json:"accepted_client_ca,omitempty"`
	// the num of days the workflows' data will be retained for
	RetentionDays int32 `protobuf:"varint,3,opt,name=retention_days,json=retentionDays,proto3" json:"retention_days,omitempty"`
	// the custom search attributes to use for the namespace
	SearchAttributes map[string]SearchAttributeType `protobuf:"bytes,4,rep,name=search_attributes,json=searchAttributes,proto3" json:"search_attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=api.namespace.v1.SearchAttributeType"`
	// certificate filters which, if specified, only allow connections from client certificates
	// whose distinguished name properties match at least one of the filters.
	CertificateFilters []*CertificateFilterSpec `protobuf:"bytes,5,rep,name=certificate_filters,json=certificateFilters,proto3" json:"certificate_filters,omitempty"`
	// environment of the namespace.
	// NOTE: currently there is no additional SLA or functional guarantee implied by the value of this field.
	Environment Environment `protobuf:"varint,6,opt,name=environment,proto3,enum=api.namespace.v1.Environment" json:"environment,omitempty"`
	// codec server property spec needed for user to set and retrieve
	CodecSpec *CodecServerPropertySpec `protobuf:"bytes,8,opt,name=codec_spec,json=codecSpec,proto3" json:"codec_spec,omitempty"`
	// the regions where the namespace is (or will be) located
	PassiveRegions []string `protobuf:"bytes,9,rep,name=passive_regions,json=passiveRegions,proto3" json:"passive_regions,omitempty"`
	// the cloud provider for the namespace, e.g. currently we can allow aws, gcp
	CloudProvider string `protobuf:"bytes,10,opt,name=cloud_provider,json=cloudProvider,proto3" json:"cloud_provider,omitempty"` // Deprecated: Do not use.
	// the authentication method(s) configured for the namespace.
	AuthMethod AuthMethod `protobuf:"varint,13,opt,name=auth_method,json=authMethod,proto3,enum=api.namespace.v1.AuthMethod" json:"auth_method,omitempty"`
	// use the new region id for region and cloud provider
	RegionId *v1.RegionID `protobuf:"bytes,14,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
	// The lifecycle configuration for the namespace.
	Lifecycle *LifecycleSpec `protobuf:"bytes,15,opt,name=lifecycle,proto3" json:"lifecycle,omitempty"`
	// The disaster recovery configuration for the namespace.
	// temporal:versioning:min_version=2025-01-01-00
	DisasterRecovery *DisasterRecoverySpec `protobuf:"bytes,16,opt,name=disaster_recovery,json=disasterRecovery,proto3" json:"disaster_recovery,omitempty"`
}

func (m *NamespaceSpec) Reset()      { *m = NamespaceSpec{} }
func (*NamespaceSpec) ProtoMessage() {}
func (*NamespaceSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_56458b48206aa18d, []int{0}
}
func (m *NamespaceSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NamespaceSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NamespaceSpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NamespaceSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NamespaceSpec.Merge(m, src)
}
func (m *NamespaceSpec) XXX_Size() int {
	return m.Size()
}
func (m *NamespaceSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_NamespaceSpec.DiscardUnknown(m)
}

var xxx_messageInfo_NamespaceSpec proto.InternalMessageInfo

// Deprecated: Do not use.
func (m *NamespaceSpec) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *NamespaceSpec) GetAcceptedClientCa() string {
	if m != nil {
		return m.AcceptedClientCa
	}
	return ""
}

func (m *NamespaceSpec) GetRetentionDays() int32 {
	if m != nil {
		return m.RetentionDays
	}
	return 0
}

func (m *NamespaceSpec) GetSearchAttributes() map[string]SearchAttributeType {
	if m != nil {
		return m.SearchAttributes
	}
	return nil
}

func (m *NamespaceSpec) GetCertificateFilters() []*CertificateFilterSpec {
	if m != nil {
		return m.CertificateFilters
	}
	return nil
}

func (m *NamespaceSpec) GetEnvironment() Environment {
	if m != nil {
		return m.Environment
	}
	return ENVIRONMENT_UNSPECIFIED
}

func (m *NamespaceSpec) GetCodecSpec() *CodecServerPropertySpec {
	if m != nil {
		return m.CodecSpec
	}
	return nil
}

func (m *NamespaceSpec) GetPassiveRegions() []string {
	if m != nil {
		return m.PassiveRegions
	}
	return nil
}

// Deprecated: Do not use.
func (m *NamespaceSpec) GetCloudProvider() string {
	if m != nil {
		return m.CloudProvider
	}
	return ""
}

func (m *NamespaceSpec) GetAuthMethod() AuthMethod {
	if m != nil {
		return m.AuthMethod
	}
	return AUTH_METHOD_UNSPECIFIED
}

func (m *NamespaceSpec) GetRegionId() *v1.RegionID {
	if m != nil {
		return m.RegionId
	}
	return nil
}

func (m *NamespaceSpec) GetLifecycle() *LifecycleSpec {
	if m != nil {
		return m.Lifecycle
	}
	return nil
}

func (m *NamespaceSpec) GetDisasterRecovery() *DisasterRecoverySpec {
	if m != nil {
		return m.DisasterRecovery
	}
	return nil
}

type DisasterRecoverySpec struct {
	// Flag to disable managed failover for the namespace.
	DisableManagedFailover bool `protobuf:"varint,1,opt,name=disable_managed_failover,json=disableManagedFailover,proto3" json:"disable_managed_failover,omitempty"`
}

func (m *DisasterRecoverySpec) Reset()      { *m = DisasterRecoverySpec{} }
func (*DisasterRecoverySpec) ProtoMessage() {}
func (*DisasterRecoverySpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_56458b48206aa18d, []int{1}
}
func (m *DisasterRecoverySpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DisasterRecoverySpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DisasterRecoverySpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DisasterRecoverySpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DisasterRecoverySpec.Merge(m, src)
}
func (m *DisasterRecoverySpec) XXX_Size() int {
	return m.Size()
}
func (m *DisasterRecoverySpec) XXX_DiscardUnknown() {
	xxx_messageInfo_DisasterRecoverySpec.DiscardUnknown(m)
}

var xxx_messageInfo_DisasterRecoverySpec proto.InternalMessageInfo

func (m *DisasterRecoverySpec) GetDisableManagedFailover() bool {
	if m != nil {
		return m.DisableManagedFailover
	}
	return false
}

type LifecycleSpec struct {
	// Flag to enable delete protection for the namespace.
	EnableDeleteProtection bool `protobuf:"varint,1,opt,name=enable_delete_protection,json=enableDeleteProtection,proto3" json:"enable_delete_protection,omitempty"`
}

func (m *LifecycleSpec) Reset()      { *m = LifecycleSpec{} }
func (*LifecycleSpec) ProtoMessage() {}
func (*LifecycleSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_56458b48206aa18d, []int{2}
}
func (m *LifecycleSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LifecycleSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LifecycleSpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LifecycleSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LifecycleSpec.Merge(m, src)
}
func (m *LifecycleSpec) XXX_Size() int {
	return m.Size()
}
func (m *LifecycleSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_LifecycleSpec.DiscardUnknown(m)
}

var xxx_messageInfo_LifecycleSpec proto.InternalMessageInfo

func (m *LifecycleSpec) GetEnableDeleteProtection() bool {
	if m != nil {
		return m.EnableDeleteProtection
	}
	return false
}

type CodecServerPropertySpec struct {
	// server endpoints
	Endpoint string `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	// whether to pass access token, i.e. jwt
	PassAccessToken bool `protobuf:"varint,2,opt,name=pass_access_token,json=passAccessToken,proto3" json:"pass_access_token,omitempty"`
	// whether to include credentials
	IncludeCredentials bool `protobuf:"varint,3,opt,name=include_credentials,json=includeCredentials,proto3" json:"include_credentials,omitempty"`
}

func (m *CodecServerPropertySpec) Reset()      { *m = CodecServerPropertySpec{} }
func (*CodecServerPropertySpec) ProtoMessage() {}
func (*CodecServerPropertySpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_56458b48206aa18d, []int{3}
}
func (m *CodecServerPropertySpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CodecServerPropertySpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CodecServerPropertySpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CodecServerPropertySpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CodecServerPropertySpec.Merge(m, src)
}
func (m *CodecServerPropertySpec) XXX_Size() int {
	return m.Size()
}
func (m *CodecServerPropertySpec) XXX_DiscardUnknown() {
	xxx_messageInfo_CodecServerPropertySpec.DiscardUnknown(m)
}

var xxx_messageInfo_CodecServerPropertySpec proto.InternalMessageInfo

func (m *CodecServerPropertySpec) GetEndpoint() string {
	if m != nil {
		return m.Endpoint
	}
	return ""
}

func (m *CodecServerPropertySpec) GetPassAccessToken() bool {
	if m != nil {
		return m.PassAccessToken
	}
	return false
}

func (m *CodecServerPropertySpec) GetIncludeCredentials() bool {
	if m != nil {
		return m.IncludeCredentials
	}
	return false
}

// a filter matches a certificate if the specified fields on the filter match the corresponding
// fields on the certificate. A filter with zero specified fields is invalid and will be rejected
// by the server. A field is either an exact string match, a prefix match (field starts with '*') or a
// suffix match (field ends with a '*')
type CertificateFilterSpec struct {
	// (-- api-linter: core::0122::name-suffix=disabled --)
	CommonName         string `protobuf:"bytes,1,opt,name=common_name,json=commonName,proto3" json:"common_name,omitempty"`
	Organization       string `protobuf:"bytes,2,opt,name=organization,proto3" json:"organization,omitempty"`
	OrganizationalUnit string `protobuf:"bytes,3,opt,name=organizational_unit,json=organizationalUnit,proto3" json:"organizational_unit,omitempty"`
	// (-- api-linter: core::0122::name-suffix=disabled --)
	SubjectAlternativeName string `protobuf:"bytes,4,opt,name=subject_alternative_name,json=subjectAlternativeName,proto3" json:"subject_alternative_name,omitempty"`
}

func (m *CertificateFilterSpec) Reset()      { *m = CertificateFilterSpec{} }
func (*CertificateFilterSpec) ProtoMessage() {}
func (*CertificateFilterSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_56458b48206aa18d, []int{4}
}
func (m *CertificateFilterSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CertificateFilterSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CertificateFilterSpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CertificateFilterSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CertificateFilterSpec.Merge(m, src)
}
func (m *CertificateFilterSpec) XXX_Size() int {
	return m.Size()
}
func (m *CertificateFilterSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_CertificateFilterSpec.DiscardUnknown(m)
}

var xxx_messageInfo_CertificateFilterSpec proto.InternalMessageInfo

func (m *CertificateFilterSpec) GetCommonName() string {
	if m != nil {
		return m.CommonName
	}
	return ""
}

func (m *CertificateFilterSpec) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

func (m *CertificateFilterSpec) GetOrganizationalUnit() string {
	if m != nil {
		return m.OrganizationalUnit
	}
	return ""
}

func (m *CertificateFilterSpec) GetSubjectAlternativeName() string {
	if m != nil {
		return m.SubjectAlternativeName
	}
	return ""
}

type NamespaceURI struct {
	// the web ui address
	Web string `protobuf:"bytes,1,opt,name=web,proto3" json:"web,omitempty"`
	// the per namespace grpc address
	Grpc string `protobuf:"bytes,2,opt,name=grpc,proto3" json:"grpc,omitempty"`
	// the list of private links
	VpcEndpointServiceNames []string `protobuf:"bytes,3,rep,name=vpc_endpoint_service_names,json=vpcEndpointServiceNames,proto3" json:"vpc_endpoint_service_names,omitempty"`
	// the active regional grpc address
	RegionalGrpc string `protobuf:"bytes,4,opt,name=regional_grpc,json=regionalGrpc,proto3" json:"regional_grpc,omitempty"`
	// the passive regional grpc addresses
	PassiveRegionalGrpcAddresses []string `protobuf:"bytes,5,rep,name=passive_regional_grpc_addresses,json=passiveRegionalGrpcAddresses,proto3" json:"passive_regional_grpc_addresses,omitempty"`
}

func (m *NamespaceURI) Reset()      { *m = NamespaceURI{} }
func (*NamespaceURI) ProtoMessage() {}
func (*NamespaceURI) Descriptor() ([]byte, []int) {
	return fileDescriptor_56458b48206aa18d, []int{5}
}
func (m *NamespaceURI) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NamespaceURI) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NamespaceURI.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NamespaceURI) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NamespaceURI.Merge(m, src)
}
func (m *NamespaceURI) XXX_Size() int {
	return m.Size()
}
func (m *NamespaceURI) XXX_DiscardUnknown() {
	xxx_messageInfo_NamespaceURI.DiscardUnknown(m)
}

var xxx_messageInfo_NamespaceURI proto.InternalMessageInfo

func (m *NamespaceURI) GetWeb() string {
	if m != nil {
		return m.Web
	}
	return ""
}

func (m *NamespaceURI) GetGrpc() string {
	if m != nil {
		return m.Grpc
	}
	return ""
}

func (m *NamespaceURI) GetVpcEndpointServiceNames() []string {
	if m != nil {
		return m.VpcEndpointServiceNames
	}
	return nil
}

func (m *NamespaceURI) GetRegionalGrpc() string {
	if m != nil {
		return m.RegionalGrpc
	}
	return ""
}

func (m *NamespaceURI) GetPassiveRegionalGrpcAddresses() []string {
	if m != nil {
		return m.PassiveRegionalGrpcAddresses
	}
	return nil
}

type NamespaceEnvelope struct {
	// the namespace may be throttled if its APS exceeds the limit
	ActionsPerSecondLimit *types.Int32Value `protobuf:"bytes,4,opt,name=actions_per_second_limit,json=actionsPerSecondLimit,proto3" json:"actions_per_second_limit,omitempty"`
	// if set, this amount of APS was being throttled
	ThrottledActionsPerSecond *types.Int32Value `protobuf:"bytes,5,opt,name=throttled_actions_per_second,json=throttledActionsPerSecond,proto3" json:"throttled_actions_per_second,omitempty"`
	// when the throttled APS was last updated
	ThrottledActionsPerSecondLastUpdatedTime *types.Timestamp `protobuf:"bytes,6,opt,name=throttled_actions_per_second_last_updated_time,json=throttledActionsPerSecondLastUpdatedTime,proto3" json:"throttled_actions_per_second_last_updated_time,omitempty"`
	// Similar to above, but for frontend RPS.
	FrontendRpsLimit                    *types.Int32Value `protobuf:"bytes,7,opt,name=frontend_rps_limit,json=frontendRpsLimit,proto3" json:"frontend_rps_limit,omitempty"`
	ThrottledFrontendRps                *types.Int32Value `protobuf:"bytes,8,opt,name=throttled_frontend_rps,json=throttledFrontendRps,proto3" json:"throttled_frontend_rps,omitempty"`
	ThrottledFrontendRpsLastUpdatedTime *types.Timestamp  `protobuf:"bytes,9,opt,name=throttled_frontend_rps_last_updated_time,json=throttledFrontendRpsLastUpdatedTime,proto3" json:"throttled_frontend_rps_last_updated_time,omitempty"`
}

func (m *NamespaceEnvelope) Reset()      { *m = NamespaceEnvelope{} }
func (*NamespaceEnvelope) ProtoMessage() {}
func (*NamespaceEnvelope) Descriptor() ([]byte, []int) {
	return fileDescriptor_56458b48206aa18d, []int{6}
}
func (m *NamespaceEnvelope) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NamespaceEnvelope) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NamespaceEnvelope.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NamespaceEnvelope) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NamespaceEnvelope.Merge(m, src)
}
func (m *NamespaceEnvelope) XXX_Size() int {
	return m.Size()
}
func (m *NamespaceEnvelope) XXX_DiscardUnknown() {
	xxx_messageInfo_NamespaceEnvelope.DiscardUnknown(m)
}

var xxx_messageInfo_NamespaceEnvelope proto.InternalMessageInfo

func (m *NamespaceEnvelope) GetActionsPerSecondLimit() *types.Int32Value {
	if m != nil {
		return m.ActionsPerSecondLimit
	}
	return nil
}

func (m *NamespaceEnvelope) GetThrottledActionsPerSecond() *types.Int32Value {
	if m != nil {
		return m.ThrottledActionsPerSecond
	}
	return nil
}

func (m *NamespaceEnvelope) GetThrottledActionsPerSecondLastUpdatedTime() *types.Timestamp {
	if m != nil {
		return m.ThrottledActionsPerSecondLastUpdatedTime
	}
	return nil
}

func (m *NamespaceEnvelope) GetFrontendRpsLimit() *types.Int32Value {
	if m != nil {
		return m.FrontendRpsLimit
	}
	return nil
}

func (m *NamespaceEnvelope) GetThrottledFrontendRps() *types.Int32Value {
	if m != nil {
		return m.ThrottledFrontendRps
	}
	return nil
}

func (m *NamespaceEnvelope) GetThrottledFrontendRpsLastUpdatedTime() *types.Timestamp {
	if m != nil {
		return m.ThrottledFrontendRpsLastUpdatedTime
	}
	return nil
}

type NamespaceRegion struct {
	// region id, including cloud provider
	RegionId *v1.RegionID `protobuf:"bytes,1,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
	// the replica mode of the namespace in the region
	ReplicaMode v1.ReplicaMode `protobuf:"varint,2,opt,name=replica_mode,json=replicaMode,proto3,enum=api.common.v1.ReplicaMode" json:"replica_mode,omitempty"`
	// the state of the replica in the region
	ReplicaState v1.ReplicaState `protobuf:"varint,3,opt,name=replica_state,json=replicaState,proto3,enum=api.common.v1.ReplicaState" json:"replica_state,omitempty"`
}

func (m *NamespaceRegion) Reset()      { *m = NamespaceRegion{} }
func (*NamespaceRegion) ProtoMessage() {}
func (*NamespaceRegion) Descriptor() ([]byte, []int) {
	return fileDescriptor_56458b48206aa18d, []int{7}
}
func (m *NamespaceRegion) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NamespaceRegion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NamespaceRegion.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NamespaceRegion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NamespaceRegion.Merge(m, src)
}
func (m *NamespaceRegion) XXX_Size() int {
	return m.Size()
}
func (m *NamespaceRegion) XXX_DiscardUnknown() {
	xxx_messageInfo_NamespaceRegion.DiscardUnknown(m)
}

var xxx_messageInfo_NamespaceRegion proto.InternalMessageInfo

func (m *NamespaceRegion) GetRegionId() *v1.RegionID {
	if m != nil {
		return m.RegionId
	}
	return nil
}

func (m *NamespaceRegion) GetReplicaMode() v1.ReplicaMode {
	if m != nil {
		return m.ReplicaMode
	}
	return v1.REPLICA_MODE_UNSPECIFIED
}

func (m *NamespaceRegion) GetReplicaState() v1.ReplicaState {
	if m != nil {
		return m.ReplicaState
	}
	return v1.REPLICA_STATE_UNSPECIFIED
}

type Namespace struct {
	// the namespace
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// the current version of the namespace specification
	// the next update request will have to include this version
	ResourceVersion string `protobuf:"bytes,2,opt,name=resource_version,json=resourceVersion,proto3" json:"resource_version,omitempty"`
	// the namespace specification
	Spec *NamespaceSpec `protobuf:"bytes,3,opt,name=spec,proto3" json:"spec,omitempty"`
	// the current state of the namespace
	State State `protobuf:"varint,4,opt,name=state,proto3,enum=api.namespace.v1.State" json:"state,omitempty"`
	// the id of the request that is creating/updating the namespace, if any
	RequestId string `protobuf:"bytes,5,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// the date and time when the namespace was last modified
	LastModifiedTime *types.Timestamp `protobuf:"bytes,6,opt,name=last_modified_time,json=lastModifiedTime,proto3" json:"last_modified_time,omitempty"`
	// the web uri for the namespace
	Uri *NamespaceURI `protobuf:"bytes,7,opt,name=uri,proto3" json:"uri,omitempty"`
	// namespace envelope is a list of service level agreements (SLAs) that can be provided around a given namespace
	Envelope *NamespaceEnvelope `protobuf:"bytes,9,opt,name=envelope,proto3" json:"envelope,omitempty"`
	// allowed principals is a list of principals that allowed to access the private links on the namespace
	AllowedPrincipals []string `protobuf:"bytes,11,rep,name=allowed_principals,json=allowedPrincipals,proto3" json:"allowed_principals,omitempty"`
	// the regions where the namespace is with including active and passive regions
	Regions []*NamespaceRegion `protobuf:"bytes,12,rep,name=regions,proto3" json:"regions,omitempty"`
}

func (m *Namespace) Reset()      { *m = Namespace{} }
func (*Namespace) ProtoMessage() {}
func (*Namespace) Descriptor() ([]byte, []int) {
	return fileDescriptor_56458b48206aa18d, []int{8}
}
func (m *Namespace) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Namespace) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Namespace.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Namespace) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Namespace.Merge(m, src)
}
func (m *Namespace) XXX_Size() int {
	return m.Size()
}
func (m *Namespace) XXX_DiscardUnknown() {
	xxx_messageInfo_Namespace.DiscardUnknown(m)
}

var xxx_messageInfo_Namespace proto.InternalMessageInfo

func (m *Namespace) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *Namespace) GetResourceVersion() string {
	if m != nil {
		return m.ResourceVersion
	}
	return ""
}

func (m *Namespace) GetSpec() *NamespaceSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *Namespace) GetState() State {
	if m != nil {
		return m.State
	}
	return STATE_UNSPECIFIED
}

func (m *Namespace) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

func (m *Namespace) GetLastModifiedTime() *types.Timestamp {
	if m != nil {
		return m.LastModifiedTime
	}
	return nil
}

func (m *Namespace) GetUri() *NamespaceURI {
	if m != nil {
		return m.Uri
	}
	return nil
}

func (m *Namespace) GetEnvelope() *NamespaceEnvelope {
	if m != nil {
		return m.Envelope
	}
	return nil
}

func (m *Namespace) GetAllowedPrincipals() []string {
	if m != nil {
		return m.AllowedPrincipals
	}
	return nil
}

func (m *Namespace) GetRegions() []*NamespaceRegion {
	if m != nil {
		return m.Regions
	}
	return nil
}

var E_ApiVersion = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FileOptions)(nil),
	ExtensionType: (*string)(nil),
	Field:         52000,
	Name:          "api.namespace.v1.api_version",
	Tag:           "bytes,52000,opt,name=api_version",
	Filename:      "api/namespace/v1/message.proto",
}

func init() {
	proto.RegisterEnum("api.namespace.v1.SearchAttributeType", SearchAttributeType_name, SearchAttributeType_value)
	proto.RegisterEnum("api.namespace.v1.State", State_name, State_value)
	proto.RegisterEnum("api.namespace.v1.Environment", Environment_name, Environment_value)
	proto.RegisterEnum("api.namespace.v1.AuthMethod", AuthMethod_name, AuthMethod_value)
	proto.RegisterType((*NamespaceSpec)(nil), "api.namespace.v1.NamespaceSpec")
	proto.RegisterMapType((map[string]SearchAttributeType)(nil), "api.namespace.v1.NamespaceSpec.SearchAttributesEntry")
	proto.RegisterType((*DisasterRecoverySpec)(nil), "api.namespace.v1.DisasterRecoverySpec")
	proto.RegisterType((*LifecycleSpec)(nil), "api.namespace.v1.LifecycleSpec")
	proto.RegisterType((*CodecServerPropertySpec)(nil), "api.namespace.v1.CodecServerPropertySpec")
	proto.RegisterType((*CertificateFilterSpec)(nil), "api.namespace.v1.CertificateFilterSpec")
	proto.RegisterType((*NamespaceURI)(nil), "api.namespace.v1.NamespaceURI")
	proto.RegisterType((*NamespaceEnvelope)(nil), "api.namespace.v1.NamespaceEnvelope")
	proto.RegisterType((*NamespaceRegion)(nil), "api.namespace.v1.NamespaceRegion")
	proto.RegisterType((*Namespace)(nil), "api.namespace.v1.Namespace")
	proto.RegisterExtension(E_ApiVersion)
}

func init() { proto.RegisterFile("api/namespace/v1/message.proto", fileDescriptor_56458b48206aa18d) }

var fileDescriptor_56458b48206aa18d = []byte{
	// 1875 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x58, 0xcd, 0x6f, 0xdb, 0xc8,
	0x15, 0x37, 0x25, 0x39, 0x96, 0x9e, 0xfc, 0x41, 0x8f, 0x93, 0x58, 0x2b, 0x3b, 0xb2, 0xa3, 0x20,
	0x59, 0xc7, 0xa8, 0xe5, 0x44, 0xe9, 0xc7, 0x62, 0x83, 0x45, 0x2a, 0x5b, 0xf4, 0x9a, 0xae, 0x6d,
	0xa9, 0x14, 0xed, 0xee, 0x16, 0x05, 0x06, 0x63, 0x72, 0x6c, 0x73, 0x43, 0x91, 0xdc, 0xe1, 0x48,
	0x81, 0x8b, 0x1e, 0x8a, 0x9e, 0x7b, 0x28, 0x0a, 0x6c, 0xcf, 0x3d, 0xf4, 0xd0, 0x43, 0x4f, 0xfd,
	0x27, 0xba, 0xc7, 0x1c, 0xf7, 0x52, 0xa0, 0x71, 0x2e, 0x7b, 0xdc, 0x3f, 0xa1, 0x98, 0x21, 0xa9,
	0x6f, 0x3b, 0x7b, 0x13, 0xdf, 0xef, 0xf7, 0x3e, 0xf9, 0xe6, 0xbd, 0xa1, 0xa0, 0x44, 0x02, 0x67,
	0xdb, 0x23, 0x6d, 0x1a, 0x06, 0xc4, 0xa2, 0xdb, 0xdd, 0xe7, 0xdb, 0x6d, 0x1a, 0x86, 0xe4, 0x82,
	0x56, 0x02, 0xe6, 0x73, 0x1f, 0xa9, 0x24, 0x70, 0x2a, 0x3d, 0xbc, 0xd2, 0x7d, 0x5e, 0x5c, 0xbb,
	0xf0, 0xfd, 0x0b, 0x97, 0x6e, 0x4b, 0xfc, 0xac, 0x73, 0xbe, 0xcd, 0x9d, 0x36, 0x0d, 0x39, 0x69,
	0x07, 0x91, 0x4a, 0x71, 0x7d, 0x94, 0x60, 0xd3, 0xd0, 0x62, 0x4e, 0xc0, 0x7d, 0x16, 0x33, 0x4a,
	0xa3, 0x8c, 0x37, 0x8c, 0x04, 0x01, 0x65, 0x61, 0x8c, 0xaf, 0x88, 0xa0, 0x2c, 0xbf, 0xdd, 0xf6,
	0xbd, 0xb1, 0x88, 0xca, 0xff, 0x98, 0x81, 0xb9, 0xe3, 0x24, 0xa0, 0x56, 0x40, 0x2d, 0x54, 0x84,
	0x3b, 0x8c, 0x5e, 0x38, 0xbe, 0x57, 0x50, 0xd6, 0x95, 0x8d, 0xdc, 0x4e, 0xaa, 0xa0, 0x18, 0xb1,
	0x04, 0xfd, 0x04, 0x10, 0xb1, 0x2c, 0x1a, 0x70, 0x6a, 0x63, 0xcb, 0x75, 0xa8, 0xc7, 0xb1, 0x45,
	0x0a, 0x29, 0xc1, 0x33, 0xd4, 0x04, 0xd9, 0x95, 0xc0, 0x2e, 0x41, 0x8f, 0x61, 0x9e, 0x51, 0x4e,
	0x3d, 0xee, 0xf8, 0x1e, 0xb6, 0xc9, 0x55, 0x58, 0x48, 0xaf, 0x2b, 0x1b, 0xd3, 0xc6, 0x5c, 0x4f,
	0x5a, 0x27, 0x57, 0x21, 0x3a, 0x83, 0xc5, 0x90, 0x12, 0x66, 0x5d, 0x62, 0xc2, 0x39, 0x73, 0xce,
	0x3a, 0x9c, 0x86, 0x85, 0xcc, 0x7a, 0x7a, 0x23, 0x5f, 0xfd, 0x59, 0x65, 0xb4, 0x60, 0x95, 0xa1,
	0x60, 0x2b, 0x2d, 0xa9, 0x58, 0xeb, 0xe9, 0x69, 0x1e, 0x67, 0x57, 0x86, 0x1a, 0x8e, 0x88, 0xd1,
	0x17, 0xb0, 0x64, 0x51, 0xc6, 0x9d, 0x73, 0xc7, 0x22, 0x9c, 0xe2, 0x73, 0xc7, 0xe5, 0x94, 0x85,
	0x85, 0x69, 0xe9, 0xe5, 0xe3, 0x71, 0x2f, 0xbb, 0x7d, 0xf2, 0x9e, 0xe4, 0x0a, 0x6f, 0x06, 0xb2,
	0x46, 0xc5, 0x21, 0x7a, 0x05, 0x79, 0xea, 0x75, 0x1d, 0xe6, 0x7b, 0x6d, 0xea, 0xf1, 0xc2, 0x9d,
	0x75, 0x65, 0x63, 0xbe, 0xfa, 0x60, 0xdc, 0xa2, 0xd6, 0x27, 0x19, 0x83, 0x1a, 0x68, 0x1f, 0xc0,
	0xf2, 0x6d, 0x6a, 0xe1, 0x30, 0xa0, 0x56, 0x21, 0xbb, 0xae, 0x6c, 0xe4, 0xab, 0x4f, 0x27, 0x44,
	0x24, 0x38, 0x2d, 0xca, 0xba, 0x94, 0x35, 0x99, 0x1f, 0x50, 0xc6, 0xaf, 0x64, 0x4c, 0x39, 0xa9,
	0x2c, 0xdf, 0xdc, 0xc7, 0xb0, 0x10, 0x90, 0x30, 0x74, 0xba, 0x14, 0x47, 0xef, 0x2b, 0x2c, 0xe4,
	0xd6, 0xd3, 0x1b, 0x39, 0x63, 0x3e, 0x16, 0x1b, 0x91, 0x14, 0x3d, 0x85, 0x79, 0xcb, 0xf5, 0x3b,
	0x36, 0x0e, 0x98, 0xdf, 0x75, 0x6c, 0xca, 0x0a, 0xd0, 0x7b, 0xd5, 0x73, 0x12, 0x69, 0xc6, 0x00,
	0xfa, 0x0c, 0xf2, 0xa4, 0xc3, 0x2f, 0x71, 0x9b, 0xf2, 0x4b, 0xdf, 0x2e, 0xcc, 0xc9, 0xf4, 0x56,
	0xc7, 0xc3, 0xab, 0x75, 0xf8, 0xe5, 0x91, 0xe4, 0x18, 0x40, 0x7a, 0xbf, 0xd1, 0x4f, 0x21, 0x17,
	0x85, 0x82, 0x1d, 0xbb, 0x30, 0x2f, 0x73, 0x5b, 0x96, 0xca, 0x51, 0x3f, 0x0a, 0xcd, 0x28, 0x28,
	0xbd, 0x6e, 0x64, 0x23, 0xa6, 0x6e, 0xa3, 0xcf, 0x20, 0xe7, 0x3a, 0xe7, 0xd4, 0xba, 0xb2, 0x5c,
	0x5a, 0x58, 0x90, 0x5a, 0x6b, 0xe3, 0x2e, 0x0f, 0x13, 0x4a, 0x54, 0x87, 0x9e, 0x06, 0x6a, 0xc1,
	0xa2, 0xed, 0x84, 0x24, 0xe4, 0x94, 0x61, 0x46, 0x2d, 0xbf, 0x4b, 0xd9, 0x55, 0x41, 0x95, 0x66,
	0x9e, 0x8c, 0x9b, 0xa9, 0xc7, 0x54, 0x23, 0x66, 0x4a, 0x6b, 0xaa, 0x3d, 0x22, 0x2d, 0x7e, 0x05,
	0xf7, 0x26, 0x36, 0x1b, 0x52, 0x21, 0xfd, 0x9a, 0x5e, 0x45, 0x87, 0xc5, 0x10, 0x3f, 0xd1, 0x4b,
	0x98, 0xee, 0x12, 0xb7, 0x43, 0xe5, 0xc1, 0x98, 0xaf, 0x3e, 0x1e, 0xf7, 0x39, 0x62, 0xc9, 0xbc,
	0x0a, 0xa8, 0x11, 0xe9, 0x7c, 0x9a, 0xfa, 0x44, 0x39, 0xc8, 0x64, 0x67, 0xd4, 0xec, 0x41, 0x26,
	0x9b, 0x57, 0x67, 0x0f, 0x32, 0xd9, 0x59, 0x75, 0xae, 0xdc, 0x84, 0xbb, 0x93, 0xe2, 0x44, 0x9f,
	0x40, 0x41, 0x44, 0x7a, 0xe6, 0x52, 0xdc, 0x26, 0x1e, 0xb9, 0xa0, 0x36, 0x3e, 0x27, 0x8e, 0x2b,
	0x08, 0x32, 0xa2, 0xac, 0x71, 0x3f, 0xc6, 0x8f, 0x22, 0x78, 0x2f, 0x46, 0xcb, 0x3a, 0xcc, 0x0d,
	0x15, 0x50, 0x98, 0xa2, 0x9e, 0xb4, 0x64, 0x53, 0x97, 0x72, 0x2a, 0x9a, 0x83, 0x53, 0x8b, 0x27,
	0x93, 0x20, 0x6b, 0xdc, 0x8f, 0xf0, 0xba, 0x84, 0x9b, 0x3d, 0xb4, 0xfc, 0x57, 0x05, 0x96, 0x6f,
	0x68, 0x4f, 0x54, 0x84, 0x2c, 0xf5, 0xec, 0xc0, 0x77, 0x3c, 0x1e, 0x97, 0xa8, 0xf7, 0x8c, 0x36,
	0x61, 0x51, 0x34, 0x26, 0x16, 0x83, 0x23, 0x0c, 0x31, 0xf7, 0x5f, 0x53, 0x4f, 0xd6, 0x2c, 0x6b,
	0xc8, 0x46, 0xae, 0x49, 0xb9, 0x29, 0xc4, 0x68, 0x1b, 0x96, 0x1c, 0xcf, 0x72, 0x3b, 0x36, 0xc5,
	0x16, 0xa3, 0xb6, 0x18, 0x1f, 0xc4, 0x8d, 0x06, 0x4a, 0xd6, 0x40, 0x31, 0xb4, 0xdb, 0x47, 0xca,
	0xff, 0x51, 0xe0, 0xde, 0xc4, 0x53, 0x8c, 0xd6, 0x20, 0x1f, 0x75, 0x1f, 0x16, 0xef, 0x24, 0x8e,
	0x0a, 0x22, 0x91, 0x98, 0x2e, 0xa8, 0x0c, 0xb3, 0x3e, 0xbb, 0x20, 0x9e, 0xf3, 0x7b, 0x22, 0xb3,
	0x8f, 0xe6, 0xdb, 0x90, 0x4c, 0xc4, 0x33, 0xf8, 0x4c, 0x5c, 0xdc, 0xf1, 0x1c, 0x2e, 0xe3, 0xc9,
	0x19, 0x68, 0x18, 0x3a, 0xf1, 0x1c, 0x2e, 0xca, 0x1b, 0x76, 0xce, 0xbe, 0xa2, 0x16, 0xc7, 0x44,
	0x84, 0xe2, 0x11, 0x2e, 0x0e, 0xaa, 0x0c, 0x21, 0x23, 0xb5, 0xee, 0xc7, 0x78, 0xad, 0x0f, 0x8b,
	0x70, 0xca, 0xff, 0x55, 0x60, 0xb6, 0x37, 0xf5, 0x4e, 0x0c, 0x5d, 0x74, 0xdc, 0x1b, 0x7a, 0x96,
	0x74, 0xdc, 0x1b, 0x7a, 0x86, 0x10, 0x64, 0x2e, 0x58, 0x60, 0xc5, 0x91, 0xca, 0xdf, 0xe8, 0x25,
	0x14, 0xbb, 0x81, 0x85, 0x93, 0x6a, 0xe3, 0x90, 0xb2, 0xae, 0x63, 0x45, 0x1e, 0x45, 0xe1, 0xc4,
	0x60, 0x58, 0xee, 0x06, 0x96, 0x16, 0x13, 0x5a, 0x11, 0x2e, 0x3d, 0xa1, 0x47, 0x30, 0x17, 0x9d,
	0x46, 0xe2, 0x62, 0x69, 0x39, 0x0a, 0x71, 0x36, 0x11, 0x7e, 0x2e, 0x3c, 0x68, 0xb0, 0x36, 0x3c,
	0x6f, 0x62, 0x32, 0x26, 0xb6, 0xcd, 0x68, 0x18, 0xd2, 0x68, 0xc0, 0xe6, 0x8c, 0xd5, 0xa1, 0xf9,
	0x13, 0x69, 0xd7, 0x12, 0x4e, 0xf9, 0xfb, 0x0c, 0x2c, 0xf6, 0xf2, 0xd3, 0xbc, 0x2e, 0x75, 0xfd,
	0x80, 0x22, 0x13, 0x0a, 0x44, 0xb6, 0x57, 0x88, 0x03, 0xca, 0x70, 0x48, 0x2d, 0xdf, 0xb3, 0xb1,
	0xeb, 0xb4, 0x1d, 0x2e, 0x83, 0xc9, 0x57, 0x57, 0x2a, 0xd1, 0xe2, 0xab, 0x24, 0x8b, 0xaf, 0xa2,
	0x7b, 0xfc, 0x45, 0xf5, 0x54, 0x1c, 0x23, 0xe3, 0x5e, 0xac, 0xdc, 0xa4, 0xac, 0x25, 0x55, 0x0f,
	0x85, 0x26, 0xfa, 0x1d, 0xac, 0xf2, 0x4b, 0xe6, 0x73, 0xee, 0x52, 0x1b, 0x8f, 0xdb, 0x2f, 0x4c,
	0x7f, 0xd8, 0xf2, 0x47, 0x3d, 0x03, 0xb5, 0x11, 0x17, 0xe8, 0x0f, 0x50, 0xb9, 0xcd, 0x3a, 0x76,
	0x49, 0xc8, 0x71, 0x27, 0xb0, 0x89, 0xd8, 0x9f, 0x62, 0xd1, 0xcb, 0x75, 0x91, 0xaf, 0x16, 0xc7,
	0xfc, 0x99, 0xc9, 0x2d, 0xc0, 0xd8, 0xb8, 0xd1, 0xdd, 0x21, 0x09, 0xf9, 0x49, 0x64, 0x4c, 0xd0,
	0x91, 0x0e, 0xe8, 0x9c, 0xf9, 0x1e, 0xa7, 0x9e, 0x8d, 0x59, 0x10, 0xc6, 0xb5, 0x9a, 0xf9, 0x70,
	0x46, 0x6a, 0xa2, 0x66, 0x04, 0x61, 0x54, 0xa6, 0x5f, 0xc3, 0xfd, 0x7e, 0x22, 0x83, 0x46, 0xe3,
	0xfd, 0x74, 0xab, 0xb9, 0xbb, 0x3d, 0xd5, 0xbd, 0xbe, 0x5d, 0xf4, 0x35, 0x6c, 0x4c, 0x36, 0x39,
	0xa1, 0x2a, 0xb9, 0x0f, 0x56, 0xe5, 0xd1, 0x24, 0x1f, 0x23, 0x05, 0x39, 0xc8, 0x64, 0x15, 0x35,
	0x75, 0x90, 0xc9, 0xa6, 0xd4, 0xf4, 0x41, 0x26, 0x9b, 0x56, 0x33, 0xe5, 0x6f, 0x15, 0x58, 0xe8,
	0xb5, 0x5a, 0xd4, 0x8d, 0xc3, 0x2b, 0x4a, 0xf9, 0xf1, 0x2b, 0x6a, 0x96, 0xd1, 0xc0, 0x75, 0x2c,
	0x82, 0xdb, 0xbe, 0x9d, 0x8c, 0xfa, 0xe2, 0x98, 0xa2, 0xa4, 0x1c, 0xf9, 0x36, 0x35, 0xf2, 0xac,
	0xff, 0x80, 0x7e, 0x29, 0xce, 0x57, 0xa4, 0x1e, 0x72, 0xc2, 0xa9, 0x1c, 0x1c, 0xf3, 0xd5, 0x95,
	0xc9, 0xfa, 0x2d, 0x41, 0x31, 0x12, 0x87, 0xf2, 0xa9, 0xfc, 0xe7, 0x0c, 0xe4, 0x7a, 0xa9, 0xa0,
	0x55, 0xc8, 0xf5, 0x16, 0x4c, 0x3c, 0x18, 0xfa, 0x02, 0xf4, 0x14, 0x54, 0x46, 0x43, 0xbf, 0xc3,
	0x2c, 0x8a, 0xbb, 0x94, 0x85, 0xfd, 0xa1, 0xb6, 0x90, 0xc8, 0x4f, 0x23, 0x31, 0x7a, 0x01, 0x19,
	0x79, 0x0f, 0x49, 0xdf, 0xb4, 0x75, 0x87, 0xee, 0x5f, 0x86, 0x24, 0xa3, 0x2d, 0x98, 0x8e, 0xb2,
	0xc8, 0xc8, 0x2c, 0x96, 0x27, 0x2c, 0x3c, 0x99, 0x41, 0xc4, 0x42, 0x0f, 0x00, 0x18, 0xfd, 0xba,
	0x43, 0x43, 0x2e, 0x4a, 0x3e, 0x1d, 0x45, 0x1b, 0x4b, 0x74, 0x1b, 0xed, 0x03, 0x92, 0x2d, 0xd1,
	0xf6, 0x6d, 0xe7, 0xdc, 0xf9, 0xf1, 0x27, 0x45, 0x15, 0x5a, 0x47, 0xb1, 0x92, 0x3c, 0x11, 0xcf,
	0x20, 0xdd, 0x61, 0x4e, 0x7c, 0x04, 0x4a, 0xb7, 0xe4, 0x72, 0x62, 0xe8, 0x86, 0xa0, 0xa2, 0x57,
	0x62, 0x5d, 0x45, 0x13, 0x28, 0xee, 0xc2, 0x47, 0xb7, 0xa8, 0x25, 0xc3, 0xca, 0xe8, 0x29, 0xa1,
	0x2d, 0x40, 0xc4, 0x75, 0xfd, 0x37, 0x54, 0x5c, 0xae, 0x1c, 0xcf, 0x72, 0x02, 0xb1, 0xa6, 0xf2,
	0x72, 0x0c, 0x2e, 0xc6, 0x48, 0xb3, 0x07, 0xa0, 0x97, 0x30, 0x93, 0x5c, 0xd5, 0x66, 0xe5, 0x5d,
	0xf4, 0xe1, 0x2d, 0xee, 0xa2, 0x36, 0x34, 0x12, 0x8d, 0x83, 0x4c, 0x36, 0xab, 0xe6, 0x0e, 0x32,
	0x59, 0x50, 0xf3, 0x9b, 0xff, 0x4a, 0xc1, 0xd2, 0x84, 0x5b, 0x05, 0x7a, 0x0c, 0x0f, 0x5b, 0x5a,
	0xcd, 0xd8, 0xdd, 0xc7, 0x35, 0xd3, 0x34, 0xf4, 0x9d, 0x13, 0x53, 0xc3, 0xe6, 0x97, 0x4d, 0x0d,
	0x9f, 0x1c, 0xb7, 0x9a, 0xda, 0xae, 0xbe, 0xa7, 0x6b, 0x75, 0x75, 0x0a, 0x3d, 0x84, 0x07, 0x93,
	0x69, 0xbf, 0xd2, 0xbe, 0xfc, 0x4d, 0xc3, 0xa8, 0xab, 0x0a, 0x2a, 0x41, 0x71, 0x32, 0xc5, 0xd4,
	0xbe, 0x30, 0xd5, 0x14, 0x7a, 0x00, 0x1f, 0x4d, 0xc6, 0xf5, 0x63, 0x53, 0x4d, 0xa3, 0x75, 0x58,
	0x9d, 0x0c, 0xd7, 0x1b, 0x27, 0x3b, 0x87, 0x9a, 0x9a, 0x41, 0x65, 0x28, 0xdd, 0xc0, 0xa8, 0x99,
	0x9a, 0xa9, 0x1f, 0x69, 0xea, 0xf4, 0xcd, 0x41, 0xec, 0x34, 0x1a, 0x87, 0xea, 0x1d, 0xf4, 0x04,
	0xca, 0xb7, 0xe6, 0x81, 0x0f, 0xf5, 0x96, 0xa9, 0xce, 0x6c, 0x7e, 0x93, 0x82, 0x69, 0xd9, 0x93,
	0xe8, 0x1e, 0x2c, 0xb6, 0xcc, 0x9a, 0x39, 0x5a, 0x90, 0xbb, 0xa0, 0x46, 0xe2, 0xda, 0xae, 0xa9,
	0x9f, 0xd6, 0x4c, 0xfd, 0xf8, 0x73, 0x55, 0x41, 0x2b, 0xb0, 0x3c, 0x2c, 0x6d, 0x1c, 0xe3, 0xbd,
	0x9a, 0x7e, 0xa8, 0xd5, 0xd5, 0x14, 0x52, 0x61, 0x76, 0x00, 0xd4, 0xd4, 0x34, 0x42, 0x30, 0x1f,
	0xdb, 0x6e, 0xd6, 0x23, 0x13, 0x19, 0xb4, 0x0c, 0x4b, 0x03, 0x32, 0x2d, 0x51, 0x9f, 0xee, 0x93,
	0xeb, 0xda, 0xa1, 0x26, 0xc9, 0x77, 0xfa, 0x64, 0x29, 0xeb, 0x91, 0x67, 0xd0, 0x22, 0xcc, 0x0d,
	0x02, 0x75, 0x35, 0xdb, 0x8f, 0xb8, 0x75, 0xd2, 0x6a, 0x6a, 0xc7, 0x75, 0x61, 0x21, 0x87, 0x0a,
	0x70, 0x77, 0x48, 0x9a, 0x98, 0x00, 0xb4, 0x04, 0x0b, 0x43, 0x88, 0x56, 0x57, 0xf3, 0x9b, 0xaf,
	0x21, 0x3f, 0xf0, 0xa1, 0x22, 0xf2, 0xd5, 0x8e, 0x4f, 0x75, 0xa3, 0x71, 0x7c, 0xa4, 0x1d, 0x9b,
	0x23, 0x25, 0x5a, 0x82, 0x85, 0x41, 0xb0, 0xae, 0x9d, 0xaa, 0x8a, 0x88, 0x62, 0x50, 0x68, 0x6a,
	0x2d, 0xd1, 0x1b, 0x23, 0xd2, 0xa6, 0xd1, 0xa8, 0xab, 0xe9, 0xcd, 0x6f, 0x14, 0x80, 0xfe, 0x77,
	0x83, 0x70, 0x56, 0x3b, 0x31, 0xf7, 0xf1, 0x91, 0x66, 0xee, 0x37, 0xea, 0x23, 0xce, 0x8a, 0x70,
	0x7f, 0x10, 0x34, 0xb4, 0x96, 0x69, 0xe8, 0xbb, 0x22, 0x73, 0xe9, 0x73, 0x10, 0x3b, 0x32, 0x0f,
	0x5b, 0x6a, 0x4a, 0xd4, 0x6e, 0x50, 0x5a, 0x6b, 0xea, 0xa2, 0x09, 0xd4, 0x34, 0x5a, 0x83, 0x95,
	0x09, 0x00, 0x6e, 0x18, 0x91, 0x66, 0xe6, 0xd3, 0x57, 0x90, 0x27, 0x81, 0x93, 0x4c, 0x4a, 0xb4,
	0x3a, 0x36, 0x73, 0xf6, 0x1c, 0x97, 0x36, 0x02, 0xb9, 0x8d, 0x0b, 0x7f, 0xff, 0x5b, 0x74, 0xe7,
	0x03, 0x12, 0x38, 0xf1, 0x10, 0xdd, 0x69, 0xff, 0xe9, 0xdf, 0x1f, 0xcd, 0x55, 0x9f, 0x55, 0x5f,
	0x6c, 0x3d, 0xfb, 0xc5, 0x56, 0xf5, 0xe7, 0x5b, 0xcf, 0x9e, 0xbf, 0x7d, 0x57, 0x9a, 0xfa, 0xee,
	0x5d, 0x69, 0xea, 0x87, 0x77, 0x25, 0xe5, 0x8f, 0xd7, 0x25, 0xe5, 0x9f, 0xd7, 0x25, 0xe5, 0xdb,
	0xeb, 0x92, 0xf2, 0xf6, 0xba, 0xa4, 0xfc, 0xef, 0xba, 0xa4, 0x7c, 0x7f, 0x5d, 0x9a, 0xfa, 0xe1,
	0xba, 0xa4, 0xfc, 0xe5, 0x7d, 0x69, 0xea, 0xed, 0xfb, 0xd2, 0xd4, 0x77, 0xef, 0x4b, 0x53, 0xbf,
	0x7d, 0xc2, 0xdb, 0x01, 0x73, 0x2b, 0xf2, 0x83, 0x6c, 0x7b, 0xf4, 0x9f, 0x85, 0x97, 0xbd, 0x87,
	0xb3, 0x3b, 0x32, 0xb0, 0x17, 0xff, 0x0f, 0x00, 0x00, 0xff, 0xff, 0x0d, 0x44, 0x7a, 0xee, 0x7e,
	0x10, 0x00, 0x00,
}

func (x SearchAttributeType) String() string {
	s, ok := SearchAttributeType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x State) String() string {
	s, ok := State_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x Environment) String() string {
	s, ok := Environment_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x AuthMethod) String() string {
	s, ok := AuthMethod_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *NamespaceSpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NamespaceSpec)
	if !ok {
		that2, ok := that.(NamespaceSpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Region != that1.Region {
		return false
	}
	if this.AcceptedClientCa != that1.AcceptedClientCa {
		return false
	}
	if this.RetentionDays != that1.RetentionDays {
		return false
	}
	if len(this.SearchAttributes) != len(that1.SearchAttributes) {
		return false
	}
	for i := range this.SearchAttributes {
		if this.SearchAttributes[i] != that1.SearchAttributes[i] {
			return false
		}
	}
	if len(this.CertificateFilters) != len(that1.CertificateFilters) {
		return false
	}
	for i := range this.CertificateFilters {
		if !this.CertificateFilters[i].Equal(that1.CertificateFilters[i]) {
			return false
		}
	}
	if this.Environment != that1.Environment {
		return false
	}
	if !this.CodecSpec.Equal(that1.CodecSpec) {
		return false
	}
	if len(this.PassiveRegions) != len(that1.PassiveRegions) {
		return false
	}
	for i := range this.PassiveRegions {
		if this.PassiveRegions[i] != that1.PassiveRegions[i] {
			return false
		}
	}
	if this.CloudProvider != that1.CloudProvider {
		return false
	}
	if this.AuthMethod != that1.AuthMethod {
		return false
	}
	if !this.RegionId.Equal(that1.RegionId) {
		return false
	}
	if !this.Lifecycle.Equal(that1.Lifecycle) {
		return false
	}
	if !this.DisasterRecovery.Equal(that1.DisasterRecovery) {
		return false
	}
	return true
}
func (this *DisasterRecoverySpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DisasterRecoverySpec)
	if !ok {
		that2, ok := that.(DisasterRecoverySpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DisableManagedFailover != that1.DisableManagedFailover {
		return false
	}
	return true
}
func (this *LifecycleSpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LifecycleSpec)
	if !ok {
		that2, ok := that.(LifecycleSpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.EnableDeleteProtection != that1.EnableDeleteProtection {
		return false
	}
	return true
}
func (this *CodecServerPropertySpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CodecServerPropertySpec)
	if !ok {
		that2, ok := that.(CodecServerPropertySpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Endpoint != that1.Endpoint {
		return false
	}
	if this.PassAccessToken != that1.PassAccessToken {
		return false
	}
	if this.IncludeCredentials != that1.IncludeCredentials {
		return false
	}
	return true
}
func (this *CertificateFilterSpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CertificateFilterSpec)
	if !ok {
		that2, ok := that.(CertificateFilterSpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CommonName != that1.CommonName {
		return false
	}
	if this.Organization != that1.Organization {
		return false
	}
	if this.OrganizationalUnit != that1.OrganizationalUnit {
		return false
	}
	if this.SubjectAlternativeName != that1.SubjectAlternativeName {
		return false
	}
	return true
}
func (this *NamespaceURI) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NamespaceURI)
	if !ok {
		that2, ok := that.(NamespaceURI)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Web != that1.Web {
		return false
	}
	if this.Grpc != that1.Grpc {
		return false
	}
	if len(this.VpcEndpointServiceNames) != len(that1.VpcEndpointServiceNames) {
		return false
	}
	for i := range this.VpcEndpointServiceNames {
		if this.VpcEndpointServiceNames[i] != that1.VpcEndpointServiceNames[i] {
			return false
		}
	}
	if this.RegionalGrpc != that1.RegionalGrpc {
		return false
	}
	if len(this.PassiveRegionalGrpcAddresses) != len(that1.PassiveRegionalGrpcAddresses) {
		return false
	}
	for i := range this.PassiveRegionalGrpcAddresses {
		if this.PassiveRegionalGrpcAddresses[i] != that1.PassiveRegionalGrpcAddresses[i] {
			return false
		}
	}
	return true
}
func (this *NamespaceEnvelope) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NamespaceEnvelope)
	if !ok {
		that2, ok := that.(NamespaceEnvelope)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActionsPerSecondLimit.Equal(that1.ActionsPerSecondLimit) {
		return false
	}
	if !this.ThrottledActionsPerSecond.Equal(that1.ThrottledActionsPerSecond) {
		return false
	}
	if !this.ThrottledActionsPerSecondLastUpdatedTime.Equal(that1.ThrottledActionsPerSecondLastUpdatedTime) {
		return false
	}
	if !this.FrontendRpsLimit.Equal(that1.FrontendRpsLimit) {
		return false
	}
	if !this.ThrottledFrontendRps.Equal(that1.ThrottledFrontendRps) {
		return false
	}
	if !this.ThrottledFrontendRpsLastUpdatedTime.Equal(that1.ThrottledFrontendRpsLastUpdatedTime) {
		return false
	}
	return true
}
func (this *NamespaceRegion) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NamespaceRegion)
	if !ok {
		that2, ok := that.(NamespaceRegion)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RegionId.Equal(that1.RegionId) {
		return false
	}
	if this.ReplicaMode != that1.ReplicaMode {
		return false
	}
	if this.ReplicaState != that1.ReplicaState {
		return false
	}
	return true
}
func (this *Namespace) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Namespace)
	if !ok {
		that2, ok := that.(Namespace)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.ResourceVersion != that1.ResourceVersion {
		return false
	}
	if !this.Spec.Equal(that1.Spec) {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if this.RequestId != that1.RequestId {
		return false
	}
	if !this.LastModifiedTime.Equal(that1.LastModifiedTime) {
		return false
	}
	if !this.Uri.Equal(that1.Uri) {
		return false
	}
	if !this.Envelope.Equal(that1.Envelope) {
		return false
	}
	if len(this.AllowedPrincipals) != len(that1.AllowedPrincipals) {
		return false
	}
	for i := range this.AllowedPrincipals {
		if this.AllowedPrincipals[i] != that1.AllowedPrincipals[i] {
			return false
		}
	}
	if len(this.Regions) != len(that1.Regions) {
		return false
	}
	for i := range this.Regions {
		if !this.Regions[i].Equal(that1.Regions[i]) {
			return false
		}
	}
	return true
}
func (this *NamespaceSpec) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 17)
	s = append(s, "&namespace.NamespaceSpec{")
	s = append(s, "Region: "+fmt.Sprintf("%#v", this.Region)+",\n")
	s = append(s, "AcceptedClientCa: "+fmt.Sprintf("%#v", this.AcceptedClientCa)+",\n")
	s = append(s, "RetentionDays: "+fmt.Sprintf("%#v", this.RetentionDays)+",\n")
	keysForSearchAttributes := make([]string, 0, len(this.SearchAttributes))
	for k, _ := range this.SearchAttributes {
		keysForSearchAttributes = append(keysForSearchAttributes, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForSearchAttributes)
	mapStringForSearchAttributes := "map[string]SearchAttributeType{"
	for _, k := range keysForSearchAttributes {
		mapStringForSearchAttributes += fmt.Sprintf("%#v: %#v,", k, this.SearchAttributes[k])
	}
	mapStringForSearchAttributes += "}"
	if this.SearchAttributes != nil {
		s = append(s, "SearchAttributes: "+mapStringForSearchAttributes+",\n")
	}
	if this.CertificateFilters != nil {
		s = append(s, "CertificateFilters: "+fmt.Sprintf("%#v", this.CertificateFilters)+",\n")
	}
	s = append(s, "Environment: "+fmt.Sprintf("%#v", this.Environment)+",\n")
	if this.CodecSpec != nil {
		s = append(s, "CodecSpec: "+fmt.Sprintf("%#v", this.CodecSpec)+",\n")
	}
	s = append(s, "PassiveRegions: "+fmt.Sprintf("%#v", this.PassiveRegions)+",\n")
	s = append(s, "CloudProvider: "+fmt.Sprintf("%#v", this.CloudProvider)+",\n")
	s = append(s, "AuthMethod: "+fmt.Sprintf("%#v", this.AuthMethod)+",\n")
	if this.RegionId != nil {
		s = append(s, "RegionId: "+fmt.Sprintf("%#v", this.RegionId)+",\n")
	}
	if this.Lifecycle != nil {
		s = append(s, "Lifecycle: "+fmt.Sprintf("%#v", this.Lifecycle)+",\n")
	}
	if this.DisasterRecovery != nil {
		s = append(s, "DisasterRecovery: "+fmt.Sprintf("%#v", this.DisasterRecovery)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DisasterRecoverySpec) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&namespace.DisasterRecoverySpec{")
	s = append(s, "DisableManagedFailover: "+fmt.Sprintf("%#v", this.DisableManagedFailover)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LifecycleSpec) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&namespace.LifecycleSpec{")
	s = append(s, "EnableDeleteProtection: "+fmt.Sprintf("%#v", this.EnableDeleteProtection)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CodecServerPropertySpec) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&namespace.CodecServerPropertySpec{")
	s = append(s, "Endpoint: "+fmt.Sprintf("%#v", this.Endpoint)+",\n")
	s = append(s, "PassAccessToken: "+fmt.Sprintf("%#v", this.PassAccessToken)+",\n")
	s = append(s, "IncludeCredentials: "+fmt.Sprintf("%#v", this.IncludeCredentials)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CertificateFilterSpec) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&namespace.CertificateFilterSpec{")
	s = append(s, "CommonName: "+fmt.Sprintf("%#v", this.CommonName)+",\n")
	s = append(s, "Organization: "+fmt.Sprintf("%#v", this.Organization)+",\n")
	s = append(s, "OrganizationalUnit: "+fmt.Sprintf("%#v", this.OrganizationalUnit)+",\n")
	s = append(s, "SubjectAlternativeName: "+fmt.Sprintf("%#v", this.SubjectAlternativeName)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NamespaceURI) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&namespace.NamespaceURI{")
	s = append(s, "Web: "+fmt.Sprintf("%#v", this.Web)+",\n")
	s = append(s, "Grpc: "+fmt.Sprintf("%#v", this.Grpc)+",\n")
	s = append(s, "VpcEndpointServiceNames: "+fmt.Sprintf("%#v", this.VpcEndpointServiceNames)+",\n")
	s = append(s, "RegionalGrpc: "+fmt.Sprintf("%#v", this.RegionalGrpc)+",\n")
	s = append(s, "PassiveRegionalGrpcAddresses: "+fmt.Sprintf("%#v", this.PassiveRegionalGrpcAddresses)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NamespaceEnvelope) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&namespace.NamespaceEnvelope{")
	if this.ActionsPerSecondLimit != nil {
		s = append(s, "ActionsPerSecondLimit: "+fmt.Sprintf("%#v", this.ActionsPerSecondLimit)+",\n")
	}
	if this.ThrottledActionsPerSecond != nil {
		s = append(s, "ThrottledActionsPerSecond: "+fmt.Sprintf("%#v", this.ThrottledActionsPerSecond)+",\n")
	}
	if this.ThrottledActionsPerSecondLastUpdatedTime != nil {
		s = append(s, "ThrottledActionsPerSecondLastUpdatedTime: "+fmt.Sprintf("%#v", this.ThrottledActionsPerSecondLastUpdatedTime)+",\n")
	}
	if this.FrontendRpsLimit != nil {
		s = append(s, "FrontendRpsLimit: "+fmt.Sprintf("%#v", this.FrontendRpsLimit)+",\n")
	}
	if this.ThrottledFrontendRps != nil {
		s = append(s, "ThrottledFrontendRps: "+fmt.Sprintf("%#v", this.ThrottledFrontendRps)+",\n")
	}
	if this.ThrottledFrontendRpsLastUpdatedTime != nil {
		s = append(s, "ThrottledFrontendRpsLastUpdatedTime: "+fmt.Sprintf("%#v", this.ThrottledFrontendRpsLastUpdatedTime)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NamespaceRegion) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&namespace.NamespaceRegion{")
	if this.RegionId != nil {
		s = append(s, "RegionId: "+fmt.Sprintf("%#v", this.RegionId)+",\n")
	}
	s = append(s, "ReplicaMode: "+fmt.Sprintf("%#v", this.ReplicaMode)+",\n")
	s = append(s, "ReplicaState: "+fmt.Sprintf("%#v", this.ReplicaState)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Namespace) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&namespace.Namespace{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "ResourceVersion: "+fmt.Sprintf("%#v", this.ResourceVersion)+",\n")
	if this.Spec != nil {
		s = append(s, "Spec: "+fmt.Sprintf("%#v", this.Spec)+",\n")
	}
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "RequestId: "+fmt.Sprintf("%#v", this.RequestId)+",\n")
	if this.LastModifiedTime != nil {
		s = append(s, "LastModifiedTime: "+fmt.Sprintf("%#v", this.LastModifiedTime)+",\n")
	}
	if this.Uri != nil {
		s = append(s, "Uri: "+fmt.Sprintf("%#v", this.Uri)+",\n")
	}
	if this.Envelope != nil {
		s = append(s, "Envelope: "+fmt.Sprintf("%#v", this.Envelope)+",\n")
	}
	s = append(s, "AllowedPrincipals: "+fmt.Sprintf("%#v", this.AllowedPrincipals)+",\n")
	if this.Regions != nil {
		s = append(s, "Regions: "+fmt.Sprintf("%#v", this.Regions)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringMessage(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *NamespaceSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NamespaceSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NamespaceSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DisasterRecovery != nil {
		{
			size, err := m.DisasterRecovery.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.Lifecycle != nil {
		{
			size, err := m.Lifecycle.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	if m.RegionId != nil {
		{
			size, err := m.RegionId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	if m.AuthMethod != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.AuthMethod))
		i--
		dAtA[i] = 0x68
	}
	if len(m.CloudProvider) > 0 {
		i -= len(m.CloudProvider)
		copy(dAtA[i:], m.CloudProvider)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.CloudProvider)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.PassiveRegions) > 0 {
		for iNdEx := len(m.PassiveRegions) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PassiveRegions[iNdEx])
			copy(dAtA[i:], m.PassiveRegions[iNdEx])
			i = encodeVarintMessage(dAtA, i, uint64(len(m.PassiveRegions[iNdEx])))
			i--
			dAtA[i] = 0x4a
		}
	}
	if m.CodecSpec != nil {
		{
			size, err := m.CodecSpec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.Environment != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Environment))
		i--
		dAtA[i] = 0x30
	}
	if len(m.CertificateFilters) > 0 {
		for iNdEx := len(m.CertificateFilters) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CertificateFilters[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.SearchAttributes) > 0 {
		for k := range m.SearchAttributes {
			v := m.SearchAttributes[k]
			baseI := i
			i = encodeVarintMessage(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintMessage(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintMessage(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.RetentionDays != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.RetentionDays))
		i--
		dAtA[i] = 0x18
	}
	if len(m.AcceptedClientCa) > 0 {
		i -= len(m.AcceptedClientCa)
		copy(dAtA[i:], m.AcceptedClientCa)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.AcceptedClientCa)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Region) > 0 {
		i -= len(m.Region)
		copy(dAtA[i:], m.Region)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Region)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DisasterRecoverySpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DisasterRecoverySpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DisasterRecoverySpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DisableManagedFailover {
		i--
		if m.DisableManagedFailover {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LifecycleSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LifecycleSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LifecycleSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EnableDeleteProtection {
		i--
		if m.EnableDeleteProtection {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CodecServerPropertySpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CodecServerPropertySpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CodecServerPropertySpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IncludeCredentials {
		i--
		if m.IncludeCredentials {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.PassAccessToken {
		i--
		if m.PassAccessToken {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Endpoint) > 0 {
		i -= len(m.Endpoint)
		copy(dAtA[i:], m.Endpoint)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Endpoint)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CertificateFilterSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CertificateFilterSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CertificateFilterSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SubjectAlternativeName) > 0 {
		i -= len(m.SubjectAlternativeName)
		copy(dAtA[i:], m.SubjectAlternativeName)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.SubjectAlternativeName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.OrganizationalUnit) > 0 {
		i -= len(m.OrganizationalUnit)
		copy(dAtA[i:], m.OrganizationalUnit)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.OrganizationalUnit)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Organization) > 0 {
		i -= len(m.Organization)
		copy(dAtA[i:], m.Organization)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Organization)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CommonName) > 0 {
		i -= len(m.CommonName)
		copy(dAtA[i:], m.CommonName)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.CommonName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NamespaceURI) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NamespaceURI) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NamespaceURI) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PassiveRegionalGrpcAddresses) > 0 {
		for iNdEx := len(m.PassiveRegionalGrpcAddresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PassiveRegionalGrpcAddresses[iNdEx])
			copy(dAtA[i:], m.PassiveRegionalGrpcAddresses[iNdEx])
			i = encodeVarintMessage(dAtA, i, uint64(len(m.PassiveRegionalGrpcAddresses[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.RegionalGrpc) > 0 {
		i -= len(m.RegionalGrpc)
		copy(dAtA[i:], m.RegionalGrpc)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.RegionalGrpc)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.VpcEndpointServiceNames) > 0 {
		for iNdEx := len(m.VpcEndpointServiceNames) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.VpcEndpointServiceNames[iNdEx])
			copy(dAtA[i:], m.VpcEndpointServiceNames[iNdEx])
			i = encodeVarintMessage(dAtA, i, uint64(len(m.VpcEndpointServiceNames[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Grpc) > 0 {
		i -= len(m.Grpc)
		copy(dAtA[i:], m.Grpc)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Grpc)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Web) > 0 {
		i -= len(m.Web)
		copy(dAtA[i:], m.Web)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Web)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NamespaceEnvelope) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NamespaceEnvelope) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NamespaceEnvelope) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ThrottledFrontendRpsLastUpdatedTime != nil {
		{
			size, err := m.ThrottledFrontendRpsLastUpdatedTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.ThrottledFrontendRps != nil {
		{
			size, err := m.ThrottledFrontendRps.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.FrontendRpsLimit != nil {
		{
			size, err := m.FrontendRpsLimit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.ThrottledActionsPerSecondLastUpdatedTime != nil {
		{
			size, err := m.ThrottledActionsPerSecondLastUpdatedTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.ThrottledActionsPerSecond != nil {
		{
			size, err := m.ThrottledActionsPerSecond.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.ActionsPerSecondLimit != nil {
		{
			size, err := m.ActionsPerSecondLimit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}

func (m *NamespaceRegion) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NamespaceRegion) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NamespaceRegion) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ReplicaState != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.ReplicaState))
		i--
		dAtA[i] = 0x18
	}
	if m.ReplicaMode != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.ReplicaMode))
		i--
		dAtA[i] = 0x10
	}
	if m.RegionId != nil {
		{
			size, err := m.RegionId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Namespace) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Namespace) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Namespace) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Regions) > 0 {
		for iNdEx := len(m.Regions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Regions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x62
		}
	}
	if len(m.AllowedPrincipals) > 0 {
		for iNdEx := len(m.AllowedPrincipals) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AllowedPrincipals[iNdEx])
			copy(dAtA[i:], m.AllowedPrincipals[iNdEx])
			i = encodeVarintMessage(dAtA, i, uint64(len(m.AllowedPrincipals[iNdEx])))
			i--
			dAtA[i] = 0x5a
		}
	}
	if m.Envelope != nil {
		{
			size, err := m.Envelope.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.Uri != nil {
		{
			size, err := m.Uri.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.LastModifiedTime != nil {
		{
			size, err := m.LastModifiedTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.RequestId) > 0 {
		i -= len(m.RequestId)
		copy(dAtA[i:], m.RequestId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.RequestId)))
		i--
		dAtA[i] = 0x2a
	}
	if m.State != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x20
	}
	if m.Spec != nil {
		{
			size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ResourceVersion) > 0 {
		i -= len(m.ResourceVersion)
		copy(dAtA[i:], m.ResourceVersion)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.ResourceVersion)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMessage(dAtA []byte, offset int, v uint64) int {
	offset -= sovMessage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *NamespaceSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Region)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.AcceptedClientCa)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.RetentionDays != 0 {
		n += 1 + sovMessage(uint64(m.RetentionDays))
	}
	if len(m.SearchAttributes) > 0 {
		for k, v := range m.SearchAttributes {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovMessage(uint64(len(k))) + 1 + sovMessage(uint64(v))
			n += mapEntrySize + 1 + sovMessage(uint64(mapEntrySize))
		}
	}
	if len(m.CertificateFilters) > 0 {
		for _, e := range m.CertificateFilters {
			l = e.Size()
			n += 1 + l + sovMessage(uint64(l))
		}
	}
	if m.Environment != 0 {
		n += 1 + sovMessage(uint64(m.Environment))
	}
	if m.CodecSpec != nil {
		l = m.CodecSpec.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if len(m.PassiveRegions) > 0 {
		for _, s := range m.PassiveRegions {
			l = len(s)
			n += 1 + l + sovMessage(uint64(l))
		}
	}
	l = len(m.CloudProvider)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.AuthMethod != 0 {
		n += 1 + sovMessage(uint64(m.AuthMethod))
	}
	if m.RegionId != nil {
		l = m.RegionId.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Lifecycle != nil {
		l = m.Lifecycle.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.DisasterRecovery != nil {
		l = m.DisasterRecovery.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *DisasterRecoverySpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableManagedFailover {
		n += 2
	}
	return n
}

func (m *LifecycleSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableDeleteProtection {
		n += 2
	}
	return n
}

func (m *CodecServerPropertySpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Endpoint)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.PassAccessToken {
		n += 2
	}
	if m.IncludeCredentials {
		n += 2
	}
	return n
}

func (m *CertificateFilterSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CommonName)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Organization)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.OrganizationalUnit)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.SubjectAlternativeName)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *NamespaceURI) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Web)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Grpc)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if len(m.VpcEndpointServiceNames) > 0 {
		for _, s := range m.VpcEndpointServiceNames {
			l = len(s)
			n += 1 + l + sovMessage(uint64(l))
		}
	}
	l = len(m.RegionalGrpc)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if len(m.PassiveRegionalGrpcAddresses) > 0 {
		for _, s := range m.PassiveRegionalGrpcAddresses {
			l = len(s)
			n += 1 + l + sovMessage(uint64(l))
		}
	}
	return n
}

func (m *NamespaceEnvelope) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActionsPerSecondLimit != nil {
		l = m.ActionsPerSecondLimit.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.ThrottledActionsPerSecond != nil {
		l = m.ThrottledActionsPerSecond.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.ThrottledActionsPerSecondLastUpdatedTime != nil {
		l = m.ThrottledActionsPerSecondLastUpdatedTime.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.FrontendRpsLimit != nil {
		l = m.FrontendRpsLimit.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.ThrottledFrontendRps != nil {
		l = m.ThrottledFrontendRps.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.ThrottledFrontendRpsLastUpdatedTime != nil {
		l = m.ThrottledFrontendRpsLastUpdatedTime.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *NamespaceRegion) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RegionId != nil {
		l = m.RegionId.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.ReplicaMode != 0 {
		n += 1 + sovMessage(uint64(m.ReplicaMode))
	}
	if m.ReplicaState != 0 {
		n += 1 + sovMessage(uint64(m.ReplicaState))
	}
	return n
}

func (m *Namespace) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.ResourceVersion)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovMessage(uint64(m.State))
	}
	l = len(m.RequestId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.LastModifiedTime != nil {
		l = m.LastModifiedTime.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Uri != nil {
		l = m.Uri.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Envelope != nil {
		l = m.Envelope.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if len(m.AllowedPrincipals) > 0 {
		for _, s := range m.AllowedPrincipals {
			l = len(s)
			n += 1 + l + sovMessage(uint64(l))
		}
	}
	if len(m.Regions) > 0 {
		for _, e := range m.Regions {
			l = e.Size()
			n += 1 + l + sovMessage(uint64(l))
		}
	}
	return n
}

func sovMessage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMessage(x uint64) (n int) {
	return sovMessage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *NamespaceSpec) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForCertificateFilters := "[]*CertificateFilterSpec{"
	for _, f := range this.CertificateFilters {
		repeatedStringForCertificateFilters += strings.Replace(f.String(), "CertificateFilterSpec", "CertificateFilterSpec", 1) + ","
	}
	repeatedStringForCertificateFilters += "}"
	keysForSearchAttributes := make([]string, 0, len(this.SearchAttributes))
	for k, _ := range this.SearchAttributes {
		keysForSearchAttributes = append(keysForSearchAttributes, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForSearchAttributes)
	mapStringForSearchAttributes := "map[string]SearchAttributeType{"
	for _, k := range keysForSearchAttributes {
		mapStringForSearchAttributes += fmt.Sprintf("%v: %v,", k, this.SearchAttributes[k])
	}
	mapStringForSearchAttributes += "}"
	s := strings.Join([]string{`&NamespaceSpec{`,
		`Region:` + fmt.Sprintf("%v", this.Region) + `,`,
		`AcceptedClientCa:` + fmt.Sprintf("%v", this.AcceptedClientCa) + `,`,
		`RetentionDays:` + fmt.Sprintf("%v", this.RetentionDays) + `,`,
		`SearchAttributes:` + mapStringForSearchAttributes + `,`,
		`CertificateFilters:` + repeatedStringForCertificateFilters + `,`,
		`Environment:` + fmt.Sprintf("%v", this.Environment) + `,`,
		`CodecSpec:` + strings.Replace(this.CodecSpec.String(), "CodecServerPropertySpec", "CodecServerPropertySpec", 1) + `,`,
		`PassiveRegions:` + fmt.Sprintf("%v", this.PassiveRegions) + `,`,
		`CloudProvider:` + fmt.Sprintf("%v", this.CloudProvider) + `,`,
		`AuthMethod:` + fmt.Sprintf("%v", this.AuthMethod) + `,`,
		`RegionId:` + strings.Replace(fmt.Sprintf("%v", this.RegionId), "RegionID", "v1.RegionID", 1) + `,`,
		`Lifecycle:` + strings.Replace(this.Lifecycle.String(), "LifecycleSpec", "LifecycleSpec", 1) + `,`,
		`DisasterRecovery:` + strings.Replace(this.DisasterRecovery.String(), "DisasterRecoverySpec", "DisasterRecoverySpec", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DisasterRecoverySpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DisasterRecoverySpec{`,
		`DisableManagedFailover:` + fmt.Sprintf("%v", this.DisableManagedFailover) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LifecycleSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LifecycleSpec{`,
		`EnableDeleteProtection:` + fmt.Sprintf("%v", this.EnableDeleteProtection) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CodecServerPropertySpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CodecServerPropertySpec{`,
		`Endpoint:` + fmt.Sprintf("%v", this.Endpoint) + `,`,
		`PassAccessToken:` + fmt.Sprintf("%v", this.PassAccessToken) + `,`,
		`IncludeCredentials:` + fmt.Sprintf("%v", this.IncludeCredentials) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CertificateFilterSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CertificateFilterSpec{`,
		`CommonName:` + fmt.Sprintf("%v", this.CommonName) + `,`,
		`Organization:` + fmt.Sprintf("%v", this.Organization) + `,`,
		`OrganizationalUnit:` + fmt.Sprintf("%v", this.OrganizationalUnit) + `,`,
		`SubjectAlternativeName:` + fmt.Sprintf("%v", this.SubjectAlternativeName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NamespaceURI) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NamespaceURI{`,
		`Web:` + fmt.Sprintf("%v", this.Web) + `,`,
		`Grpc:` + fmt.Sprintf("%v", this.Grpc) + `,`,
		`VpcEndpointServiceNames:` + fmt.Sprintf("%v", this.VpcEndpointServiceNames) + `,`,
		`RegionalGrpc:` + fmt.Sprintf("%v", this.RegionalGrpc) + `,`,
		`PassiveRegionalGrpcAddresses:` + fmt.Sprintf("%v", this.PassiveRegionalGrpcAddresses) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NamespaceEnvelope) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NamespaceEnvelope{`,
		`ActionsPerSecondLimit:` + strings.Replace(fmt.Sprintf("%v", this.ActionsPerSecondLimit), "Int32Value", "types.Int32Value", 1) + `,`,
		`ThrottledActionsPerSecond:` + strings.Replace(fmt.Sprintf("%v", this.ThrottledActionsPerSecond), "Int32Value", "types.Int32Value", 1) + `,`,
		`ThrottledActionsPerSecondLastUpdatedTime:` + strings.Replace(fmt.Sprintf("%v", this.ThrottledActionsPerSecondLastUpdatedTime), "Timestamp", "types.Timestamp", 1) + `,`,
		`FrontendRpsLimit:` + strings.Replace(fmt.Sprintf("%v", this.FrontendRpsLimit), "Int32Value", "types.Int32Value", 1) + `,`,
		`ThrottledFrontendRps:` + strings.Replace(fmt.Sprintf("%v", this.ThrottledFrontendRps), "Int32Value", "types.Int32Value", 1) + `,`,
		`ThrottledFrontendRpsLastUpdatedTime:` + strings.Replace(fmt.Sprintf("%v", this.ThrottledFrontendRpsLastUpdatedTime), "Timestamp", "types.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NamespaceRegion) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NamespaceRegion{`,
		`RegionId:` + strings.Replace(fmt.Sprintf("%v", this.RegionId), "RegionID", "v1.RegionID", 1) + `,`,
		`ReplicaMode:` + fmt.Sprintf("%v", this.ReplicaMode) + `,`,
		`ReplicaState:` + fmt.Sprintf("%v", this.ReplicaState) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Namespace) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForRegions := "[]*NamespaceRegion{"
	for _, f := range this.Regions {
		repeatedStringForRegions += strings.Replace(f.String(), "NamespaceRegion", "NamespaceRegion", 1) + ","
	}
	repeatedStringForRegions += "}"
	s := strings.Join([]string{`&Namespace{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`ResourceVersion:` + fmt.Sprintf("%v", this.ResourceVersion) + `,`,
		`Spec:` + strings.Replace(this.Spec.String(), "NamespaceSpec", "NamespaceSpec", 1) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`RequestId:` + fmt.Sprintf("%v", this.RequestId) + `,`,
		`LastModifiedTime:` + strings.Replace(fmt.Sprintf("%v", this.LastModifiedTime), "Timestamp", "types.Timestamp", 1) + `,`,
		`Uri:` + strings.Replace(this.Uri.String(), "NamespaceURI", "NamespaceURI", 1) + `,`,
		`Envelope:` + strings.Replace(this.Envelope.String(), "NamespaceEnvelope", "NamespaceEnvelope", 1) + `,`,
		`AllowedPrincipals:` + fmt.Sprintf("%v", this.AllowedPrincipals) + `,`,
		`Regions:` + repeatedStringForRegions + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringMessage(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *NamespaceSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NamespaceSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NamespaceSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Region = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AcceptedClientCa", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AcceptedClientCa = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetentionDays", wireType)
			}
			m.RetentionDays = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetentionDays |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SearchAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SearchAttributes == nil {
				m.SearchAttributes = make(map[string]SearchAttributeType)
			}
			var mapkey string
			var mapvalue SearchAttributeType
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthMessage
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthMessage
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= SearchAttributeType(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMessage(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthMessage
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.SearchAttributes[mapkey] = mapvalue
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CertificateFilters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CertificateFilters = append(m.CertificateFilters, &CertificateFilterSpec{})
			if err := m.CertificateFilters[len(m.CertificateFilters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Environment", wireType)
			}
			m.Environment = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Environment |= Environment(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CodecSpec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CodecSpec == nil {
				m.CodecSpec = &CodecServerPropertySpec{}
			}
			if err := m.CodecSpec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PassiveRegions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PassiveRegions = append(m.PassiveRegions, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloudProvider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CloudProvider = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthMethod", wireType)
			}
			m.AuthMethod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthMethod |= AuthMethod(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegionId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RegionId == nil {
				m.RegionId = &v1.RegionID{}
			}
			if err := m.RegionId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lifecycle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Lifecycle == nil {
				m.Lifecycle = &LifecycleSpec{}
			}
			if err := m.Lifecycle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisasterRecovery", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DisasterRecovery == nil {
				m.DisasterRecovery = &DisasterRecoverySpec{}
			}
			if err := m.DisasterRecovery.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DisasterRecoverySpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DisasterRecoverySpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DisasterRecoverySpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableManagedFailover", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DisableManagedFailover = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LifecycleSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LifecycleSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LifecycleSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableDeleteProtection", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableDeleteProtection = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CodecServerPropertySpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CodecServerPropertySpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CodecServerPropertySpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Endpoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Endpoint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PassAccessToken", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PassAccessToken = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeCredentials", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IncludeCredentials = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CertificateFilterSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CertificateFilterSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CertificateFilterSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommonName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Organization", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Organization = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationalUnit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrganizationalUnit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubjectAlternativeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubjectAlternativeName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NamespaceURI) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NamespaceURI: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NamespaceURI: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Web", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Web = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Grpc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Grpc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VpcEndpointServiceNames", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VpcEndpointServiceNames = append(m.VpcEndpointServiceNames, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegionalGrpc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegionalGrpc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PassiveRegionalGrpcAddresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PassiveRegionalGrpcAddresses = append(m.PassiveRegionalGrpcAddresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NamespaceEnvelope) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NamespaceEnvelope: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NamespaceEnvelope: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionsPerSecondLimit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ActionsPerSecondLimit == nil {
				m.ActionsPerSecondLimit = &types.Int32Value{}
			}
			if err := m.ActionsPerSecondLimit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThrottledActionsPerSecond", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ThrottledActionsPerSecond == nil {
				m.ThrottledActionsPerSecond = &types.Int32Value{}
			}
			if err := m.ThrottledActionsPerSecond.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThrottledActionsPerSecondLastUpdatedTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ThrottledActionsPerSecondLastUpdatedTime == nil {
				m.ThrottledActionsPerSecondLastUpdatedTime = &types.Timestamp{}
			}
			if err := m.ThrottledActionsPerSecondLastUpdatedTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrontendRpsLimit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FrontendRpsLimit == nil {
				m.FrontendRpsLimit = &types.Int32Value{}
			}
			if err := m.FrontendRpsLimit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThrottledFrontendRps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ThrottledFrontendRps == nil {
				m.ThrottledFrontendRps = &types.Int32Value{}
			}
			if err := m.ThrottledFrontendRps.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThrottledFrontendRpsLastUpdatedTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ThrottledFrontendRpsLastUpdatedTime == nil {
				m.ThrottledFrontendRpsLastUpdatedTime = &types.Timestamp{}
			}
			if err := m.ThrottledFrontendRpsLastUpdatedTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NamespaceRegion) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NamespaceRegion: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NamespaceRegion: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegionId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RegionId == nil {
				m.RegionId = &v1.RegionID{}
			}
			if err := m.RegionId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicaMode", wireType)
			}
			m.ReplicaMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplicaMode |= v1.ReplicaMode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicaState", wireType)
			}
			m.ReplicaState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplicaState |= v1.ReplicaState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Namespace) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Namespace: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Namespace: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &NamespaceSpec{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= State(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastModifiedTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastModifiedTime == nil {
				m.LastModifiedTime = &types.Timestamp{}
			}
			if err := m.LastModifiedTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uri", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Uri == nil {
				m.Uri = &NamespaceURI{}
			}
			if err := m.Uri.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Envelope", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Envelope == nil {
				m.Envelope = &NamespaceEnvelope{}
			}
			if err := m.Envelope.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowedPrincipals", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllowedPrincipals = append(m.AllowedPrincipals, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Regions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Regions = append(m.Regions, &NamespaceRegion{})
			if err := m.Regions[len(m.Regions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMessage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMessage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMessage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMessage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMessage = fmt.Errorf("proto: unexpected end of group")
)
