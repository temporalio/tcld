// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: services/saasapi/ui/service.proto

package uiservice

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
	v1 "github.com/temporalio/tcld/protogen/api/auth/v1"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type User struct {
	User  *v1.User   `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Roles []*v1.Role `protobuf:"bytes,2,rep,name=roles,proto3" json:"roles,omitempty"`
}

func (m *User) Reset()      { *m = User{} }
func (*User) ProtoMessage() {}
func (*User) Descriptor() ([]byte, []int) {
	return fileDescriptor_66def374d5b44412, []int{0}
}
func (m *User) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User.Merge(m, src)
}
func (m *User) XXX_Size() int {
	return m.Size()
}
func (m *User) XXX_DiscardUnknown() {
	xxx_messageInfo_User.DiscardUnknown(m)
}

var xxx_messageInfo_User proto.InternalMessageInfo

func (m *User) GetUser() *v1.User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *User) GetRoles() []*v1.Role {
	if m != nil {
		return m.Roles
	}
	return nil
}

type NamespaceURI struct {
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Web       string `protobuf:"bytes,2,opt,name=web,proto3" json:"web,omitempty"`
}

func (m *NamespaceURI) Reset()      { *m = NamespaceURI{} }
func (*NamespaceURI) ProtoMessage() {}
func (*NamespaceURI) Descriptor() ([]byte, []int) {
	return fileDescriptor_66def374d5b44412, []int{1}
}
func (m *NamespaceURI) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NamespaceURI) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NamespaceURI.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NamespaceURI) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NamespaceURI.Merge(m, src)
}
func (m *NamespaceURI) XXX_Size() int {
	return m.Size()
}
func (m *NamespaceURI) XXX_DiscardUnknown() {
	xxx_messageInfo_NamespaceURI.DiscardUnknown(m)
}

var xxx_messageInfo_NamespaceURI proto.InternalMessageInfo

func (m *NamespaceURI) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *NamespaceURI) GetWeb() string {
	if m != nil {
		return m.Web
	}
	return ""
}

type GetUsersForNamespaceRequest struct {
	PageSize  int32  `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	Namespace string `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (m *GetUsersForNamespaceRequest) Reset()      { *m = GetUsersForNamespaceRequest{} }
func (*GetUsersForNamespaceRequest) ProtoMessage() {}
func (*GetUsersForNamespaceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_66def374d5b44412, []int{2}
}
func (m *GetUsersForNamespaceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetUsersForNamespaceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetUsersForNamespaceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetUsersForNamespaceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUsersForNamespaceRequest.Merge(m, src)
}
func (m *GetUsersForNamespaceRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetUsersForNamespaceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUsersForNamespaceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetUsersForNamespaceRequest proto.InternalMessageInfo

func (m *GetUsersForNamespaceRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *GetUsersForNamespaceRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

func (m *GetUsersForNamespaceRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

type GetUsersForNamespaceResponse struct {
	Users         []*User `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
	NextPageToken string  `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (m *GetUsersForNamespaceResponse) Reset()      { *m = GetUsersForNamespaceResponse{} }
func (*GetUsersForNamespaceResponse) ProtoMessage() {}
func (*GetUsersForNamespaceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_66def374d5b44412, []int{3}
}
func (m *GetUsersForNamespaceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetUsersForNamespaceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetUsersForNamespaceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetUsersForNamespaceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUsersForNamespaceResponse.Merge(m, src)
}
func (m *GetUsersForNamespaceResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetUsersForNamespaceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUsersForNamespaceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetUsersForNamespaceResponse proto.InternalMessageInfo

func (m *GetUsersForNamespaceResponse) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *GetUsersForNamespaceResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

type GetUsersWithAccountRolesRequest struct {
	PageSize  int32  `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (m *GetUsersWithAccountRolesRequest) Reset()      { *m = GetUsersWithAccountRolesRequest{} }
func (*GetUsersWithAccountRolesRequest) ProtoMessage() {}
func (*GetUsersWithAccountRolesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_66def374d5b44412, []int{4}
}
func (m *GetUsersWithAccountRolesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetUsersWithAccountRolesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetUsersWithAccountRolesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetUsersWithAccountRolesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUsersWithAccountRolesRequest.Merge(m, src)
}
func (m *GetUsersWithAccountRolesRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetUsersWithAccountRolesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUsersWithAccountRolesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetUsersWithAccountRolesRequest proto.InternalMessageInfo

func (m *GetUsersWithAccountRolesRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *GetUsersWithAccountRolesRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

type GetUsersWithAccountRolesResponse struct {
	Users         []*User `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
	NextPageToken string  `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (m *GetUsersWithAccountRolesResponse) Reset()      { *m = GetUsersWithAccountRolesResponse{} }
func (*GetUsersWithAccountRolesResponse) ProtoMessage() {}
func (*GetUsersWithAccountRolesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_66def374d5b44412, []int{5}
}
func (m *GetUsersWithAccountRolesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetUsersWithAccountRolesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetUsersWithAccountRolesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetUsersWithAccountRolesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUsersWithAccountRolesResponse.Merge(m, src)
}
func (m *GetUsersWithAccountRolesResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetUsersWithAccountRolesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUsersWithAccountRolesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetUsersWithAccountRolesResponse proto.InternalMessageInfo

func (m *GetUsersWithAccountRolesResponse) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *GetUsersWithAccountRolesResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

type SyncCurrentUserInviteRequest struct {
}

func (m *SyncCurrentUserInviteRequest) Reset()      { *m = SyncCurrentUserInviteRequest{} }
func (*SyncCurrentUserInviteRequest) ProtoMessage() {}
func (*SyncCurrentUserInviteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_66def374d5b44412, []int{6}
}
func (m *SyncCurrentUserInviteRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SyncCurrentUserInviteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SyncCurrentUserInviteRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SyncCurrentUserInviteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncCurrentUserInviteRequest.Merge(m, src)
}
func (m *SyncCurrentUserInviteRequest) XXX_Size() int {
	return m.Size()
}
func (m *SyncCurrentUserInviteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncCurrentUserInviteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SyncCurrentUserInviteRequest proto.InternalMessageInfo

type SyncCurrentUserInviteResponse struct {
}

func (m *SyncCurrentUserInviteResponse) Reset()      { *m = SyncCurrentUserInviteResponse{} }
func (*SyncCurrentUserInviteResponse) ProtoMessage() {}
func (*SyncCurrentUserInviteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_66def374d5b44412, []int{7}
}
func (m *SyncCurrentUserInviteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SyncCurrentUserInviteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SyncCurrentUserInviteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SyncCurrentUserInviteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncCurrentUserInviteResponse.Merge(m, src)
}
func (m *SyncCurrentUserInviteResponse) XXX_Size() int {
	return m.Size()
}
func (m *SyncCurrentUserInviteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncCurrentUserInviteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SyncCurrentUserInviteResponse proto.InternalMessageInfo

type ListNamespacesWithURIRequest struct {
	// the requested size of the page to retrive
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// the page token
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (m *ListNamespacesWithURIRequest) Reset()      { *m = ListNamespacesWithURIRequest{} }
func (*ListNamespacesWithURIRequest) ProtoMessage() {}
func (*ListNamespacesWithURIRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_66def374d5b44412, []int{8}
}
func (m *ListNamespacesWithURIRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListNamespacesWithURIRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListNamespacesWithURIRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListNamespacesWithURIRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListNamespacesWithURIRequest.Merge(m, src)
}
func (m *ListNamespacesWithURIRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListNamespacesWithURIRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListNamespacesWithURIRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListNamespacesWithURIRequest proto.InternalMessageInfo

func (m *ListNamespacesWithURIRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListNamespacesWithURIRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

type ListNamespacesWithURIResponse struct {
	Namespaces    []*NamespaceURI `protobuf:"bytes,1,rep,name=namespaces,proto3" json:"namespaces,omitempty"`
	NextPageToken string          `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (m *ListNamespacesWithURIResponse) Reset()      { *m = ListNamespacesWithURIResponse{} }
func (*ListNamespacesWithURIResponse) ProtoMessage() {}
func (*ListNamespacesWithURIResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_66def374d5b44412, []int{9}
}
func (m *ListNamespacesWithURIResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListNamespacesWithURIResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListNamespacesWithURIResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListNamespacesWithURIResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListNamespacesWithURIResponse.Merge(m, src)
}
func (m *ListNamespacesWithURIResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListNamespacesWithURIResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListNamespacesWithURIResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListNamespacesWithURIResponse proto.InternalMessageInfo

func (m *ListNamespacesWithURIResponse) GetNamespaces() []*NamespaceURI {
	if m != nil {
		return m.Namespaces
	}
	return nil
}

func (m *ListNamespacesWithURIResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

func init() {
	proto.RegisterType((*User)(nil), "api.uiservice.v1.User")
	proto.RegisterType((*NamespaceURI)(nil), "api.uiservice.v1.NamespaceURI")
	proto.RegisterType((*GetUsersForNamespaceRequest)(nil), "api.uiservice.v1.GetUsersForNamespaceRequest")
	proto.RegisterType((*GetUsersForNamespaceResponse)(nil), "api.uiservice.v1.GetUsersForNamespaceResponse")
	proto.RegisterType((*GetUsersWithAccountRolesRequest)(nil), "api.uiservice.v1.GetUsersWithAccountRolesRequest")
	proto.RegisterType((*GetUsersWithAccountRolesResponse)(nil), "api.uiservice.v1.GetUsersWithAccountRolesResponse")
	proto.RegisterType((*SyncCurrentUserInviteRequest)(nil), "api.uiservice.v1.SyncCurrentUserInviteRequest")
	proto.RegisterType((*SyncCurrentUserInviteResponse)(nil), "api.uiservice.v1.SyncCurrentUserInviteResponse")
	proto.RegisterType((*ListNamespacesWithURIRequest)(nil), "api.uiservice.v1.ListNamespacesWithURIRequest")
	proto.RegisterType((*ListNamespacesWithURIResponse)(nil), "api.uiservice.v1.ListNamespacesWithURIResponse")
}

func init() { proto.RegisterFile("services/saasapi/ui/service.proto", fileDescriptor_66def374d5b44412) }

var fileDescriptor_66def374d5b44412 = []byte{
	// 567 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x55, 0xcf, 0x8b, 0xd3, 0x40,
	0x14, 0xce, 0xec, 0xb6, 0x62, 0x9f, 0x8a, 0xeb, 0xa0, 0x52, 0xbb, 0xed, 0x6c, 0x0d, 0xb8, 0x7a,
	0xd0, 0x84, 0xd4, 0xa3, 0xb0, 0xa0, 0x82, 0x52, 0x10, 0x91, 0xd4, 0x2a, 0x2c, 0xca, 0x92, 0x8d,
	0xc3, 0xee, 0x60, 0x9b, 0xc4, 0xcc, 0x24, 0x5d, 0x7b, 0x12, 0x3d, 0x78, 0xf5, 0xcf, 0xf0, 0x4f,
	0xf1, 0xd8, 0xe3, 0x1e, 0x6d, 0x7a, 0xf1, 0xb8, 0x7f, 0x82, 0x4c, 0x7e, 0x59, 0xb7, 0x49, 0xa9,
	0xb0, 0xde, 0x3a, 0xef, 0x7d, 0xf3, 0x7d, 0xef, 0x7d, 0xf3, 0xb5, 0x85, 0x9b, 0x9c, 0xfa, 0x21,
	0xb3, 0x29, 0xd7, 0xb9, 0x65, 0x71, 0xcb, 0x63, 0x7a, 0xc0, 0xf4, 0xb4, 0xa6, 0x79, 0xbe, 0x2b,
	0x5c, 0xbc, 0x61, 0x79, 0x4c, 0x0b, 0x58, 0x56, 0x0c, 0x8d, 0xc6, 0x0d, 0x89, 0xb3, 0x02, 0x71,
	0xa8, 0x87, 0x86, 0x3e, 0xa4, 0x9c, 0x5b, 0x07, 0x29, 0x58, 0x7d, 0x05, 0x95, 0x3e, 0xa7, 0x3e,
	0xbe, 0x05, 0x95, 0x80, 0x53, 0xbf, 0x8e, 0xda, 0xe8, 0xce, 0x85, 0xce, 0x15, 0x4d, 0x72, 0xc8,
	0x1b, 0x5a, 0x68, 0x68, 0x12, 0x60, 0xc6, 0x6d, 0x7c, 0x1b, 0xaa, 0xbe, 0x3b, 0xa0, 0xbc, 0xbe,
	0xd6, 0x5e, 0x5f, 0xc0, 0x99, 0xee, 0x80, 0x9a, 0x49, 0x5f, 0xdd, 0x81, 0x8b, 0xcf, 0xad, 0x21,
	0xe5, 0x9e, 0x65, 0xd3, 0xbe, 0xd9, 0xc5, 0x4d, 0xa8, 0x39, 0xd9, 0x39, 0x16, 0xa9, 0x99, 0x7f,
	0x0a, 0x78, 0x03, 0xd6, 0x47, 0x74, 0xbf, 0xbe, 0x16, 0xd7, 0xe5, 0x47, 0x75, 0x04, 0x9b, 0x4f,
	0xa9, 0x90, 0xca, 0xfc, 0x89, 0xeb, 0xe7, 0x54, 0x26, 0xfd, 0x10, 0x50, 0x2e, 0xf0, 0x26, 0xd4,
	0x3c, 0xeb, 0x80, 0xee, 0x71, 0x36, 0x4e, 0xe8, 0xaa, 0xe6, 0x79, 0x59, 0xe8, 0xb1, 0x31, 0xc5,
	0x2d, 0x80, 0xb8, 0x29, 0xdc, 0xf7, 0xd4, 0x49, 0x49, 0x63, 0xf8, 0x4b, 0x59, 0xf8, 0x7b, 0x94,
	0xf5, 0x53, 0xa3, 0xa8, 0x02, 0x9a, 0xc5, 0xc2, 0xdc, 0x73, 0x1d, 0x4e, 0xf1, 0x5d, 0xa8, 0x4a,
	0x27, 0x78, 0x1d, 0xc5, 0x0e, 0x5c, 0xd7, 0x4e, 0xbb, 0x9d, 0xd8, 0x95, 0x80, 0xf0, 0x36, 0x5c,
	0x76, 0xe8, 0x91, 0xd8, 0x5b, 0x98, 0xe7, 0x92, 0x2c, 0xbf, 0xc8, 0x66, 0x52, 0xdf, 0xc2, 0x56,
	0xa6, 0xfa, 0x9a, 0x89, 0xc3, 0x87, 0xb6, 0xed, 0x06, 0x8e, 0x90, 0x86, 0xf2, 0x33, 0x58, 0x59,
	0x3d, 0x82, 0x76, 0x39, 0xfd, 0x7f, 0x5d, 0x8c, 0x40, 0xb3, 0xf7, 0xd1, 0xb1, 0x1f, 0x07, 0xbe,
	0x4f, 0x9d, 0x78, 0x82, 0xae, 0x13, 0x32, 0x91, 0x3d, 0xa4, 0xba, 0x05, 0xad, 0x92, 0x7e, 0x32,
	0x96, 0xba, 0x0b, 0xcd, 0x67, 0x8c, 0x8b, 0xfc, 0x21, 0xe2, 0x05, 0xfa, 0x66, 0xf7, 0x2c, 0x6c,
	0xf9, 0x8a, 0xa0, 0x55, 0x42, 0x9e, 0x9a, 0xb2, 0x03, 0x90, 0x47, 0x23, 0x73, 0x86, 0x2c, 0x3a,
	0x33, 0x1f, 0x75, 0x73, 0xee, 0xc6, 0xaa, 0x36, 0x75, 0x3e, 0x57, 0xa0, 0xd6, 0xef, 0xf6, 0x12,
	0x46, 0x3c, 0x82, 0xab, 0x45, 0x19, 0xc4, 0xf7, 0x16, 0x95, 0x97, 0x7c, 0x49, 0x1a, 0xda, 0xaa,
	0xf0, 0xd4, 0x6a, 0x05, 0x7f, 0x41, 0x50, 0x2f, 0x0b, 0x0a, 0x36, 0xca, 0xe9, 0x4a, 0x32, 0xdb,
	0xe8, 0xfc, 0xcb, 0x95, 0x7c, 0x8a, 0x31, 0x5c, 0x2b, 0xcc, 0x04, 0x2e, 0x58, 0x68, 0x59, 0xb8,
	0x1a, 0xfa, 0xca, 0xf8, 0x79, 0xed, 0xc2, 0x44, 0x14, 0x69, 0x2f, 0xcb, 0x65, 0x91, 0xf6, 0xd2,
	0xa8, 0xa9, 0xca, 0xa3, 0x37, 0x93, 0x29, 0x51, 0x8e, 0xa7, 0x44, 0x39, 0x99, 0x12, 0xf4, 0x29,
	0x22, 0xe8, 0x7b, 0x44, 0xd0, 0x8f, 0x88, 0xa0, 0x49, 0x44, 0xd0, 0xcf, 0x88, 0xa0, 0x5f, 0x11,
	0x51, 0x4e, 0x22, 0x82, 0xbe, 0xcd, 0x88, 0x32, 0x99, 0x11, 0xe5, 0x78, 0x46, 0x94, 0xdd, 0x6d,
	0x31, 0xf4, 0xfc, 0x81, 0x66, 0x0f, 0xdc, 0xe0, 0x9d, 0x9e, 0xfc, 0x21, 0xa4, 0x9a, 0x7a, 0x68,
	0x3c, 0xc8, 0x0f, 0xfb, 0xe7, 0xe2, 0x1f, 0xfc, 0xfb, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0xef,
	0xe7, 0xba, 0x47, 0x42, 0x06, 0x00, 0x00,
}

func (this *User) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User)
	if !ok {
		that2, ok := that.(User)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.User.Equal(that1.User) {
		return false
	}
	if len(this.Roles) != len(that1.Roles) {
		return false
	}
	for i := range this.Roles {
		if !this.Roles[i].Equal(that1.Roles[i]) {
			return false
		}
	}
	return true
}
func (this *NamespaceURI) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NamespaceURI)
	if !ok {
		that2, ok := that.(NamespaceURI)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Web != that1.Web {
		return false
	}
	return true
}
func (this *GetUsersForNamespaceRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetUsersForNamespaceRequest)
	if !ok {
		that2, ok := that.(GetUsersForNamespaceRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PageSize != that1.PageSize {
		return false
	}
	if this.PageToken != that1.PageToken {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	return true
}
func (this *GetUsersForNamespaceResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetUsersForNamespaceResponse)
	if !ok {
		that2, ok := that.(GetUsersForNamespaceResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Users) != len(that1.Users) {
		return false
	}
	for i := range this.Users {
		if !this.Users[i].Equal(that1.Users[i]) {
			return false
		}
	}
	if this.NextPageToken != that1.NextPageToken {
		return false
	}
	return true
}
func (this *GetUsersWithAccountRolesRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetUsersWithAccountRolesRequest)
	if !ok {
		that2, ok := that.(GetUsersWithAccountRolesRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PageSize != that1.PageSize {
		return false
	}
	if this.PageToken != that1.PageToken {
		return false
	}
	return true
}
func (this *GetUsersWithAccountRolesResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetUsersWithAccountRolesResponse)
	if !ok {
		that2, ok := that.(GetUsersWithAccountRolesResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Users) != len(that1.Users) {
		return false
	}
	for i := range this.Users {
		if !this.Users[i].Equal(that1.Users[i]) {
			return false
		}
	}
	if this.NextPageToken != that1.NextPageToken {
		return false
	}
	return true
}
func (this *SyncCurrentUserInviteRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SyncCurrentUserInviteRequest)
	if !ok {
		that2, ok := that.(SyncCurrentUserInviteRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *SyncCurrentUserInviteResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SyncCurrentUserInviteResponse)
	if !ok {
		that2, ok := that.(SyncCurrentUserInviteResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *ListNamespacesWithURIRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListNamespacesWithURIRequest)
	if !ok {
		that2, ok := that.(ListNamespacesWithURIRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PageSize != that1.PageSize {
		return false
	}
	if this.PageToken != that1.PageToken {
		return false
	}
	return true
}
func (this *ListNamespacesWithURIResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListNamespacesWithURIResponse)
	if !ok {
		that2, ok := that.(ListNamespacesWithURIResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Namespaces) != len(that1.Namespaces) {
		return false
	}
	for i := range this.Namespaces {
		if !this.Namespaces[i].Equal(that1.Namespaces[i]) {
			return false
		}
	}
	if this.NextPageToken != that1.NextPageToken {
		return false
	}
	return true
}
func (this *User) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&uiservice.User{")
	if this.User != nil {
		s = append(s, "User: "+fmt.Sprintf("%#v", this.User)+",\n")
	}
	if this.Roles != nil {
		s = append(s, "Roles: "+fmt.Sprintf("%#v", this.Roles)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NamespaceURI) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&uiservice.NamespaceURI{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Web: "+fmt.Sprintf("%#v", this.Web)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetUsersForNamespaceRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&uiservice.GetUsersForNamespaceRequest{")
	s = append(s, "PageSize: "+fmt.Sprintf("%#v", this.PageSize)+",\n")
	s = append(s, "PageToken: "+fmt.Sprintf("%#v", this.PageToken)+",\n")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetUsersForNamespaceResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&uiservice.GetUsersForNamespaceResponse{")
	if this.Users != nil {
		s = append(s, "Users: "+fmt.Sprintf("%#v", this.Users)+",\n")
	}
	s = append(s, "NextPageToken: "+fmt.Sprintf("%#v", this.NextPageToken)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetUsersWithAccountRolesRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&uiservice.GetUsersWithAccountRolesRequest{")
	s = append(s, "PageSize: "+fmt.Sprintf("%#v", this.PageSize)+",\n")
	s = append(s, "PageToken: "+fmt.Sprintf("%#v", this.PageToken)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetUsersWithAccountRolesResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&uiservice.GetUsersWithAccountRolesResponse{")
	if this.Users != nil {
		s = append(s, "Users: "+fmt.Sprintf("%#v", this.Users)+",\n")
	}
	s = append(s, "NextPageToken: "+fmt.Sprintf("%#v", this.NextPageToken)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SyncCurrentUserInviteRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&uiservice.SyncCurrentUserInviteRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SyncCurrentUserInviteResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&uiservice.SyncCurrentUserInviteResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListNamespacesWithURIRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&uiservice.ListNamespacesWithURIRequest{")
	s = append(s, "PageSize: "+fmt.Sprintf("%#v", this.PageSize)+",\n")
	s = append(s, "PageToken: "+fmt.Sprintf("%#v", this.PageToken)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListNamespacesWithURIResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&uiservice.ListNamespacesWithURIResponse{")
	if this.Namespaces != nil {
		s = append(s, "Namespaces: "+fmt.Sprintf("%#v", this.Namespaces)+",\n")
	}
	s = append(s, "NextPageToken: "+fmt.Sprintf("%#v", this.NextPageToken)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringService(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UIServiceClient is the client API for UIService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UIServiceClient interface {
	GetUsersForNamespace(ctx context.Context, in *GetUsersForNamespaceRequest, opts ...grpc.CallOption) (*GetUsersForNamespaceResponse, error)
	GetUsersWithAccountRoles(ctx context.Context, in *GetUsersWithAccountRolesRequest, opts ...grpc.CallOption) (*GetUsersWithAccountRolesResponse, error)
	SyncCurrentUserInvite(ctx context.Context, in *SyncCurrentUserInviteRequest, opts ...grpc.CallOption) (*SyncCurrentUserInviteResponse, error)
	ListNamespacesWithURI(ctx context.Context, in *ListNamespacesWithURIRequest, opts ...grpc.CallOption) (*ListNamespacesWithURIResponse, error)
}

type uIServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUIServiceClient(cc grpc.ClientConnInterface) UIServiceClient {
	return &uIServiceClient{cc}
}

func (c *uIServiceClient) GetUsersForNamespace(ctx context.Context, in *GetUsersForNamespaceRequest, opts ...grpc.CallOption) (*GetUsersForNamespaceResponse, error) {
	out := new(GetUsersForNamespaceResponse)
	err := c.cc.Invoke(ctx, "/api.uiservice.v1.UIService/GetUsersForNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uIServiceClient) GetUsersWithAccountRoles(ctx context.Context, in *GetUsersWithAccountRolesRequest, opts ...grpc.CallOption) (*GetUsersWithAccountRolesResponse, error) {
	out := new(GetUsersWithAccountRolesResponse)
	err := c.cc.Invoke(ctx, "/api.uiservice.v1.UIService/GetUsersWithAccountRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uIServiceClient) SyncCurrentUserInvite(ctx context.Context, in *SyncCurrentUserInviteRequest, opts ...grpc.CallOption) (*SyncCurrentUserInviteResponse, error) {
	out := new(SyncCurrentUserInviteResponse)
	err := c.cc.Invoke(ctx, "/api.uiservice.v1.UIService/SyncCurrentUserInvite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uIServiceClient) ListNamespacesWithURI(ctx context.Context, in *ListNamespacesWithURIRequest, opts ...grpc.CallOption) (*ListNamespacesWithURIResponse, error) {
	out := new(ListNamespacesWithURIResponse)
	err := c.cc.Invoke(ctx, "/api.uiservice.v1.UIService/ListNamespacesWithURI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UIServiceServer is the server API for UIService service.
type UIServiceServer interface {
	GetUsersForNamespace(context.Context, *GetUsersForNamespaceRequest) (*GetUsersForNamespaceResponse, error)
	GetUsersWithAccountRoles(context.Context, *GetUsersWithAccountRolesRequest) (*GetUsersWithAccountRolesResponse, error)
	SyncCurrentUserInvite(context.Context, *SyncCurrentUserInviteRequest) (*SyncCurrentUserInviteResponse, error)
	ListNamespacesWithURI(context.Context, *ListNamespacesWithURIRequest) (*ListNamespacesWithURIResponse, error)
}

// UnimplementedUIServiceServer can be embedded to have forward compatible implementations.
type UnimplementedUIServiceServer struct {
}

func (*UnimplementedUIServiceServer) GetUsersForNamespace(ctx context.Context, req *GetUsersForNamespaceRequest) (*GetUsersForNamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersForNamespace not implemented")
}
func (*UnimplementedUIServiceServer) GetUsersWithAccountRoles(ctx context.Context, req *GetUsersWithAccountRolesRequest) (*GetUsersWithAccountRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersWithAccountRoles not implemented")
}
func (*UnimplementedUIServiceServer) SyncCurrentUserInvite(ctx context.Context, req *SyncCurrentUserInviteRequest) (*SyncCurrentUserInviteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncCurrentUserInvite not implemented")
}
func (*UnimplementedUIServiceServer) ListNamespacesWithURI(ctx context.Context, req *ListNamespacesWithURIRequest) (*ListNamespacesWithURIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNamespacesWithURI not implemented")
}

func RegisterUIServiceServer(s *grpc.Server, srv UIServiceServer) {
	s.RegisterService(&_UIService_serviceDesc, srv)
}

func _UIService_GetUsersForNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersForNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UIServiceServer).GetUsersForNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.uiservice.v1.UIService/GetUsersForNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UIServiceServer).GetUsersForNamespace(ctx, req.(*GetUsersForNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UIService_GetUsersWithAccountRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersWithAccountRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UIServiceServer).GetUsersWithAccountRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.uiservice.v1.UIService/GetUsersWithAccountRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UIServiceServer).GetUsersWithAccountRoles(ctx, req.(*GetUsersWithAccountRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UIService_SyncCurrentUserInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncCurrentUserInviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UIServiceServer).SyncCurrentUserInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.uiservice.v1.UIService/SyncCurrentUserInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UIServiceServer).SyncCurrentUserInvite(ctx, req.(*SyncCurrentUserInviteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UIService_ListNamespacesWithURI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNamespacesWithURIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UIServiceServer).ListNamespacesWithURI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.uiservice.v1.UIService/ListNamespacesWithURI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UIServiceServer).ListNamespacesWithURI(ctx, req.(*ListNamespacesWithURIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UIService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.uiservice.v1.UIService",
	HandlerType: (*UIServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUsersForNamespace",
			Handler:    _UIService_GetUsersForNamespace_Handler,
		},
		{
			MethodName: "GetUsersWithAccountRoles",
			Handler:    _UIService_GetUsersWithAccountRoles_Handler,
		},
		{
			MethodName: "SyncCurrentUserInvite",
			Handler:    _UIService_SyncCurrentUserInvite_Handler,
		},
		{
			MethodName: "ListNamespacesWithURI",
			Handler:    _UIService_ListNamespacesWithURI_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/saasapi/ui/service.proto",
}

func (m *User) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Roles) > 0 {
		for iNdEx := len(m.Roles) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Roles[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.User != nil {
		{
			size, err := m.User.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NamespaceURI) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NamespaceURI) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NamespaceURI) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Web) > 0 {
		i -= len(m.Web)
		copy(dAtA[i:], m.Web)
		i = encodeVarintService(dAtA, i, uint64(len(m.Web)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintService(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetUsersForNamespaceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUsersForNamespaceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetUsersForNamespaceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintService(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PageToken) > 0 {
		i -= len(m.PageToken)
		copy(dAtA[i:], m.PageToken)
		i = encodeVarintService(dAtA, i, uint64(len(m.PageToken)))
		i--
		dAtA[i] = 0x12
	}
	if m.PageSize != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.PageSize))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetUsersForNamespaceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUsersForNamespaceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetUsersForNamespaceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NextPageToken) > 0 {
		i -= len(m.NextPageToken)
		copy(dAtA[i:], m.NextPageToken)
		i = encodeVarintService(dAtA, i, uint64(len(m.NextPageToken)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Users) > 0 {
		for iNdEx := len(m.Users) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Users[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetUsersWithAccountRolesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUsersWithAccountRolesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetUsersWithAccountRolesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PageToken) > 0 {
		i -= len(m.PageToken)
		copy(dAtA[i:], m.PageToken)
		i = encodeVarintService(dAtA, i, uint64(len(m.PageToken)))
		i--
		dAtA[i] = 0x12
	}
	if m.PageSize != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.PageSize))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetUsersWithAccountRolesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUsersWithAccountRolesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetUsersWithAccountRolesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NextPageToken) > 0 {
		i -= len(m.NextPageToken)
		copy(dAtA[i:], m.NextPageToken)
		i = encodeVarintService(dAtA, i, uint64(len(m.NextPageToken)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Users) > 0 {
		for iNdEx := len(m.Users) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Users[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SyncCurrentUserInviteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncCurrentUserInviteRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SyncCurrentUserInviteRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *SyncCurrentUserInviteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncCurrentUserInviteResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SyncCurrentUserInviteResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ListNamespacesWithURIRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListNamespacesWithURIRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListNamespacesWithURIRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PageToken) > 0 {
		i -= len(m.PageToken)
		copy(dAtA[i:], m.PageToken)
		i = encodeVarintService(dAtA, i, uint64(len(m.PageToken)))
		i--
		dAtA[i] = 0x12
	}
	if m.PageSize != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.PageSize))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListNamespacesWithURIResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListNamespacesWithURIResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListNamespacesWithURIResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NextPageToken) > 0 {
		i -= len(m.NextPageToken)
		copy(dAtA[i:], m.NextPageToken)
		i = encodeVarintService(dAtA, i, uint64(len(m.NextPageToken)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespaces) > 0 {
		for iNdEx := len(m.Namespaces) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Namespaces[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintService(dAtA []byte, offset int, v uint64) int {
	offset -= sovService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *User) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.User != nil {
		l = m.User.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if len(m.Roles) > 0 {
		for _, e := range m.Roles {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	return n
}

func (m *NamespaceURI) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.Web)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *GetUsersForNamespaceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PageSize != 0 {
		n += 1 + sovService(uint64(m.PageSize))
	}
	l = len(m.PageToken)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *GetUsersForNamespaceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	l = len(m.NextPageToken)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *GetUsersWithAccountRolesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PageSize != 0 {
		n += 1 + sovService(uint64(m.PageSize))
	}
	l = len(m.PageToken)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *GetUsersWithAccountRolesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	l = len(m.NextPageToken)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *SyncCurrentUserInviteRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SyncCurrentUserInviteResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ListNamespacesWithURIRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PageSize != 0 {
		n += 1 + sovService(uint64(m.PageSize))
	}
	l = len(m.PageToken)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *ListNamespacesWithURIResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Namespaces) > 0 {
		for _, e := range m.Namespaces {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	l = len(m.NextPageToken)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func sovService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozService(x uint64) (n int) {
	return sovService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *User) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForRoles := "[]*Role{"
	for _, f := range this.Roles {
		repeatedStringForRoles += strings.Replace(fmt.Sprintf("%v", f), "Role", "v1.Role", 1) + ","
	}
	repeatedStringForRoles += "}"
	s := strings.Join([]string{`&User{`,
		`User:` + strings.Replace(fmt.Sprintf("%v", this.User), "User", "v1.User", 1) + `,`,
		`Roles:` + repeatedStringForRoles + `,`,
		`}`,
	}, "")
	return s
}
func (this *NamespaceURI) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NamespaceURI{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Web:` + fmt.Sprintf("%v", this.Web) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetUsersForNamespaceRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetUsersForNamespaceRequest{`,
		`PageSize:` + fmt.Sprintf("%v", this.PageSize) + `,`,
		`PageToken:` + fmt.Sprintf("%v", this.PageToken) + `,`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetUsersForNamespaceResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForUsers := "[]*User{"
	for _, f := range this.Users {
		repeatedStringForUsers += strings.Replace(f.String(), "User", "User", 1) + ","
	}
	repeatedStringForUsers += "}"
	s := strings.Join([]string{`&GetUsersForNamespaceResponse{`,
		`Users:` + repeatedStringForUsers + `,`,
		`NextPageToken:` + fmt.Sprintf("%v", this.NextPageToken) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetUsersWithAccountRolesRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetUsersWithAccountRolesRequest{`,
		`PageSize:` + fmt.Sprintf("%v", this.PageSize) + `,`,
		`PageToken:` + fmt.Sprintf("%v", this.PageToken) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetUsersWithAccountRolesResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForUsers := "[]*User{"
	for _, f := range this.Users {
		repeatedStringForUsers += strings.Replace(f.String(), "User", "User", 1) + ","
	}
	repeatedStringForUsers += "}"
	s := strings.Join([]string{`&GetUsersWithAccountRolesResponse{`,
		`Users:` + repeatedStringForUsers + `,`,
		`NextPageToken:` + fmt.Sprintf("%v", this.NextPageToken) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SyncCurrentUserInviteRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SyncCurrentUserInviteRequest{`,
		`}`,
	}, "")
	return s
}
func (this *SyncCurrentUserInviteResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SyncCurrentUserInviteResponse{`,
		`}`,
	}, "")
	return s
}
func (this *ListNamespacesWithURIRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListNamespacesWithURIRequest{`,
		`PageSize:` + fmt.Sprintf("%v", this.PageSize) + `,`,
		`PageToken:` + fmt.Sprintf("%v", this.PageToken) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListNamespacesWithURIResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForNamespaces := "[]*NamespaceURI{"
	for _, f := range this.Namespaces {
		repeatedStringForNamespaces += strings.Replace(f.String(), "NamespaceURI", "NamespaceURI", 1) + ","
	}
	repeatedStringForNamespaces += "}"
	s := strings.Join([]string{`&ListNamespacesWithURIResponse{`,
		`Namespaces:` + repeatedStringForNamespaces + `,`,
		`NextPageToken:` + fmt.Sprintf("%v", this.NextPageToken) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringService(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *User) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: User: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: User: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &v1.User{}
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Roles = append(m.Roles, &v1.Role{})
			if err := m.Roles[len(m.Roles)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NamespaceURI) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NamespaceURI: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NamespaceURI: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Web", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Web = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUsersForNamespaceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUsersForNamespaceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUsersForNamespaceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PageToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUsersForNamespaceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUsersForNamespaceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUsersForNamespaceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, &User{})
			if err := m.Users[len(m.Users)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextPageToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NextPageToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUsersWithAccountRolesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUsersWithAccountRolesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUsersWithAccountRolesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PageToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUsersWithAccountRolesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUsersWithAccountRolesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUsersWithAccountRolesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, &User{})
			if err := m.Users[len(m.Users)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextPageToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NextPageToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyncCurrentUserInviteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncCurrentUserInviteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncCurrentUserInviteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyncCurrentUserInviteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncCurrentUserInviteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncCurrentUserInviteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListNamespacesWithURIRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListNamespacesWithURIRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListNamespacesWithURIRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PageToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListNamespacesWithURIResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListNamespacesWithURIResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListNamespacesWithURIResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespaces", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespaces = append(m.Namespaces, &NamespaceURI{})
			if err := m.Namespaces[len(m.Namespaces)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextPageToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NextPageToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupService = fmt.Errorf("proto: unexpected end of group")
)
