// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: services/saasapi/operator/internalservice/v1/service.proto

package internalservice

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("services/saasapi/operator/internalservice/v1/service.proto", fileDescriptor_a73b3e7f59cf4968)
}

var fileDescriptor_a73b3e7f59cf4968 = []byte{
	// 1506 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x9a, 0xc9, 0x8f, 0x1b, 0xc5,
	0x17, 0xc7, 0x5d, 0x97, 0xdf, 0x4f, 0x54, 0x48, 0x42, 0x3a, 0x21, 0xdb, 0x40, 0x47, 0x44, 0x1c,
	0x91, 0x47, 0x81, 0x1b, 0x48, 0x24, 0x8e, 0x67, 0xc6, 0x31, 0x99, 0xc9, 0x38, 0xf6, 0x4c, 0x0e,
	0x1c, 0x40, 0x35, 0xed, 0x8a, 0x53, 0xd0, 0x53, 0xd5, 0x54, 0x95, 0x2d, 0x9c, 0x03, 0xe2, 0x2f,
	0x40, 0x61, 0x0b, 0x22, 0x09, 0x9b, 0x58, 0x14, 0x22, 0x96, 0x03, 0x42, 0xe2, 0x80, 0x90, 0x90,
	0x90, 0xe0, 0x82, 0x34, 0xc7, 0xdc, 0x20, 0xce, 0x85, 0x63, 0xfe, 0x04, 0xd4, 0xab, 0xbb, 0xda,
	0x1e, 0xa3, 0x2a, 0xf7, 0xa1, 0x6e, 0xc9, 0xb8, 0xdf, 0xb7, 0x3e, 0xaf, 0xde, 0xeb, 0xf7, 0x6a,
	0x69, 0xf8, 0xac, 0xc0, 0x7c, 0x40, 0x3c, 0x2c, 0x16, 0x05, 0x42, 0x02, 0x05, 0x64, 0x91, 0x05,
	0x98, 0x23, 0xc9, 0xf8, 0x22, 0xa1, 0x12, 0x73, 0x8a, 0xfc, 0xe4, 0x89, 0xc5, 0xc1, 0xa9, 0xc5,
	0xe4, 0x9f, 0xd5, 0x80, 0x33, 0xc9, 0x9c, 0xa7, 0x52, 0xdb, 0x6a, 0x62, 0x5b, 0x4d, 0x6d, 0xab,
	0x05, 0xdb, 0xea, 0xe0, 0xd4, 0xf1, 0xba, 0xd6, 0x48, 0x1c, 0xbf, 0xd6, 0xc7, 0x42, 0xbe, 0xcc,
	0xb1, 0x08, 0x18, 0x15, 0xc9, 0x90, 0x4f, 0xff, 0xf5, 0x12, 0xdc, 0xdf, 0x4c, 0x9e, 0xee, 0xc4,
	0x4f, 0x3b, 0x9f, 0x02, 0xb8, 0xbf, 0xce, 0x31, 0x92, 0xf8, 0x02, 0xda, 0xc6, 0x22, 0x40, 0x1e,
	0x76, 0x96, 0xaa, 0x3a, 0x6c, 0xd5, 0x82, 0x79, 0x3b, 0x1e, 0xfc, 0xf8, 0xf2, 0x9c, 0x2a, 0x31,
	0xfa, 0xc9, 0x8a, 0x73, 0x13, 0xc0, 0x7d, 0xab, 0x44, 0xc8, 0xec, 0x37, 0xe1, 0x9c, 0xd5, 0xd3,
	0x0e, 0xad, 0xdb, 0x58, 0xb0, 0x3e, 0xf7, 0xb0, 0x48, 0xf9, 0xea, 0x73, 0x69, 0x64, 0x74, 0xef,
	0x03, 0xf8, 0x70, 0x03, 0x8f, 0xe1, 0x9c, 0x33, 0x7a, 0xba, 0x0d, 0x9c, 0xc9, 0xa6, 0x64, 0xb5,
	0x39, 0x14, 0x32, 0xae, 0x8f, 0x01, 0xdc, 0xbf, 0x19, 0x74, 0x95, 0xc0, 0x6a, 0xba, 0x1c, 0x9b,
	0x17, 0xe9, 0x96, 0xe6, 0x13, 0xc9, 0x00, 0x6f, 0x01, 0xb8, 0xb7, 0x33, 0xa4, 0x9e, 0xa5, 0x78,
	0x77, 0x00, 0x5c, 0x58, 0xc2, 0x3e, 0xce, 0xcd, 0xdf, 0x0a, 0x67, 0xdb, 0x4b, 0x48, 0xa2, 0x2d,
	0x24, 0x2c, 0x83, 0x0d, 0x83, 0x5d, 0x80, 0xb5, 0x0b, 0xf0, 0x3b, 0x00, 0x4f, 0x14, 0xb2, 0x71,
	0x3d, 0xd1, 0xe9, 0x60, 0x29, 0x09, 0xed, 0x09, 0xbb, 0x80, 0xaf, 0x03, 0xf8, 0x50, 0xf8, 0xca,
	0xd7, 0xb1, 0xef, 0x5b, 0x55, 0x6f, 0xae, 0x01, 0xf8, 0xff, 0x06, 0x8e, 0xb8, 0x6c, 0x29, 0x35,
	0x1f, 0x02, 0x08, 0xe3, 0x89, 0x8c, 0xa8, 0xac, 0x8a, 0x63, 0x32, 0x5d, 0x9b, 0x02, 0x73, 0x5b,
	0xa6, 0xeb, 0x9d, 0x24, 0xb5, 0x42, 0x26, 0xe1, 0x3c, 0xaf, 0x9f, 0x16, 0x91, 0x61, 0xc9, 0x69,
	0x35, 0x8e, 0x61, 0x34, 0x55, 0x56, 0xc5, 0xf0, 0x57, 0x00, 0x8f, 0xb7, 0x99, 0xef, 0x13, 0xda,
	0x8b, 0x9f, 0xd9, 0xc0, 0xdb, 0x01, 0xe3, 0xc8, 0x8f, 0x5f, 0xce, 0x75, 0xbd, 0x61, 0x76, 0x57,
	0x4a, 0xb9, 0x5b, 0xe5, 0x09, 0x66, 0x3e, 0xbc, 0x0d, 0x20, 0x8c, 0x97, 0x38, 0xd1, 0x3b, 0x72,
	0xda, 0x64, 0x71, 0x14, 0x5a, 0xa6, 0x8c, 0x67, 0xcc, 0x05, 0x14, 0xa6, 0xb8, 0x6b, 0x98, 0x30,
	0x8d, 0x2d, 0x0d, 0x99, 0xf2, 0x02, 0x19, 0xd3, 0xf7, 0x00, 0x1e, 0x1a, 0xc3, 0x36, 0x69, 0xd6,
	0x6f, 0x9b, 0xa6, 0x0e, 0x8f, 0x35, 0x52, 0xce, 0x17, 0xca, 0x90, 0xca, 0x88, 0x3f, 0x07, 0xf0,
	0xd0, 0xd8, 0x95, 0x1c, 0xb1, 0x55, 0xef, 0xd0, 0x9f, 0x00, 0xba, 0x35, 0xdf, 0x67, 0x1e, 0x92,
	0xb8, 0x49, 0x89, 0x24, 0xc8, 0x5f, 0x41, 0xc4, 0x67, 0x03, 0xcc, 0x2f, 0x61, 0x2e, 0x08, 0xa3,
	0x4e, 0x47, 0x6f, 0xa8, 0xd9, 0x6a, 0x29, 0xff, 0x46, 0xb9, 0xa2, 0x99, 0x3f, 0xbf, 0x03, 0xf8,
	0x58, 0xec, 0xec, 0x2e, 0xde, 0x5c, 0x34, 0x99, 0xb8, 0xd9, 0xbe, 0xb4, 0xcb, 0x94, 0x54, 0x3c,
	0x89, 0xf3, 0xa7, 0x1c, 0x4f, 0x66, 0x69, 0x19, 0x7a, 0x32, 0x5b, 0x32, 0xf3, 0xe4, 0x17, 0x00,
	0x8f, 0x35, 0xb0, 0xdc, 0xc5, 0x8d, 0x0b, 0xda, 0xbd, 0x73, 0xb6, 0x0f, 0xeb, 0xa5, 0xe9, 0x65,
	0x0e, 0xbc, 0x07, 0xe0, 0x9e, 0x26, 0x1d, 0x90, 0xb8, 0x09, 0x0a, 0xdd, 0x05, 0x43, 0xce, 0xd4,
	0x70, 0xc1, 0xa0, 0x28, 0x64, 0x58, 0x1f, 0x01, 0xb8, 0xaf, 0xd6, 0xed, 0xb6, 0x99, 0x8f, 0xc5,
	0x06, 0x33, 0xe9, 0xcf, 0xaa, 0xb5, 0x61, 0x6d, 0x29, 0x8a, 0x64, 0x7c, 0xdf, 0x00, 0x78, 0x30,
	0x4e, 0x91, 0xe8, 0xf7, 0x70, 0x9b, 0x14, 0x41, 0x9e, 0x33, 0xc9, 0x32, 0x45, 0x22, 0x25, 0x6d,
	0x96, 0xa0, 0x94, 0xe1, 0xde, 0x00, 0xf0, 0x40, 0xb8, 0x32, 0x63, 0x3e, 0xce, 0x55, 0x6b, 0x4b,
	0x16, 0x87, 0x61, 0x37, 0x49, 0x8a, 0xb8, 0xca, 0x67, 0x55, 0x37, 0x19, 0xf7, 0x3c, 0xdb, 0x29,
	0xe3, 0xe6, 0x6d, 0x33, 0xe5, 0x2d, 0x00, 0x0f, 0x36, 0xb0, 0x5c, 0xa6, 0x92, 0xc8, 0x61, 0x22,
	0xbe, 0x86, 0x02, 0x5b, 0x12, 0xf2, 0x5d, 0x00, 0x61, 0x03, 0xcb, 0x9a, 0xe7, 0xb1, 0x3e, 0x95,
	0xb6, 0x50, 0xdd, 0x02, 0x70, 0x6f, 0x3c, 0xa3, 0x29, 0x98, 0x6d, 0x99, 0x77, 0x38, 0xdc, 0x69,
	0x25, 0x70, 0x22, 0x97, 0x7b, 0x16, 0x1d, 0x25, 0x7c, 0x02, 0xe0, 0xe1, 0x71, 0x68, 0x95, 0xd3,
	0x2d, 0x4b, 0xc2, 0xfc, 0x15, 0x80, 0x47, 0x94, 0x30, 0xdb, 0xfa, 0x12, 0xff, 0x04, 0xe0, 0x91,
	0x4e, 0xb8, 0xc2, 0x88, 0x4d, 0xe2, 0xd6, 0xc3, 0x78, 0xd4, 0x06, 0x57, 0xf5, 0xc6, 0xd8, 0x45,
	0x26, 0x25, 0x5e, 0x2b, 0x49, 0x2d, 0x43, 0xff, 0x0c, 0xc0, 0xa3, 0xb9, 0xd9, 0x5f, 0x43, 0x14,
	0xf5, 0x30, 0xaf, 0x33, 0x7a, 0x99, 0xf4, 0x6c, 0xc9, 0x83, 0x3b, 0x00, 0x2e, 0xa8, 0x73, 0xaf,
	0x62, 0x5a, 0x95, 0x0b, 0x5f, 0x00, 0xb8, 0x30, 0x39, 0xa1, 0xd6, 0x5d, 0x10, 0x7c, 0x0b, 0xa0,
	0x3b, 0x75, 0x4e, 0x2d, 0x3d, 0x42, 0xfe, 0x12, 0xc0, 0xa3, 0xf9, 0x4a, 0x96, 0x66, 0x80, 0x6d,
	0x07, 0xb4, 0x77, 0x00, 0x7c, 0x7c, 0x0a, 0xa7, 0x9d, 0xb7, 0x57, 0x37, 0x01, 0x74, 0x92, 0xe3,
	0xd1, 0xb0, 0x3c, 0x84, 0x3d, 0x60, 0xbd, 0x55, 0xb3, 0xe8, 0x0e, 0xeb, 0xd1, 0x06, 0x96, 0x9d,
	0xfe, 0xd6, 0x2b, 0xd8, 0x93, 0x16, 0x02, 0x7e, 0x00, 0xe0, 0xbe, 0x64, 0x2b, 0x61, 0x19, 0xd9,
	0xcf, 0xf1, 0x5e, 0xbc, 0xd6, 0x97, 0x57, 0x18, 0x27, 0x57, 0xc3, 0x9f, 0xfa, 0xbe, 0x4c, 0x21,
	0xf5, 0xf7, 0xe2, 0xd3, 0x85, 0x0c, 0x9b, 0xd2, 0x0c, 0xbd, 0xf0, 0x3f, 0x27, 0x2b, 0xce, 0x6d,
	0x00, 0x8f, 0xc5, 0x95, 0xa0, 0xe1, 0xb3, 0x2d, 0xe4, 0x2f, 0x0d, 0x29, 0xda, 0x26, 0x9e, 0x8d,
	0xe5, 0x3e, 0x59, 0x45, 0x4d, 0xe3, 0xb4, 0xa7, 0x7b, 0x3e, 0x91, 0x11, 0xb6, 0x98, 0x4f, 0xbc,
	0x61, 0x0c, 0x68, 0xe3, 0x92, 0xef, 0x07, 0x00, 0x9f, 0xcc, 0x47, 0x7e, 0x57, 0x5e, 0xab, 0x92,
	0xe0, 0x06, 0x80, 0x7b, 0x6b, 0x42, 0x90, 0x1e, 0x4d, 0xf7, 0x23, 0x9a, 0x45, 0x5e, 0x31, 0x36,
	0x2c, 0xf2, 0x05, 0x8d, 0xfc, 0x6e, 0xe4, 0x91, 0x16, 0x67, 0x03, 0x22, 0x08, 0xcb, 0xf8, 0x34,
	0x3f, 0xcf, 0x28, 0xda, 0xa7, 0x88, 0x2b, 0xf3, 0xca, 0x28, 0x94, 0x9d, 0x21, 0xf5, 0xf2, 0x01,
	0xd7, 0xa5, 0x2c, 0xda, 0x1b, 0x52, 0x4e, 0xca, 0x28, 0x81, 0x3e, 0x8b, 0xbc, 0x57, 0x2f, 0x13,
	0x3f, 0x5e, 0x50, 0xeb, 0x06, 0x5a, 0x31, 0x36, 0x0c, 0x74, 0x41, 0x23, 0xbf, 0x5d, 0x3a, 0xb0,
	0xfc, 0x7a, 0x80, 0x68, 0x37, 0x99, 0xde, 0x16, 0x63, 0xbe, 0xa3, 0xe9, 0xfc, 0x84, 0x40, 0x0a,
	0xd9, 0x98, 0x5b, 0x47, 0x01, 0x4d, 0x4e, 0x63, 0xc9, 0xd5, 0x6c, 0x0b, 0xbf, 0xa2, 0x7b, 0x58,
	0x5a, 0x10, 0x30, 0x04, 0x9d, 0xa2, 0xa3, 0x24, 0xe5, 0x1a, 0xe9, 0x71, 0xe5, 0x33, 0x1a, 0xcd,
	0xa4, 0x2c, 0xda, 0x1b, 0x26, 0xe5, 0xa4, 0x4c, 0x46, 0xf9, 0x56, 0x72, 0xa3, 0x1c, 0x27, 0xa4,
	0xc1, 0x8d, 0xb2, 0x92, 0x8c, 0xa7, 0x8d, 0xed, 0x33, 0xa0, 0xaf, 0x01, 0x74, 0x36, 0x03, 0x81,
	0x79, 0x7a, 0xb8, 0x10, 0x93, 0x35, 0x74, 0xab, 0x6d, 0x51, 0x21, 0x45, 0x3c, 0x37, 0xbf, 0x90,
	0x12, 0xe2, 0xa8, 0x15, 0x45, 0xd2, 0x1d, 0x89, 0x64, 0x5f, 0xe8, 0x86, 0xb8, 0x68, 0x6f, 0x18,
	0xe2, 0x49, 0x19, 0xa5, 0xee, 0xb4, 0x7c, 0x44, 0x29, 0xe6, 0x4b, 0x7c, 0xd8, 0xee, 0x53, 0xdd,
	0xba, 0xa3, 0x18, 0x1b, 0xd6, 0x9d, 0x82, 0x46, 0x06, 0xf7, 0x1b, 0x80, 0x0b, 0x97, 0x90, 0x4f,
	0xa6, 0x6c, 0x26, 0xc3, 0x76, 0xed, 0x68, 0x5e, 0xa8, 0xcf, 0x90, 0x4a, 0xc1, 0x2f, 0x96, 0xa8,
	0x38, 0xe5, 0xee, 0xb9, 0x53, 0x5b, 0x5b, 0xad, 0x33, 0x4a, 0xb1, 0x27, 0x09, 0xa3, 0x66, 0x77,
	0xcf, 0xaa, 0xc6, 0x5c, 0x77, 0xcf, 0x45, 0xa9, 0x29, 0xc4, 0xe9, 0x21, 0x4f, 0xad, 0xd5, 0x3c,
	0x8f, 0x87, 0x66, 0xc4, 0xaa, 0xc6, 0x5c, 0xc4, 0x45, 0x29, 0xa5, 0x32, 0x34, 0x38, 0xa2, 0x72,
	0x39, 0xb8, 0x82, 0xb7, 0x31, 0x8f, 0x8f, 0xa5, 0x74, 0x2b, 0xc3, 0xa4, 0x82, 0x61, 0x65, 0x98,
	0x26, 0x94, 0xb1, 0xfe, 0x18, 0xae, 0xec, 0xd5, 0x07, 0x30, 0x8a, 0xee, 0xc0, 0x9c, 0xf3, 0x73,
	0x0d, 0x93, 0xa8, 0xa4, 0xcc, 0xab, 0xe5, 0x88, 0x29, 0x15, 0xad, 0xd6, 0xed, 0xd6, 0x84, 0xe4,
	0xa8, 0x8e, 0x02, 0xe4, 0x11, 0x39, 0xd4, 0xad, 0x68, 0x45, 0x7b, 0xc3, 0x8a, 0x36, 0x29, 0x93,
	0x51, 0xee, 0x00, 0x78, 0x42, 0x4d, 0x96, 0x36, 0xee, 0x11, 0x46, 0x91, 0x3f, 0xee, 0xb4, 0x1b,
	0xf3, 0xe4, 0xde, 0x84, 0x5c, 0xea, 0xc3, 0x66, 0xc9, 0xaa, 0x8a, 0x4b, 0xe1, 0xda, 0x71, 0x83,
	0x60, 0x8e, 0xbb, 0x1d, 0xc9, 0x38, 0xea, 0xe1, 0x55, 0x72, 0x19, 0x7b, 0x43, 0xcf, 0xc7, 0xed,
	0x7e, 0xd8, 0x03, 0x37, 0xf4, 0x97, 0xa2, 0x33, 0xe4, 0x0c, 0x5d, 0xfa, 0x4f, 0x55, 0xe5, 0x63,
	0xb5, 0x70, 0xbb, 0x1e, 0x97, 0x15, 0x4b, 0xf6, 0x88, 0xd7, 0x01, 0xdc, 0x13, 0x5d, 0xaf, 0x44,
	0x54, 0xda, 0xf7, 0xf4, 0x39, 0xd3, 0x72, 0x8f, 0xd3, 0xce, 0xbe, 0xb1, 0x73, 0xcf, 0xad, 0xdc,
	0xbd, 0xe7, 0x56, 0x1e, 0xdc, 0x73, 0xc1, 0x9b, 0x23, 0x17, 0xdc, 0x1e, 0xb9, 0xe0, 0x8f, 0x91,
	0x0b, 0x76, 0x46, 0x2e, 0xf8, 0x7b, 0xe4, 0x82, 0x7f, 0x46, 0x6e, 0xe5, 0xc1, 0xc8, 0x05, 0xd7,
	0xee, 0xbb, 0x95, 0x9d, 0xfb, 0x6e, 0xe5, 0xee, 0x7d, 0xb7, 0xf2, 0xe2, 0x39, 0xb9, 0x1d, 0x70,
	0xbf, 0xea, 0xf9, 0xac, 0xdf, 0x5d, 0xd4, 0xf9, 0xd0, 0xff, 0xb9, 0xc2, 0x9f, 0xb6, 0xfe, 0x17,
	0x7d, 0xe8, 0xff, 0xcc, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x85, 0xc0, 0xe8, 0x9f, 0x99, 0x30,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// InternalServiceClient is the client API for InternalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type InternalServiceClient interface {
	CreateNamespace(ctx context.Context, in *CreateNamespaceRequest, opts ...grpc.CallOption) (*CreateNamespaceResponse, error)
	ListNamespaces(ctx context.Context, in *ListResourcesRequest, opts ...grpc.CallOption) (*ListResourcesResponse, error)
	GetNamespace(ctx context.Context, in *GetResourceRequest, opts ...grpc.CallOption) (*GetResourceResponse, error)
	UpdateNamespace(ctx context.Context, in *UpdateResourceRequest, opts ...grpc.CallOption) (*UpdateResourceResponse, error)
	SyncNamespace(ctx context.Context, in *UpdateResourceRequest, opts ...grpc.CallOption) (*UpdateResourceResponse, error)
	DeleteNamespaceFromDatabase(ctx context.Context, in *UpdateResourceRequest, opts ...grpc.CallOption) (*UpdateResourceResponse, error)
	DeleteNamespace(ctx context.Context, in *UpdateResourceRequest, opts ...grpc.CallOption) (*UpdateResourceResponse, error)
	UpdateNamespaceOperatorSettings(ctx context.Context, in *UpdateResourceRequest, opts ...grpc.CallOption) (*UpdateResourceResponse, error)
	ListCells(ctx context.Context, in *ListResourcesRequest, opts ...grpc.CallOption) (*ListResourcesResponse, error)
	GetCell(ctx context.Context, in *GetResourceRequest, opts ...grpc.CallOption) (*GetResourceResponse, error)
	UpdateCell(ctx context.Context, in *UpdateResourceRequest, opts ...grpc.CallOption) (*UpdateResourceResponse, error)
	GetUser(ctx context.Context, in *GetResourceRequest, opts ...grpc.CallOption) (*GetResourceResponse, error)
	ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListResourcesResponse, error)
	// TODO: UpdateUser updates the existing user entity in the Control Plane Database.
	// This does not do any other operations (e.g. re-syncing OPA policies) yet.
	UpdateUser(ctx context.Context, in *UpdateResourceRequest, opts ...grpc.CallOption) (*UpdateResourceResponse, error)
	RollingUpdateTemporalCells(ctx context.Context, in *RollingUpdateTemporalCellsRequest, opts ...grpc.CallOption) (*RollingUpdateTemporalCellsResponse, error)
	CreateCell(ctx context.Context, in *CreateCellRequest, opts ...grpc.CallOption) (*CreateCellResponse, error)
	DeleteCell(ctx context.Context, in *DeleteCellRequest, opts ...grpc.CallOption) (*DeleteCellResponse, error)
	// CreateCellInDatabase enables an operator to directly insert a cell into the Control Plane Database.
	// This does not run any actual operations against any Cell.
	CreateCellInDatabase(ctx context.Context, in *CreateCellInDatabaseRequest, opts ...grpc.CallOption) (*CreateCellInDatabaseResponse, error)
	// DeleteCellInDatabase enables an operator to remove a cell from the Control Plane Database.
	// This does not actually delete any components of the cell; the Control Plane will just stop managing the cell
	DeleteCellInDatabase(ctx context.Context, in *UpdateResourceRequest, opts ...grpc.CallOption) (*UpdateResourceResponse, error)
	AllocateInitialFailoverVersion(ctx context.Context, in *AllocateInitialFailoverVersionRequest, opts ...grpc.CallOption) (*AllocateInitialFailoverVersionResponse, error)
	UpdateInitialFailoverVersion(ctx context.Context, in *UpdateInitialFailoverVersionRequest, opts ...grpc.CallOption) (*UpdateInitialFailoverVersionResponse, error)
	DeleteInitialFailoverVersion(ctx context.Context, in *DeleteInitialFailoverVersionRequest, opts ...grpc.CallOption) (*DeleteInitialFailoverVersionResponse, error)
	GetInitialFailoverVersion(ctx context.Context, in *GetInitialFailoverVersionRequest, opts ...grpc.CallOption) (*GetInitialFailoverVersionResponse, error)
	InviteUsers(ctx context.Context, in *InviteUsersRequest, opts ...grpc.CallOption) (*InviteUsersResponse, error)
	AddRolesToUser(ctx context.Context, in *AddRolesToUserRequest, opts ...grpc.CallOption) (*AddRolesToUserResponse, error)
	DeleteRolesFromUser(ctx context.Context, in *DeleteRolesFromUserRequest, opts ...grpc.CallOption) (*DeleteRolesFromUserResponse, error)
	GetRoleInDatabase(ctx context.Context, in *GetResourceRequest, opts ...grpc.CallOption) (*GetResourceResponse, error)
	UpdateRoleInDatabase(ctx context.Context, in *UpdateResourceRequest, opts ...grpc.CallOption) (*UpdateResourceResponse, error)
	DeleteRoleInDatabase(ctx context.Context, in *UpdateResourceRequest, opts ...grpc.CallOption) (*UpdateResourceResponse, error)
	CreateRoleInDatabase(ctx context.Context, in *UpdateResourceRequest, opts ...grpc.CallOption) (*UpdateResourceResponse, error)
	// GetEntityRequestMap returns the request map (map[string]rpc.RequestSignal) of an entity workflow that is
	// identified by its workflow id.
	GetEntityRequestMap(ctx context.Context, in *GetResourceRequest, opts ...grpc.CallOption) (*GetResourceResponse, error)
	GetAccount(ctx context.Context, in *GetResourceRequest, opts ...grpc.CallOption) (*GetResourceResponse, error)
	UpdateAccount(ctx context.Context, in *UpdateResourceRequest, opts ...grpc.CallOption) (*UpdateResourceResponse, error)
	ListAccountsInDatabase(ctx context.Context, in *ListResourcesRequest, opts ...grpc.CallOption) (*ListResourcesResponse, error)
	GetAccountFromDatabase(ctx context.Context, in *GetResourceRequest, opts ...grpc.CallOption) (*GetResourceResponse, error)
	UpdateAccountInDatabase(ctx context.Context, in *UpdateResourceRequest, opts ...grpc.CallOption) (*UpdateResourceResponse, error)
	SetInternalRolesForUser(ctx context.Context, in *SetInternalRolesForUserRequest, opts ...grpc.CallOption) (*SetInternalRolesForUserResponse, error)
	GetResourceManagerConfig(ctx context.Context, in *GetResourceRequest, opts ...grpc.CallOption) (*GetResourceResponse, error)
	UpdateResourceManagerConfig(ctx context.Context, in *UpdateResourceRequest, opts ...grpc.CallOption) (*UpdateResourceResponse, error)
	GetResourceManagerNamespace(ctx context.Context, in *GetResourceRequest, opts ...grpc.CallOption) (*GetResourceResponse, error)
	UpdateResourceManagerNamespace(ctx context.Context, in *UpdateResourceRequest, opts ...grpc.CallOption) (*UpdateResourceResponse, error)
	ListResourceManagerCells(ctx context.Context, in *ListResourcesRequest, opts ...grpc.CallOption) (*ListResourcesResponse, error)
	ListResourceManagerNamespaces(ctx context.Context, in *ListResourcesRequest, opts ...grpc.CallOption) (*ListResourcesResponse, error)
	GetUserRoleFromOPA(ctx context.Context, in *GetResourceRequest, opts ...grpc.CallOption) (*GetResourceResponse, error)
	GetSubjectRoleFromOPA(ctx context.Context, in *GetResourceRequest, opts ...grpc.CallOption) (*GetResourceResponse, error)
	GetRoleFromOPA(ctx context.Context, in *GetResourceRequest, opts ...grpc.CallOption) (*GetResourceResponse, error)
	GetAuthorizeResultFromOPA(ctx context.Context, in *GetAuthorizeResultFromOPARequest, opts ...grpc.CallOption) (*GetAuthorizeResultFromOPAResult, error)
	UpdateGlobalDynamicConfig(ctx context.Context, in *UpdateResourceRequest, opts ...grpc.CallOption) (*UpdateResourceResponse, error)
	GetGlobalDynamicConfig(ctx context.Context, in *GetResourceRequest, opts ...grpc.CallOption) (*GetResourceResponse, error)
	GetGlobalPolicyConfigFromDatabase(ctx context.Context, in *GetResourceRequest, opts ...grpc.CallOption) (*GetResourceResponse, error)
	UpdateGlobalPolicyConfigFromDatabase(ctx context.Context, in *UpdateResourceRequest, opts ...grpc.CallOption) (*UpdateResourceResponse, error)
	AssignAccount(ctx context.Context, in *AssignAccountRequest, opts ...grpc.CallOption) (*AssignAccountResponse, error)
	// AssignAccount + InviteUsers. Creating this separate API for support role.
	ProvisionAccount(ctx context.Context, in *ProvisionAccountRequest, opts ...grpc.CallOption) (*ProvisionAccountResponse, error)
	SyncPolicyConfig(ctx context.Context, in *SyncPolicyConfigRequest, opts ...grpc.CallOption) (*SyncPolicyConfigResponse, error)
	BackfillRoles(ctx context.Context, in *BackfillRolesRequest, opts ...grpc.CallOption) (*BackfillRolesResponse, error)
	ExpandAccountPool(ctx context.Context, in *ExpandAccountPoolRequest, opts ...grpc.CallOption) (*ExpandAccountPoolResponse, error)
	InitializeAccount(ctx context.Context, in *InitializeAccountRequest, opts ...grpc.CallOption) (*InitializeAccountResponse, error)
	MigrateNamespace(ctx context.Context, in *MigrateNamespaceRequest, opts ...grpc.CallOption) (*MigrateNamespaceResponse, error)
	ListRoles(ctx context.Context, in *ListRolesRequest, opts ...grpc.CallOption) (*ListRolesResponse, error)
	UpsertAccountRoles(ctx context.Context, in *UpsertAccountRolesRequest, opts ...grpc.CallOption) (*UpsertAccountRolesResponse, error)
	GetRequestStatus(ctx context.Context, in *GetRequestStatusRequest, opts ...grpc.CallOption) (*GetRequestStatusResponse, error)
	PlannerDryRun(ctx context.Context, in *PlannerDryRunRequest, opts ...grpc.CallOption) (*PlannerDryRunResponse, error)
	ValidateResourceManagerData(ctx context.Context, in *ValidateResourceManagerDataRequest, opts ...grpc.CallOption) (*ValidateResourceManagerDataResponse, error)
	CreateSAMLConnection(ctx context.Context, in *CreateSAMLConnectionRequest, opts ...grpc.CallOption) (*CreateSAMLConnectionResponse, error)
	CreateInternalAPIKey(ctx context.Context, in *CreateInternalAPIKeyRequest, opts ...grpc.CallOption) (*CreateInternalAPIKeyResponse, error)
	GrantEphemeralRole(ctx context.Context, in *GrantEphemeralRoleRequest, opts ...grpc.CallOption) (*GrantEphemeralRoleResponse, error)
	GrantEphemeralReadRole(ctx context.Context, in *GrantEphemeralReadRoleRequest, opts ...grpc.CallOption) (*GrantEphemeralReadRoleResponse, error)
	AddAstraCapacity(ctx context.Context, in *AddAstraCapacityRequest, opts ...grpc.CallOption) (*AddAstraCapacityResponse, error)
	CreateInternalRegionalNamespace(ctx context.Context, in *CreateInternalRegionalNamespaceRequest, opts ...grpc.CallOption) (*CreateInternalRegionalNamespaceResponse, error)
	SyncTieredStorageLifecycleRules(ctx context.Context, in *SyncTieredStorageLifecycleRulesRequest, opts ...grpc.CallOption) (*SyncTieredStorageLifecycleRulesResponse, error)
	GetAPIKey(ctx context.Context, in *GetResourceRequest, opts ...grpc.CallOption) (*GetResourceResponse, error)
	ListAPIKeys(ctx context.Context, in *ListAPIKeysRequest, opts ...grpc.CallOption) (*ListResourcesResponse, error)
}

type internalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInternalServiceClient(cc grpc.ClientConnInterface) InternalServiceClient {
	return &internalServiceClient{cc}
}

func (c *internalServiceClient) CreateNamespace(ctx context.Context, in *CreateNamespaceRequest, opts ...grpc.CallOption) (*CreateNamespaceResponse, error) {
	out := new(CreateNamespaceResponse)
	err := c.cc.Invoke(ctx, "/services.saasapi.operator.internalservice.v1.InternalService/CreateNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalServiceClient) ListNamespaces(ctx context.Context, in *ListResourcesRequest, opts ...grpc.CallOption) (*ListResourcesResponse, error) {
	out := new(ListResourcesResponse)
	err := c.cc.Invoke(ctx, "/services.saasapi.operator.internalservice.v1.InternalService/ListNamespaces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalServiceClient) GetNamespace(ctx context.Context, in *GetResourceRequest, opts ...grpc.CallOption) (*GetResourceResponse, error) {
	out := new(GetResourceResponse)
	err := c.cc.Invoke(ctx, "/services.saasapi.operator.internalservice.v1.InternalService/GetNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalServiceClient) UpdateNamespace(ctx context.Context, in *UpdateResourceRequest, opts ...grpc.CallOption) (*UpdateResourceResponse, error) {
	out := new(UpdateResourceResponse)
	err := c.cc.Invoke(ctx, "/services.saasapi.operator.internalservice.v1.InternalService/UpdateNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalServiceClient) SyncNamespace(ctx context.Context, in *UpdateResourceRequest, opts ...grpc.CallOption) (*UpdateResourceResponse, error) {
	out := new(UpdateResourceResponse)
	err := c.cc.Invoke(ctx, "/services.saasapi.operator.internalservice.v1.InternalService/SyncNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalServiceClient) DeleteNamespaceFromDatabase(ctx context.Context, in *UpdateResourceRequest, opts ...grpc.CallOption) (*UpdateResourceResponse, error) {
	out := new(UpdateResourceResponse)
	err := c.cc.Invoke(ctx, "/services.saasapi.operator.internalservice.v1.InternalService/DeleteNamespaceFromDatabase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalServiceClient) DeleteNamespace(ctx context.Context, in *UpdateResourceRequest, opts ...grpc.CallOption) (*UpdateResourceResponse, error) {
	out := new(UpdateResourceResponse)
	err := c.cc.Invoke(ctx, "/services.saasapi.operator.internalservice.v1.InternalService/DeleteNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalServiceClient) UpdateNamespaceOperatorSettings(ctx context.Context, in *UpdateResourceRequest, opts ...grpc.CallOption) (*UpdateResourceResponse, error) {
	out := new(UpdateResourceResponse)
	err := c.cc.Invoke(ctx, "/services.saasapi.operator.internalservice.v1.InternalService/UpdateNamespaceOperatorSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalServiceClient) ListCells(ctx context.Context, in *ListResourcesRequest, opts ...grpc.CallOption) (*ListResourcesResponse, error) {
	out := new(ListResourcesResponse)
	err := c.cc.Invoke(ctx, "/services.saasapi.operator.internalservice.v1.InternalService/ListCells", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalServiceClient) GetCell(ctx context.Context, in *GetResourceRequest, opts ...grpc.CallOption) (*GetResourceResponse, error) {
	out := new(GetResourceResponse)
	err := c.cc.Invoke(ctx, "/services.saasapi.operator.internalservice.v1.InternalService/GetCell", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalServiceClient) UpdateCell(ctx context.Context, in *UpdateResourceRequest, opts ...grpc.CallOption) (*UpdateResourceResponse, error) {
	out := new(UpdateResourceResponse)
	err := c.cc.Invoke(ctx, "/services.saasapi.operator.internalservice.v1.InternalService/UpdateCell", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalServiceClient) GetUser(ctx context.Context, in *GetResourceRequest, opts ...grpc.CallOption) (*GetResourceResponse, error) {
	out := new(GetResourceResponse)
	err := c.cc.Invoke(ctx, "/services.saasapi.operator.internalservice.v1.InternalService/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalServiceClient) ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListResourcesResponse, error) {
	out := new(ListResourcesResponse)
	err := c.cc.Invoke(ctx, "/services.saasapi.operator.internalservice.v1.InternalService/ListUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalServiceClient) UpdateUser(ctx context.Context, in *UpdateResourceRequest, opts ...grpc.CallOption) (*UpdateResourceResponse, error) {
	out := new(UpdateResourceResponse)
	err := c.cc.Invoke(ctx, "/services.saasapi.operator.internalservice.v1.InternalService/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalServiceClient) RollingUpdateTemporalCells(ctx context.Context, in *RollingUpdateTemporalCellsRequest, opts ...grpc.CallOption) (*RollingUpdateTemporalCellsResponse, error) {
	out := new(RollingUpdateTemporalCellsResponse)
	err := c.cc.Invoke(ctx, "/services.saasapi.operator.internalservice.v1.InternalService/RollingUpdateTemporalCells", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalServiceClient) CreateCell(ctx context.Context, in *CreateCellRequest, opts ...grpc.CallOption) (*CreateCellResponse, error) {
	out := new(CreateCellResponse)
	err := c.cc.Invoke(ctx, "/services.saasapi.operator.internalservice.v1.InternalService/CreateCell", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalServiceClient) DeleteCell(ctx context.Context, in *DeleteCellRequest, opts ...grpc.CallOption) (*DeleteCellResponse, error) {
	out := new(DeleteCellResponse)
	err := c.cc.Invoke(ctx, "/services.saasapi.operator.internalservice.v1.InternalService/DeleteCell", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalServiceClient) CreateCellInDatabase(ctx context.Context, in *CreateCellInDatabaseRequest, opts ...grpc.CallOption) (*CreateCellInDatabaseResponse, error) {
	out := new(CreateCellInDatabaseResponse)
	err := c.cc.Invoke(ctx, "/services.saasapi.operator.internalservice.v1.InternalService/CreateCellInDatabase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalServiceClient) DeleteCellInDatabase(ctx context.Context, in *UpdateResourceRequest, opts ...grpc.CallOption) (*UpdateResourceResponse, error) {
	out := new(UpdateResourceResponse)
	err := c.cc.Invoke(ctx, "/services.saasapi.operator.internalservice.v1.InternalService/DeleteCellInDatabase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalServiceClient) AllocateInitialFailoverVersion(ctx context.Context, in *AllocateInitialFailoverVersionRequest, opts ...grpc.CallOption) (*AllocateInitialFailoverVersionResponse, error) {
	out := new(AllocateInitialFailoverVersionResponse)
	err := c.cc.Invoke(ctx, "/services.saasapi.operator.internalservice.v1.InternalService/AllocateInitialFailoverVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalServiceClient) UpdateInitialFailoverVersion(ctx context.Context, in *UpdateInitialFailoverVersionRequest, opts ...grpc.CallOption) (*UpdateInitialFailoverVersionResponse, error) {
	out := new(UpdateInitialFailoverVersionResponse)
	err := c.cc.Invoke(ctx, "/services.saasapi.operator.internalservice.v1.InternalService/UpdateInitialFailoverVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalServiceClient) DeleteInitialFailoverVersion(ctx context.Context, in *DeleteInitialFailoverVersionRequest, opts ...grpc.CallOption) (*DeleteInitialFailoverVersionResponse, error) {
	out := new(DeleteInitialFailoverVersionResponse)
	err := c.cc.Invoke(ctx, "/services.saasapi.operator.internalservice.v1.InternalService/DeleteInitialFailoverVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalServiceClient) GetInitialFailoverVersion(ctx context.Context, in *GetInitialFailoverVersionRequest, opts ...grpc.CallOption) (*GetInitialFailoverVersionResponse, error) {
	out := new(GetInitialFailoverVersionResponse)
	err := c.cc.Invoke(ctx, "/services.saasapi.operator.internalservice.v1.InternalService/GetInitialFailoverVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalServiceClient) InviteUsers(ctx context.Context, in *InviteUsersRequest, opts ...grpc.CallOption) (*InviteUsersResponse, error) {
	out := new(InviteUsersResponse)
	err := c.cc.Invoke(ctx, "/services.saasapi.operator.internalservice.v1.InternalService/InviteUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalServiceClient) AddRolesToUser(ctx context.Context, in *AddRolesToUserRequest, opts ...grpc.CallOption) (*AddRolesToUserResponse, error) {
	out := new(AddRolesToUserResponse)
	err := c.cc.Invoke(ctx, "/services.saasapi.operator.internalservice.v1.InternalService/AddRolesToUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalServiceClient) DeleteRolesFromUser(ctx context.Context, in *DeleteRolesFromUserRequest, opts ...grpc.CallOption) (*DeleteRolesFromUserResponse, error) {
	out := new(DeleteRolesFromUserResponse)
	err := c.cc.Invoke(ctx, "/services.saasapi.operator.internalservice.v1.InternalService/DeleteRolesFromUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalServiceClient) GetRoleInDatabase(ctx context.Context, in *GetResourceRequest, opts ...grpc.CallOption) (*GetResourceResponse, error) {
	out := new(GetResourceResponse)
	err := c.cc.Invoke(ctx, "/services.saasapi.operator.internalservice.v1.InternalService/GetRoleInDatabase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalServiceClient) UpdateRoleInDatabase(ctx context.Context, in *UpdateResourceRequest, opts ...grpc.CallOption) (*UpdateResourceResponse, error) {
	out := new(UpdateResourceResponse)
	err := c.cc.Invoke(ctx, "/services.saasapi.operator.internalservice.v1.InternalService/UpdateRoleInDatabase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalServiceClient) DeleteRoleInDatabase(ctx context.Context, in *UpdateResourceRequest, opts ...grpc.CallOption) (*UpdateResourceResponse, error) {
	out := new(UpdateResourceResponse)
	err := c.cc.Invoke(ctx, "/services.saasapi.operator.internalservice.v1.InternalService/DeleteRoleInDatabase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalServiceClient) CreateRoleInDatabase(ctx context.Context, in *UpdateResourceRequest, opts ...grpc.CallOption) (*UpdateResourceResponse, error) {
	out := new(UpdateResourceResponse)
	err := c.cc.Invoke(ctx, "/services.saasapi.operator.internalservice.v1.InternalService/CreateRoleInDatabase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalServiceClient) GetEntityRequestMap(ctx context.Context, in *GetResourceRequest, opts ...grpc.CallOption) (*GetResourceResponse, error) {
	out := new(GetResourceResponse)
	err := c.cc.Invoke(ctx, "/services.saasapi.operator.internalservice.v1.InternalService/GetEntityRequestMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalServiceClient) GetAccount(ctx context.Context, in *GetResourceRequest, opts ...grpc.CallOption) (*GetResourceResponse, error) {
	out := new(GetResourceResponse)
	err := c.cc.Invoke(ctx, "/services.saasapi.operator.internalservice.v1.InternalService/GetAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalServiceClient) UpdateAccount(ctx context.Context, in *UpdateResourceRequest, opts ...grpc.CallOption) (*UpdateResourceResponse, error) {
	out := new(UpdateResourceResponse)
	err := c.cc.Invoke(ctx, "/services.saasapi.operator.internalservice.v1.InternalService/UpdateAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalServiceClient) ListAccountsInDatabase(ctx context.Context, in *ListResourcesRequest, opts ...grpc.CallOption) (*ListResourcesResponse, error) {
	out := new(ListResourcesResponse)
	err := c.cc.Invoke(ctx, "/services.saasapi.operator.internalservice.v1.InternalService/ListAccountsInDatabase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalServiceClient) GetAccountFromDatabase(ctx context.Context, in *GetResourceRequest, opts ...grpc.CallOption) (*GetResourceResponse, error) {
	out := new(GetResourceResponse)
	err := c.cc.Invoke(ctx, "/services.saasapi.operator.internalservice.v1.InternalService/GetAccountFromDatabase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalServiceClient) UpdateAccountInDatabase(ctx context.Context, in *UpdateResourceRequest, opts ...grpc.CallOption) (*UpdateResourceResponse, error) {
	out := new(UpdateResourceResponse)
	err := c.cc.Invoke(ctx, "/services.saasapi.operator.internalservice.v1.InternalService/UpdateAccountInDatabase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalServiceClient) SetInternalRolesForUser(ctx context.Context, in *SetInternalRolesForUserRequest, opts ...grpc.CallOption) (*SetInternalRolesForUserResponse, error) {
	out := new(SetInternalRolesForUserResponse)
	err := c.cc.Invoke(ctx, "/services.saasapi.operator.internalservice.v1.InternalService/SetInternalRolesForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalServiceClient) GetResourceManagerConfig(ctx context.Context, in *GetResourceRequest, opts ...grpc.CallOption) (*GetResourceResponse, error) {
	out := new(GetResourceResponse)
	err := c.cc.Invoke(ctx, "/services.saasapi.operator.internalservice.v1.InternalService/GetResourceManagerConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalServiceClient) UpdateResourceManagerConfig(ctx context.Context, in *UpdateResourceRequest, opts ...grpc.CallOption) (*UpdateResourceResponse, error) {
	out := new(UpdateResourceResponse)
	err := c.cc.Invoke(ctx, "/services.saasapi.operator.internalservice.v1.InternalService/UpdateResourceManagerConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalServiceClient) GetResourceManagerNamespace(ctx context.Context, in *GetResourceRequest, opts ...grpc.CallOption) (*GetResourceResponse, error) {
	out := new(GetResourceResponse)
	err := c.cc.Invoke(ctx, "/services.saasapi.operator.internalservice.v1.InternalService/GetResourceManagerNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalServiceClient) UpdateResourceManagerNamespace(ctx context.Context, in *UpdateResourceRequest, opts ...grpc.CallOption) (*UpdateResourceResponse, error) {
	out := new(UpdateResourceResponse)
	err := c.cc.Invoke(ctx, "/services.saasapi.operator.internalservice.v1.InternalService/UpdateResourceManagerNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalServiceClient) ListResourceManagerCells(ctx context.Context, in *ListResourcesRequest, opts ...grpc.CallOption) (*ListResourcesResponse, error) {
	out := new(ListResourcesResponse)
	err := c.cc.Invoke(ctx, "/services.saasapi.operator.internalservice.v1.InternalService/ListResourceManagerCells", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalServiceClient) ListResourceManagerNamespaces(ctx context.Context, in *ListResourcesRequest, opts ...grpc.CallOption) (*ListResourcesResponse, error) {
	out := new(ListResourcesResponse)
	err := c.cc.Invoke(ctx, "/services.saasapi.operator.internalservice.v1.InternalService/ListResourceManagerNamespaces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalServiceClient) GetUserRoleFromOPA(ctx context.Context, in *GetResourceRequest, opts ...grpc.CallOption) (*GetResourceResponse, error) {
	out := new(GetResourceResponse)
	err := c.cc.Invoke(ctx, "/services.saasapi.operator.internalservice.v1.InternalService/GetUserRoleFromOPA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalServiceClient) GetSubjectRoleFromOPA(ctx context.Context, in *GetResourceRequest, opts ...grpc.CallOption) (*GetResourceResponse, error) {
	out := new(GetResourceResponse)
	err := c.cc.Invoke(ctx, "/services.saasapi.operator.internalservice.v1.InternalService/GetSubjectRoleFromOPA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalServiceClient) GetRoleFromOPA(ctx context.Context, in *GetResourceRequest, opts ...grpc.CallOption) (*GetResourceResponse, error) {
	out := new(GetResourceResponse)
	err := c.cc.Invoke(ctx, "/services.saasapi.operator.internalservice.v1.InternalService/GetRoleFromOPA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalServiceClient) GetAuthorizeResultFromOPA(ctx context.Context, in *GetAuthorizeResultFromOPARequest, opts ...grpc.CallOption) (*GetAuthorizeResultFromOPAResult, error) {
	out := new(GetAuthorizeResultFromOPAResult)
	err := c.cc.Invoke(ctx, "/services.saasapi.operator.internalservice.v1.InternalService/GetAuthorizeResultFromOPA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalServiceClient) UpdateGlobalDynamicConfig(ctx context.Context, in *UpdateResourceRequest, opts ...grpc.CallOption) (*UpdateResourceResponse, error) {
	out := new(UpdateResourceResponse)
	err := c.cc.Invoke(ctx, "/services.saasapi.operator.internalservice.v1.InternalService/UpdateGlobalDynamicConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalServiceClient) GetGlobalDynamicConfig(ctx context.Context, in *GetResourceRequest, opts ...grpc.CallOption) (*GetResourceResponse, error) {
	out := new(GetResourceResponse)
	err := c.cc.Invoke(ctx, "/services.saasapi.operator.internalservice.v1.InternalService/GetGlobalDynamicConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalServiceClient) GetGlobalPolicyConfigFromDatabase(ctx context.Context, in *GetResourceRequest, opts ...grpc.CallOption) (*GetResourceResponse, error) {
	out := new(GetResourceResponse)
	err := c.cc.Invoke(ctx, "/services.saasapi.operator.internalservice.v1.InternalService/GetGlobalPolicyConfigFromDatabase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalServiceClient) UpdateGlobalPolicyConfigFromDatabase(ctx context.Context, in *UpdateResourceRequest, opts ...grpc.CallOption) (*UpdateResourceResponse, error) {
	out := new(UpdateResourceResponse)
	err := c.cc.Invoke(ctx, "/services.saasapi.operator.internalservice.v1.InternalService/UpdateGlobalPolicyConfigFromDatabase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalServiceClient) AssignAccount(ctx context.Context, in *AssignAccountRequest, opts ...grpc.CallOption) (*AssignAccountResponse, error) {
	out := new(AssignAccountResponse)
	err := c.cc.Invoke(ctx, "/services.saasapi.operator.internalservice.v1.InternalService/AssignAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalServiceClient) ProvisionAccount(ctx context.Context, in *ProvisionAccountRequest, opts ...grpc.CallOption) (*ProvisionAccountResponse, error) {
	out := new(ProvisionAccountResponse)
	err := c.cc.Invoke(ctx, "/services.saasapi.operator.internalservice.v1.InternalService/ProvisionAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalServiceClient) SyncPolicyConfig(ctx context.Context, in *SyncPolicyConfigRequest, opts ...grpc.CallOption) (*SyncPolicyConfigResponse, error) {
	out := new(SyncPolicyConfigResponse)
	err := c.cc.Invoke(ctx, "/services.saasapi.operator.internalservice.v1.InternalService/SyncPolicyConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalServiceClient) BackfillRoles(ctx context.Context, in *BackfillRolesRequest, opts ...grpc.CallOption) (*BackfillRolesResponse, error) {
	out := new(BackfillRolesResponse)
	err := c.cc.Invoke(ctx, "/services.saasapi.operator.internalservice.v1.InternalService/BackfillRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalServiceClient) ExpandAccountPool(ctx context.Context, in *ExpandAccountPoolRequest, opts ...grpc.CallOption) (*ExpandAccountPoolResponse, error) {
	out := new(ExpandAccountPoolResponse)
	err := c.cc.Invoke(ctx, "/services.saasapi.operator.internalservice.v1.InternalService/ExpandAccountPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalServiceClient) InitializeAccount(ctx context.Context, in *InitializeAccountRequest, opts ...grpc.CallOption) (*InitializeAccountResponse, error) {
	out := new(InitializeAccountResponse)
	err := c.cc.Invoke(ctx, "/services.saasapi.operator.internalservice.v1.InternalService/InitializeAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalServiceClient) MigrateNamespace(ctx context.Context, in *MigrateNamespaceRequest, opts ...grpc.CallOption) (*MigrateNamespaceResponse, error) {
	out := new(MigrateNamespaceResponse)
	err := c.cc.Invoke(ctx, "/services.saasapi.operator.internalservice.v1.InternalService/MigrateNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalServiceClient) ListRoles(ctx context.Context, in *ListRolesRequest, opts ...grpc.CallOption) (*ListRolesResponse, error) {
	out := new(ListRolesResponse)
	err := c.cc.Invoke(ctx, "/services.saasapi.operator.internalservice.v1.InternalService/ListRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalServiceClient) UpsertAccountRoles(ctx context.Context, in *UpsertAccountRolesRequest, opts ...grpc.CallOption) (*UpsertAccountRolesResponse, error) {
	out := new(UpsertAccountRolesResponse)
	err := c.cc.Invoke(ctx, "/services.saasapi.operator.internalservice.v1.InternalService/UpsertAccountRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalServiceClient) GetRequestStatus(ctx context.Context, in *GetRequestStatusRequest, opts ...grpc.CallOption) (*GetRequestStatusResponse, error) {
	out := new(GetRequestStatusResponse)
	err := c.cc.Invoke(ctx, "/services.saasapi.operator.internalservice.v1.InternalService/GetRequestStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalServiceClient) PlannerDryRun(ctx context.Context, in *PlannerDryRunRequest, opts ...grpc.CallOption) (*PlannerDryRunResponse, error) {
	out := new(PlannerDryRunResponse)
	err := c.cc.Invoke(ctx, "/services.saasapi.operator.internalservice.v1.InternalService/PlannerDryRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalServiceClient) ValidateResourceManagerData(ctx context.Context, in *ValidateResourceManagerDataRequest, opts ...grpc.CallOption) (*ValidateResourceManagerDataResponse, error) {
	out := new(ValidateResourceManagerDataResponse)
	err := c.cc.Invoke(ctx, "/services.saasapi.operator.internalservice.v1.InternalService/ValidateResourceManagerData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalServiceClient) CreateSAMLConnection(ctx context.Context, in *CreateSAMLConnectionRequest, opts ...grpc.CallOption) (*CreateSAMLConnectionResponse, error) {
	out := new(CreateSAMLConnectionResponse)
	err := c.cc.Invoke(ctx, "/services.saasapi.operator.internalservice.v1.InternalService/CreateSAMLConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalServiceClient) CreateInternalAPIKey(ctx context.Context, in *CreateInternalAPIKeyRequest, opts ...grpc.CallOption) (*CreateInternalAPIKeyResponse, error) {
	out := new(CreateInternalAPIKeyResponse)
	err := c.cc.Invoke(ctx, "/services.saasapi.operator.internalservice.v1.InternalService/CreateInternalAPIKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalServiceClient) GrantEphemeralRole(ctx context.Context, in *GrantEphemeralRoleRequest, opts ...grpc.CallOption) (*GrantEphemeralRoleResponse, error) {
	out := new(GrantEphemeralRoleResponse)
	err := c.cc.Invoke(ctx, "/services.saasapi.operator.internalservice.v1.InternalService/GrantEphemeralRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalServiceClient) GrantEphemeralReadRole(ctx context.Context, in *GrantEphemeralReadRoleRequest, opts ...grpc.CallOption) (*GrantEphemeralReadRoleResponse, error) {
	out := new(GrantEphemeralReadRoleResponse)
	err := c.cc.Invoke(ctx, "/services.saasapi.operator.internalservice.v1.InternalService/GrantEphemeralReadRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalServiceClient) AddAstraCapacity(ctx context.Context, in *AddAstraCapacityRequest, opts ...grpc.CallOption) (*AddAstraCapacityResponse, error) {
	out := new(AddAstraCapacityResponse)
	err := c.cc.Invoke(ctx, "/services.saasapi.operator.internalservice.v1.InternalService/AddAstraCapacity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalServiceClient) CreateInternalRegionalNamespace(ctx context.Context, in *CreateInternalRegionalNamespaceRequest, opts ...grpc.CallOption) (*CreateInternalRegionalNamespaceResponse, error) {
	out := new(CreateInternalRegionalNamespaceResponse)
	err := c.cc.Invoke(ctx, "/services.saasapi.operator.internalservice.v1.InternalService/CreateInternalRegionalNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalServiceClient) SyncTieredStorageLifecycleRules(ctx context.Context, in *SyncTieredStorageLifecycleRulesRequest, opts ...grpc.CallOption) (*SyncTieredStorageLifecycleRulesResponse, error) {
	out := new(SyncTieredStorageLifecycleRulesResponse)
	err := c.cc.Invoke(ctx, "/services.saasapi.operator.internalservice.v1.InternalService/SyncTieredStorageLifecycleRules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalServiceClient) GetAPIKey(ctx context.Context, in *GetResourceRequest, opts ...grpc.CallOption) (*GetResourceResponse, error) {
	out := new(GetResourceResponse)
	err := c.cc.Invoke(ctx, "/services.saasapi.operator.internalservice.v1.InternalService/GetAPIKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalServiceClient) ListAPIKeys(ctx context.Context, in *ListAPIKeysRequest, opts ...grpc.CallOption) (*ListResourcesResponse, error) {
	out := new(ListResourcesResponse)
	err := c.cc.Invoke(ctx, "/services.saasapi.operator.internalservice.v1.InternalService/ListAPIKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InternalServiceServer is the server API for InternalService service.
type InternalServiceServer interface {
	CreateNamespace(context.Context, *CreateNamespaceRequest) (*CreateNamespaceResponse, error)
	ListNamespaces(context.Context, *ListResourcesRequest) (*ListResourcesResponse, error)
	GetNamespace(context.Context, *GetResourceRequest) (*GetResourceResponse, error)
	UpdateNamespace(context.Context, *UpdateResourceRequest) (*UpdateResourceResponse, error)
	SyncNamespace(context.Context, *UpdateResourceRequest) (*UpdateResourceResponse, error)
	DeleteNamespaceFromDatabase(context.Context, *UpdateResourceRequest) (*UpdateResourceResponse, error)
	DeleteNamespace(context.Context, *UpdateResourceRequest) (*UpdateResourceResponse, error)
	UpdateNamespaceOperatorSettings(context.Context, *UpdateResourceRequest) (*UpdateResourceResponse, error)
	ListCells(context.Context, *ListResourcesRequest) (*ListResourcesResponse, error)
	GetCell(context.Context, *GetResourceRequest) (*GetResourceResponse, error)
	UpdateCell(context.Context, *UpdateResourceRequest) (*UpdateResourceResponse, error)
	GetUser(context.Context, *GetResourceRequest) (*GetResourceResponse, error)
	ListUsers(context.Context, *ListUsersRequest) (*ListResourcesResponse, error)
	// TODO: UpdateUser updates the existing user entity in the Control Plane Database.
	// This does not do any other operations (e.g. re-syncing OPA policies) yet.
	UpdateUser(context.Context, *UpdateResourceRequest) (*UpdateResourceResponse, error)
	RollingUpdateTemporalCells(context.Context, *RollingUpdateTemporalCellsRequest) (*RollingUpdateTemporalCellsResponse, error)
	CreateCell(context.Context, *CreateCellRequest) (*CreateCellResponse, error)
	DeleteCell(context.Context, *DeleteCellRequest) (*DeleteCellResponse, error)
	// CreateCellInDatabase enables an operator to directly insert a cell into the Control Plane Database.
	// This does not run any actual operations against any Cell.
	CreateCellInDatabase(context.Context, *CreateCellInDatabaseRequest) (*CreateCellInDatabaseResponse, error)
	// DeleteCellInDatabase enables an operator to remove a cell from the Control Plane Database.
	// This does not actually delete any components of the cell; the Control Plane will just stop managing the cell
	DeleteCellInDatabase(context.Context, *UpdateResourceRequest) (*UpdateResourceResponse, error)
	AllocateInitialFailoverVersion(context.Context, *AllocateInitialFailoverVersionRequest) (*AllocateInitialFailoverVersionResponse, error)
	UpdateInitialFailoverVersion(context.Context, *UpdateInitialFailoverVersionRequest) (*UpdateInitialFailoverVersionResponse, error)
	DeleteInitialFailoverVersion(context.Context, *DeleteInitialFailoverVersionRequest) (*DeleteInitialFailoverVersionResponse, error)
	GetInitialFailoverVersion(context.Context, *GetInitialFailoverVersionRequest) (*GetInitialFailoverVersionResponse, error)
	InviteUsers(context.Context, *InviteUsersRequest) (*InviteUsersResponse, error)
	AddRolesToUser(context.Context, *AddRolesToUserRequest) (*AddRolesToUserResponse, error)
	DeleteRolesFromUser(context.Context, *DeleteRolesFromUserRequest) (*DeleteRolesFromUserResponse, error)
	GetRoleInDatabase(context.Context, *GetResourceRequest) (*GetResourceResponse, error)
	UpdateRoleInDatabase(context.Context, *UpdateResourceRequest) (*UpdateResourceResponse, error)
	DeleteRoleInDatabase(context.Context, *UpdateResourceRequest) (*UpdateResourceResponse, error)
	CreateRoleInDatabase(context.Context, *UpdateResourceRequest) (*UpdateResourceResponse, error)
	// GetEntityRequestMap returns the request map (map[string]rpc.RequestSignal) of an entity workflow that is
	// identified by its workflow id.
	GetEntityRequestMap(context.Context, *GetResourceRequest) (*GetResourceResponse, error)
	GetAccount(context.Context, *GetResourceRequest) (*GetResourceResponse, error)
	UpdateAccount(context.Context, *UpdateResourceRequest) (*UpdateResourceResponse, error)
	ListAccountsInDatabase(context.Context, *ListResourcesRequest) (*ListResourcesResponse, error)
	GetAccountFromDatabase(context.Context, *GetResourceRequest) (*GetResourceResponse, error)
	UpdateAccountInDatabase(context.Context, *UpdateResourceRequest) (*UpdateResourceResponse, error)
	SetInternalRolesForUser(context.Context, *SetInternalRolesForUserRequest) (*SetInternalRolesForUserResponse, error)
	GetResourceManagerConfig(context.Context, *GetResourceRequest) (*GetResourceResponse, error)
	UpdateResourceManagerConfig(context.Context, *UpdateResourceRequest) (*UpdateResourceResponse, error)
	GetResourceManagerNamespace(context.Context, *GetResourceRequest) (*GetResourceResponse, error)
	UpdateResourceManagerNamespace(context.Context, *UpdateResourceRequest) (*UpdateResourceResponse, error)
	ListResourceManagerCells(context.Context, *ListResourcesRequest) (*ListResourcesResponse, error)
	ListResourceManagerNamespaces(context.Context, *ListResourcesRequest) (*ListResourcesResponse, error)
	GetUserRoleFromOPA(context.Context, *GetResourceRequest) (*GetResourceResponse, error)
	GetSubjectRoleFromOPA(context.Context, *GetResourceRequest) (*GetResourceResponse, error)
	GetRoleFromOPA(context.Context, *GetResourceRequest) (*GetResourceResponse, error)
	GetAuthorizeResultFromOPA(context.Context, *GetAuthorizeResultFromOPARequest) (*GetAuthorizeResultFromOPAResult, error)
	UpdateGlobalDynamicConfig(context.Context, *UpdateResourceRequest) (*UpdateResourceResponse, error)
	GetGlobalDynamicConfig(context.Context, *GetResourceRequest) (*GetResourceResponse, error)
	GetGlobalPolicyConfigFromDatabase(context.Context, *GetResourceRequest) (*GetResourceResponse, error)
	UpdateGlobalPolicyConfigFromDatabase(context.Context, *UpdateResourceRequest) (*UpdateResourceResponse, error)
	AssignAccount(context.Context, *AssignAccountRequest) (*AssignAccountResponse, error)
	// AssignAccount + InviteUsers. Creating this separate API for support role.
	ProvisionAccount(context.Context, *ProvisionAccountRequest) (*ProvisionAccountResponse, error)
	SyncPolicyConfig(context.Context, *SyncPolicyConfigRequest) (*SyncPolicyConfigResponse, error)
	BackfillRoles(context.Context, *BackfillRolesRequest) (*BackfillRolesResponse, error)
	ExpandAccountPool(context.Context, *ExpandAccountPoolRequest) (*ExpandAccountPoolResponse, error)
	InitializeAccount(context.Context, *InitializeAccountRequest) (*InitializeAccountResponse, error)
	MigrateNamespace(context.Context, *MigrateNamespaceRequest) (*MigrateNamespaceResponse, error)
	ListRoles(context.Context, *ListRolesRequest) (*ListRolesResponse, error)
	UpsertAccountRoles(context.Context, *UpsertAccountRolesRequest) (*UpsertAccountRolesResponse, error)
	GetRequestStatus(context.Context, *GetRequestStatusRequest) (*GetRequestStatusResponse, error)
	PlannerDryRun(context.Context, *PlannerDryRunRequest) (*PlannerDryRunResponse, error)
	ValidateResourceManagerData(context.Context, *ValidateResourceManagerDataRequest) (*ValidateResourceManagerDataResponse, error)
	CreateSAMLConnection(context.Context, *CreateSAMLConnectionRequest) (*CreateSAMLConnectionResponse, error)
	CreateInternalAPIKey(context.Context, *CreateInternalAPIKeyRequest) (*CreateInternalAPIKeyResponse, error)
	GrantEphemeralRole(context.Context, *GrantEphemeralRoleRequest) (*GrantEphemeralRoleResponse, error)
	GrantEphemeralReadRole(context.Context, *GrantEphemeralReadRoleRequest) (*GrantEphemeralReadRoleResponse, error)
	AddAstraCapacity(context.Context, *AddAstraCapacityRequest) (*AddAstraCapacityResponse, error)
	CreateInternalRegionalNamespace(context.Context, *CreateInternalRegionalNamespaceRequest) (*CreateInternalRegionalNamespaceResponse, error)
	SyncTieredStorageLifecycleRules(context.Context, *SyncTieredStorageLifecycleRulesRequest) (*SyncTieredStorageLifecycleRulesResponse, error)
	GetAPIKey(context.Context, *GetResourceRequest) (*GetResourceResponse, error)
	ListAPIKeys(context.Context, *ListAPIKeysRequest) (*ListResourcesResponse, error)
}

// UnimplementedInternalServiceServer can be embedded to have forward compatible implementations.
type UnimplementedInternalServiceServer struct {
}

func (*UnimplementedInternalServiceServer) CreateNamespace(ctx context.Context, req *CreateNamespaceRequest) (*CreateNamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNamespace not implemented")
}
func (*UnimplementedInternalServiceServer) ListNamespaces(ctx context.Context, req *ListResourcesRequest) (*ListResourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNamespaces not implemented")
}
func (*UnimplementedInternalServiceServer) GetNamespace(ctx context.Context, req *GetResourceRequest) (*GetResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNamespace not implemented")
}
func (*UnimplementedInternalServiceServer) UpdateNamespace(ctx context.Context, req *UpdateResourceRequest) (*UpdateResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNamespace not implemented")
}
func (*UnimplementedInternalServiceServer) SyncNamespace(ctx context.Context, req *UpdateResourceRequest) (*UpdateResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncNamespace not implemented")
}
func (*UnimplementedInternalServiceServer) DeleteNamespaceFromDatabase(ctx context.Context, req *UpdateResourceRequest) (*UpdateResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNamespaceFromDatabase not implemented")
}
func (*UnimplementedInternalServiceServer) DeleteNamespace(ctx context.Context, req *UpdateResourceRequest) (*UpdateResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNamespace not implemented")
}
func (*UnimplementedInternalServiceServer) UpdateNamespaceOperatorSettings(ctx context.Context, req *UpdateResourceRequest) (*UpdateResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNamespaceOperatorSettings not implemented")
}
func (*UnimplementedInternalServiceServer) ListCells(ctx context.Context, req *ListResourcesRequest) (*ListResourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCells not implemented")
}
func (*UnimplementedInternalServiceServer) GetCell(ctx context.Context, req *GetResourceRequest) (*GetResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCell not implemented")
}
func (*UnimplementedInternalServiceServer) UpdateCell(ctx context.Context, req *UpdateResourceRequest) (*UpdateResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCell not implemented")
}
func (*UnimplementedInternalServiceServer) GetUser(ctx context.Context, req *GetResourceRequest) (*GetResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (*UnimplementedInternalServiceServer) ListUsers(ctx context.Context, req *ListUsersRequest) (*ListResourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (*UnimplementedInternalServiceServer) UpdateUser(ctx context.Context, req *UpdateResourceRequest) (*UpdateResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (*UnimplementedInternalServiceServer) RollingUpdateTemporalCells(ctx context.Context, req *RollingUpdateTemporalCellsRequest) (*RollingUpdateTemporalCellsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RollingUpdateTemporalCells not implemented")
}
func (*UnimplementedInternalServiceServer) CreateCell(ctx context.Context, req *CreateCellRequest) (*CreateCellResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCell not implemented")
}
func (*UnimplementedInternalServiceServer) DeleteCell(ctx context.Context, req *DeleteCellRequest) (*DeleteCellResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCell not implemented")
}
func (*UnimplementedInternalServiceServer) CreateCellInDatabase(ctx context.Context, req *CreateCellInDatabaseRequest) (*CreateCellInDatabaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCellInDatabase not implemented")
}
func (*UnimplementedInternalServiceServer) DeleteCellInDatabase(ctx context.Context, req *UpdateResourceRequest) (*UpdateResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCellInDatabase not implemented")
}
func (*UnimplementedInternalServiceServer) AllocateInitialFailoverVersion(ctx context.Context, req *AllocateInitialFailoverVersionRequest) (*AllocateInitialFailoverVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllocateInitialFailoverVersion not implemented")
}
func (*UnimplementedInternalServiceServer) UpdateInitialFailoverVersion(ctx context.Context, req *UpdateInitialFailoverVersionRequest) (*UpdateInitialFailoverVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInitialFailoverVersion not implemented")
}
func (*UnimplementedInternalServiceServer) DeleteInitialFailoverVersion(ctx context.Context, req *DeleteInitialFailoverVersionRequest) (*DeleteInitialFailoverVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteInitialFailoverVersion not implemented")
}
func (*UnimplementedInternalServiceServer) GetInitialFailoverVersion(ctx context.Context, req *GetInitialFailoverVersionRequest) (*GetInitialFailoverVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInitialFailoverVersion not implemented")
}
func (*UnimplementedInternalServiceServer) InviteUsers(ctx context.Context, req *InviteUsersRequest) (*InviteUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InviteUsers not implemented")
}
func (*UnimplementedInternalServiceServer) AddRolesToUser(ctx context.Context, req *AddRolesToUserRequest) (*AddRolesToUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRolesToUser not implemented")
}
func (*UnimplementedInternalServiceServer) DeleteRolesFromUser(ctx context.Context, req *DeleteRolesFromUserRequest) (*DeleteRolesFromUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRolesFromUser not implemented")
}
func (*UnimplementedInternalServiceServer) GetRoleInDatabase(ctx context.Context, req *GetResourceRequest) (*GetResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoleInDatabase not implemented")
}
func (*UnimplementedInternalServiceServer) UpdateRoleInDatabase(ctx context.Context, req *UpdateResourceRequest) (*UpdateResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRoleInDatabase not implemented")
}
func (*UnimplementedInternalServiceServer) DeleteRoleInDatabase(ctx context.Context, req *UpdateResourceRequest) (*UpdateResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRoleInDatabase not implemented")
}
func (*UnimplementedInternalServiceServer) CreateRoleInDatabase(ctx context.Context, req *UpdateResourceRequest) (*UpdateResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRoleInDatabase not implemented")
}
func (*UnimplementedInternalServiceServer) GetEntityRequestMap(ctx context.Context, req *GetResourceRequest) (*GetResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntityRequestMap not implemented")
}
func (*UnimplementedInternalServiceServer) GetAccount(ctx context.Context, req *GetResourceRequest) (*GetResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccount not implemented")
}
func (*UnimplementedInternalServiceServer) UpdateAccount(ctx context.Context, req *UpdateResourceRequest) (*UpdateResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccount not implemented")
}
func (*UnimplementedInternalServiceServer) ListAccountsInDatabase(ctx context.Context, req *ListResourcesRequest) (*ListResourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAccountsInDatabase not implemented")
}
func (*UnimplementedInternalServiceServer) GetAccountFromDatabase(ctx context.Context, req *GetResourceRequest) (*GetResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountFromDatabase not implemented")
}
func (*UnimplementedInternalServiceServer) UpdateAccountInDatabase(ctx context.Context, req *UpdateResourceRequest) (*UpdateResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccountInDatabase not implemented")
}
func (*UnimplementedInternalServiceServer) SetInternalRolesForUser(ctx context.Context, req *SetInternalRolesForUserRequest) (*SetInternalRolesForUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetInternalRolesForUser not implemented")
}
func (*UnimplementedInternalServiceServer) GetResourceManagerConfig(ctx context.Context, req *GetResourceRequest) (*GetResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResourceManagerConfig not implemented")
}
func (*UnimplementedInternalServiceServer) UpdateResourceManagerConfig(ctx context.Context, req *UpdateResourceRequest) (*UpdateResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateResourceManagerConfig not implemented")
}
func (*UnimplementedInternalServiceServer) GetResourceManagerNamespace(ctx context.Context, req *GetResourceRequest) (*GetResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResourceManagerNamespace not implemented")
}
func (*UnimplementedInternalServiceServer) UpdateResourceManagerNamespace(ctx context.Context, req *UpdateResourceRequest) (*UpdateResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateResourceManagerNamespace not implemented")
}
func (*UnimplementedInternalServiceServer) ListResourceManagerCells(ctx context.Context, req *ListResourcesRequest) (*ListResourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListResourceManagerCells not implemented")
}
func (*UnimplementedInternalServiceServer) ListResourceManagerNamespaces(ctx context.Context, req *ListResourcesRequest) (*ListResourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListResourceManagerNamespaces not implemented")
}
func (*UnimplementedInternalServiceServer) GetUserRoleFromOPA(ctx context.Context, req *GetResourceRequest) (*GetResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserRoleFromOPA not implemented")
}
func (*UnimplementedInternalServiceServer) GetSubjectRoleFromOPA(ctx context.Context, req *GetResourceRequest) (*GetResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubjectRoleFromOPA not implemented")
}
func (*UnimplementedInternalServiceServer) GetRoleFromOPA(ctx context.Context, req *GetResourceRequest) (*GetResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoleFromOPA not implemented")
}
func (*UnimplementedInternalServiceServer) GetAuthorizeResultFromOPA(ctx context.Context, req *GetAuthorizeResultFromOPARequest) (*GetAuthorizeResultFromOPAResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthorizeResultFromOPA not implemented")
}
func (*UnimplementedInternalServiceServer) UpdateGlobalDynamicConfig(ctx context.Context, req *UpdateResourceRequest) (*UpdateResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGlobalDynamicConfig not implemented")
}
func (*UnimplementedInternalServiceServer) GetGlobalDynamicConfig(ctx context.Context, req *GetResourceRequest) (*GetResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGlobalDynamicConfig not implemented")
}
func (*UnimplementedInternalServiceServer) GetGlobalPolicyConfigFromDatabase(ctx context.Context, req *GetResourceRequest) (*GetResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGlobalPolicyConfigFromDatabase not implemented")
}
func (*UnimplementedInternalServiceServer) UpdateGlobalPolicyConfigFromDatabase(ctx context.Context, req *UpdateResourceRequest) (*UpdateResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGlobalPolicyConfigFromDatabase not implemented")
}
func (*UnimplementedInternalServiceServer) AssignAccount(ctx context.Context, req *AssignAccountRequest) (*AssignAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignAccount not implemented")
}
func (*UnimplementedInternalServiceServer) ProvisionAccount(ctx context.Context, req *ProvisionAccountRequest) (*ProvisionAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProvisionAccount not implemented")
}
func (*UnimplementedInternalServiceServer) SyncPolicyConfig(ctx context.Context, req *SyncPolicyConfigRequest) (*SyncPolicyConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncPolicyConfig not implemented")
}
func (*UnimplementedInternalServiceServer) BackfillRoles(ctx context.Context, req *BackfillRolesRequest) (*BackfillRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BackfillRoles not implemented")
}
func (*UnimplementedInternalServiceServer) ExpandAccountPool(ctx context.Context, req *ExpandAccountPoolRequest) (*ExpandAccountPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExpandAccountPool not implemented")
}
func (*UnimplementedInternalServiceServer) InitializeAccount(ctx context.Context, req *InitializeAccountRequest) (*InitializeAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitializeAccount not implemented")
}
func (*UnimplementedInternalServiceServer) MigrateNamespace(ctx context.Context, req *MigrateNamespaceRequest) (*MigrateNamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MigrateNamespace not implemented")
}
func (*UnimplementedInternalServiceServer) ListRoles(ctx context.Context, req *ListRolesRequest) (*ListRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRoles not implemented")
}
func (*UnimplementedInternalServiceServer) UpsertAccountRoles(ctx context.Context, req *UpsertAccountRolesRequest) (*UpsertAccountRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertAccountRoles not implemented")
}
func (*UnimplementedInternalServiceServer) GetRequestStatus(ctx context.Context, req *GetRequestStatusRequest) (*GetRequestStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRequestStatus not implemented")
}
func (*UnimplementedInternalServiceServer) PlannerDryRun(ctx context.Context, req *PlannerDryRunRequest) (*PlannerDryRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlannerDryRun not implemented")
}
func (*UnimplementedInternalServiceServer) ValidateResourceManagerData(ctx context.Context, req *ValidateResourceManagerDataRequest) (*ValidateResourceManagerDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateResourceManagerData not implemented")
}
func (*UnimplementedInternalServiceServer) CreateSAMLConnection(ctx context.Context, req *CreateSAMLConnectionRequest) (*CreateSAMLConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSAMLConnection not implemented")
}
func (*UnimplementedInternalServiceServer) CreateInternalAPIKey(ctx context.Context, req *CreateInternalAPIKeyRequest) (*CreateInternalAPIKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInternalAPIKey not implemented")
}
func (*UnimplementedInternalServiceServer) GrantEphemeralRole(ctx context.Context, req *GrantEphemeralRoleRequest) (*GrantEphemeralRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GrantEphemeralRole not implemented")
}
func (*UnimplementedInternalServiceServer) GrantEphemeralReadRole(ctx context.Context, req *GrantEphemeralReadRoleRequest) (*GrantEphemeralReadRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GrantEphemeralReadRole not implemented")
}
func (*UnimplementedInternalServiceServer) AddAstraCapacity(ctx context.Context, req *AddAstraCapacityRequest) (*AddAstraCapacityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAstraCapacity not implemented")
}
func (*UnimplementedInternalServiceServer) CreateInternalRegionalNamespace(ctx context.Context, req *CreateInternalRegionalNamespaceRequest) (*CreateInternalRegionalNamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInternalRegionalNamespace not implemented")
}
func (*UnimplementedInternalServiceServer) SyncTieredStorageLifecycleRules(ctx context.Context, req *SyncTieredStorageLifecycleRulesRequest) (*SyncTieredStorageLifecycleRulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncTieredStorageLifecycleRules not implemented")
}
func (*UnimplementedInternalServiceServer) GetAPIKey(ctx context.Context, req *GetResourceRequest) (*GetResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAPIKey not implemented")
}
func (*UnimplementedInternalServiceServer) ListAPIKeys(ctx context.Context, req *ListAPIKeysRequest) (*ListResourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAPIKeys not implemented")
}

func RegisterInternalServiceServer(s *grpc.Server, srv InternalServiceServer) {
	s.RegisterService(&_InternalService_serviceDesc, srv)
}

func _InternalService_CreateNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServiceServer).CreateNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.saasapi.operator.internalservice.v1.InternalService/CreateNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServiceServer).CreateNamespace(ctx, req.(*CreateNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalService_ListNamespaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServiceServer).ListNamespaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.saasapi.operator.internalservice.v1.InternalService/ListNamespaces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServiceServer).ListNamespaces(ctx, req.(*ListResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalService_GetNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServiceServer).GetNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.saasapi.operator.internalservice.v1.InternalService/GetNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServiceServer).GetNamespace(ctx, req.(*GetResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalService_UpdateNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServiceServer).UpdateNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.saasapi.operator.internalservice.v1.InternalService/UpdateNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServiceServer).UpdateNamespace(ctx, req.(*UpdateResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalService_SyncNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServiceServer).SyncNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.saasapi.operator.internalservice.v1.InternalService/SyncNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServiceServer).SyncNamespace(ctx, req.(*UpdateResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalService_DeleteNamespaceFromDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServiceServer).DeleteNamespaceFromDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.saasapi.operator.internalservice.v1.InternalService/DeleteNamespaceFromDatabase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServiceServer).DeleteNamespaceFromDatabase(ctx, req.(*UpdateResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalService_DeleteNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServiceServer).DeleteNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.saasapi.operator.internalservice.v1.InternalService/DeleteNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServiceServer).DeleteNamespace(ctx, req.(*UpdateResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalService_UpdateNamespaceOperatorSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServiceServer).UpdateNamespaceOperatorSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.saasapi.operator.internalservice.v1.InternalService/UpdateNamespaceOperatorSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServiceServer).UpdateNamespaceOperatorSettings(ctx, req.(*UpdateResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalService_ListCells_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServiceServer).ListCells(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.saasapi.operator.internalservice.v1.InternalService/ListCells",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServiceServer).ListCells(ctx, req.(*ListResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalService_GetCell_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServiceServer).GetCell(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.saasapi.operator.internalservice.v1.InternalService/GetCell",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServiceServer).GetCell(ctx, req.(*GetResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalService_UpdateCell_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServiceServer).UpdateCell(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.saasapi.operator.internalservice.v1.InternalService/UpdateCell",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServiceServer).UpdateCell(ctx, req.(*UpdateResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.saasapi.operator.internalservice.v1.InternalService/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServiceServer).GetUser(ctx, req.(*GetResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalService_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServiceServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.saasapi.operator.internalservice.v1.InternalService/ListUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServiceServer).ListUsers(ctx, req.(*ListUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.saasapi.operator.internalservice.v1.InternalService/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServiceServer).UpdateUser(ctx, req.(*UpdateResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalService_RollingUpdateTemporalCells_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RollingUpdateTemporalCellsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServiceServer).RollingUpdateTemporalCells(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.saasapi.operator.internalservice.v1.InternalService/RollingUpdateTemporalCells",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServiceServer).RollingUpdateTemporalCells(ctx, req.(*RollingUpdateTemporalCellsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalService_CreateCell_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCellRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServiceServer).CreateCell(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.saasapi.operator.internalservice.v1.InternalService/CreateCell",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServiceServer).CreateCell(ctx, req.(*CreateCellRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalService_DeleteCell_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCellRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServiceServer).DeleteCell(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.saasapi.operator.internalservice.v1.InternalService/DeleteCell",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServiceServer).DeleteCell(ctx, req.(*DeleteCellRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalService_CreateCellInDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCellInDatabaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServiceServer).CreateCellInDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.saasapi.operator.internalservice.v1.InternalService/CreateCellInDatabase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServiceServer).CreateCellInDatabase(ctx, req.(*CreateCellInDatabaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalService_DeleteCellInDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServiceServer).DeleteCellInDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.saasapi.operator.internalservice.v1.InternalService/DeleteCellInDatabase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServiceServer).DeleteCellInDatabase(ctx, req.(*UpdateResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalService_AllocateInitialFailoverVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllocateInitialFailoverVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServiceServer).AllocateInitialFailoverVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.saasapi.operator.internalservice.v1.InternalService/AllocateInitialFailoverVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServiceServer).AllocateInitialFailoverVersion(ctx, req.(*AllocateInitialFailoverVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalService_UpdateInitialFailoverVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInitialFailoverVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServiceServer).UpdateInitialFailoverVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.saasapi.operator.internalservice.v1.InternalService/UpdateInitialFailoverVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServiceServer).UpdateInitialFailoverVersion(ctx, req.(*UpdateInitialFailoverVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalService_DeleteInitialFailoverVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteInitialFailoverVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServiceServer).DeleteInitialFailoverVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.saasapi.operator.internalservice.v1.InternalService/DeleteInitialFailoverVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServiceServer).DeleteInitialFailoverVersion(ctx, req.(*DeleteInitialFailoverVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalService_GetInitialFailoverVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInitialFailoverVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServiceServer).GetInitialFailoverVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.saasapi.operator.internalservice.v1.InternalService/GetInitialFailoverVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServiceServer).GetInitialFailoverVersion(ctx, req.(*GetInitialFailoverVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalService_InviteUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServiceServer).InviteUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.saasapi.operator.internalservice.v1.InternalService/InviteUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServiceServer).InviteUsers(ctx, req.(*InviteUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalService_AddRolesToUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRolesToUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServiceServer).AddRolesToUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.saasapi.operator.internalservice.v1.InternalService/AddRolesToUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServiceServer).AddRolesToUser(ctx, req.(*AddRolesToUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalService_DeleteRolesFromUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRolesFromUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServiceServer).DeleteRolesFromUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.saasapi.operator.internalservice.v1.InternalService/DeleteRolesFromUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServiceServer).DeleteRolesFromUser(ctx, req.(*DeleteRolesFromUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalService_GetRoleInDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServiceServer).GetRoleInDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.saasapi.operator.internalservice.v1.InternalService/GetRoleInDatabase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServiceServer).GetRoleInDatabase(ctx, req.(*GetResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalService_UpdateRoleInDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServiceServer).UpdateRoleInDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.saasapi.operator.internalservice.v1.InternalService/UpdateRoleInDatabase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServiceServer).UpdateRoleInDatabase(ctx, req.(*UpdateResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalService_DeleteRoleInDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServiceServer).DeleteRoleInDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.saasapi.operator.internalservice.v1.InternalService/DeleteRoleInDatabase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServiceServer).DeleteRoleInDatabase(ctx, req.(*UpdateResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalService_CreateRoleInDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServiceServer).CreateRoleInDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.saasapi.operator.internalservice.v1.InternalService/CreateRoleInDatabase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServiceServer).CreateRoleInDatabase(ctx, req.(*UpdateResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalService_GetEntityRequestMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServiceServer).GetEntityRequestMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.saasapi.operator.internalservice.v1.InternalService/GetEntityRequestMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServiceServer).GetEntityRequestMap(ctx, req.(*GetResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalService_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServiceServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.saasapi.operator.internalservice.v1.InternalService/GetAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServiceServer).GetAccount(ctx, req.(*GetResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalService_UpdateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServiceServer).UpdateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.saasapi.operator.internalservice.v1.InternalService/UpdateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServiceServer).UpdateAccount(ctx, req.(*UpdateResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalService_ListAccountsInDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServiceServer).ListAccountsInDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.saasapi.operator.internalservice.v1.InternalService/ListAccountsInDatabase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServiceServer).ListAccountsInDatabase(ctx, req.(*ListResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalService_GetAccountFromDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServiceServer).GetAccountFromDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.saasapi.operator.internalservice.v1.InternalService/GetAccountFromDatabase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServiceServer).GetAccountFromDatabase(ctx, req.(*GetResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalService_UpdateAccountInDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServiceServer).UpdateAccountInDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.saasapi.operator.internalservice.v1.InternalService/UpdateAccountInDatabase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServiceServer).UpdateAccountInDatabase(ctx, req.(*UpdateResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalService_SetInternalRolesForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetInternalRolesForUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServiceServer).SetInternalRolesForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.saasapi.operator.internalservice.v1.InternalService/SetInternalRolesForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServiceServer).SetInternalRolesForUser(ctx, req.(*SetInternalRolesForUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalService_GetResourceManagerConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServiceServer).GetResourceManagerConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.saasapi.operator.internalservice.v1.InternalService/GetResourceManagerConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServiceServer).GetResourceManagerConfig(ctx, req.(*GetResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalService_UpdateResourceManagerConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServiceServer).UpdateResourceManagerConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.saasapi.operator.internalservice.v1.InternalService/UpdateResourceManagerConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServiceServer).UpdateResourceManagerConfig(ctx, req.(*UpdateResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalService_GetResourceManagerNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServiceServer).GetResourceManagerNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.saasapi.operator.internalservice.v1.InternalService/GetResourceManagerNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServiceServer).GetResourceManagerNamespace(ctx, req.(*GetResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalService_UpdateResourceManagerNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServiceServer).UpdateResourceManagerNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.saasapi.operator.internalservice.v1.InternalService/UpdateResourceManagerNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServiceServer).UpdateResourceManagerNamespace(ctx, req.(*UpdateResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalService_ListResourceManagerCells_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServiceServer).ListResourceManagerCells(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.saasapi.operator.internalservice.v1.InternalService/ListResourceManagerCells",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServiceServer).ListResourceManagerCells(ctx, req.(*ListResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalService_ListResourceManagerNamespaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServiceServer).ListResourceManagerNamespaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.saasapi.operator.internalservice.v1.InternalService/ListResourceManagerNamespaces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServiceServer).ListResourceManagerNamespaces(ctx, req.(*ListResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalService_GetUserRoleFromOPA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServiceServer).GetUserRoleFromOPA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.saasapi.operator.internalservice.v1.InternalService/GetUserRoleFromOPA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServiceServer).GetUserRoleFromOPA(ctx, req.(*GetResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalService_GetSubjectRoleFromOPA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServiceServer).GetSubjectRoleFromOPA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.saasapi.operator.internalservice.v1.InternalService/GetSubjectRoleFromOPA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServiceServer).GetSubjectRoleFromOPA(ctx, req.(*GetResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalService_GetRoleFromOPA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServiceServer).GetRoleFromOPA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.saasapi.operator.internalservice.v1.InternalService/GetRoleFromOPA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServiceServer).GetRoleFromOPA(ctx, req.(*GetResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalService_GetAuthorizeResultFromOPA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAuthorizeResultFromOPARequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServiceServer).GetAuthorizeResultFromOPA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.saasapi.operator.internalservice.v1.InternalService/GetAuthorizeResultFromOPA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServiceServer).GetAuthorizeResultFromOPA(ctx, req.(*GetAuthorizeResultFromOPARequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalService_UpdateGlobalDynamicConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServiceServer).UpdateGlobalDynamicConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.saasapi.operator.internalservice.v1.InternalService/UpdateGlobalDynamicConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServiceServer).UpdateGlobalDynamicConfig(ctx, req.(*UpdateResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalService_GetGlobalDynamicConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServiceServer).GetGlobalDynamicConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.saasapi.operator.internalservice.v1.InternalService/GetGlobalDynamicConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServiceServer).GetGlobalDynamicConfig(ctx, req.(*GetResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalService_GetGlobalPolicyConfigFromDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServiceServer).GetGlobalPolicyConfigFromDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.saasapi.operator.internalservice.v1.InternalService/GetGlobalPolicyConfigFromDatabase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServiceServer).GetGlobalPolicyConfigFromDatabase(ctx, req.(*GetResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalService_UpdateGlobalPolicyConfigFromDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServiceServer).UpdateGlobalPolicyConfigFromDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.saasapi.operator.internalservice.v1.InternalService/UpdateGlobalPolicyConfigFromDatabase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServiceServer).UpdateGlobalPolicyConfigFromDatabase(ctx, req.(*UpdateResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalService_AssignAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServiceServer).AssignAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.saasapi.operator.internalservice.v1.InternalService/AssignAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServiceServer).AssignAccount(ctx, req.(*AssignAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalService_ProvisionAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProvisionAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServiceServer).ProvisionAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.saasapi.operator.internalservice.v1.InternalService/ProvisionAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServiceServer).ProvisionAccount(ctx, req.(*ProvisionAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalService_SyncPolicyConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncPolicyConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServiceServer).SyncPolicyConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.saasapi.operator.internalservice.v1.InternalService/SyncPolicyConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServiceServer).SyncPolicyConfig(ctx, req.(*SyncPolicyConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalService_BackfillRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BackfillRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServiceServer).BackfillRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.saasapi.operator.internalservice.v1.InternalService/BackfillRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServiceServer).BackfillRoles(ctx, req.(*BackfillRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalService_ExpandAccountPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExpandAccountPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServiceServer).ExpandAccountPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.saasapi.operator.internalservice.v1.InternalService/ExpandAccountPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServiceServer).ExpandAccountPool(ctx, req.(*ExpandAccountPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalService_InitializeAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitializeAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServiceServer).InitializeAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.saasapi.operator.internalservice.v1.InternalService/InitializeAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServiceServer).InitializeAccount(ctx, req.(*InitializeAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalService_MigrateNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MigrateNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServiceServer).MigrateNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.saasapi.operator.internalservice.v1.InternalService/MigrateNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServiceServer).MigrateNamespace(ctx, req.(*MigrateNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalService_ListRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServiceServer).ListRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.saasapi.operator.internalservice.v1.InternalService/ListRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServiceServer).ListRoles(ctx, req.(*ListRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalService_UpsertAccountRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertAccountRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServiceServer).UpsertAccountRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.saasapi.operator.internalservice.v1.InternalService/UpsertAccountRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServiceServer).UpsertAccountRoles(ctx, req.(*UpsertAccountRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalService_GetRequestStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequestStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServiceServer).GetRequestStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.saasapi.operator.internalservice.v1.InternalService/GetRequestStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServiceServer).GetRequestStatus(ctx, req.(*GetRequestStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalService_PlannerDryRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlannerDryRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServiceServer).PlannerDryRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.saasapi.operator.internalservice.v1.InternalService/PlannerDryRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServiceServer).PlannerDryRun(ctx, req.(*PlannerDryRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalService_ValidateResourceManagerData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateResourceManagerDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServiceServer).ValidateResourceManagerData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.saasapi.operator.internalservice.v1.InternalService/ValidateResourceManagerData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServiceServer).ValidateResourceManagerData(ctx, req.(*ValidateResourceManagerDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalService_CreateSAMLConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSAMLConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServiceServer).CreateSAMLConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.saasapi.operator.internalservice.v1.InternalService/CreateSAMLConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServiceServer).CreateSAMLConnection(ctx, req.(*CreateSAMLConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalService_CreateInternalAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInternalAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServiceServer).CreateInternalAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.saasapi.operator.internalservice.v1.InternalService/CreateInternalAPIKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServiceServer).CreateInternalAPIKey(ctx, req.(*CreateInternalAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalService_GrantEphemeralRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrantEphemeralRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServiceServer).GrantEphemeralRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.saasapi.operator.internalservice.v1.InternalService/GrantEphemeralRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServiceServer).GrantEphemeralRole(ctx, req.(*GrantEphemeralRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalService_GrantEphemeralReadRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrantEphemeralReadRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServiceServer).GrantEphemeralReadRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.saasapi.operator.internalservice.v1.InternalService/GrantEphemeralReadRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServiceServer).GrantEphemeralReadRole(ctx, req.(*GrantEphemeralReadRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalService_AddAstraCapacity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAstraCapacityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServiceServer).AddAstraCapacity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.saasapi.operator.internalservice.v1.InternalService/AddAstraCapacity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServiceServer).AddAstraCapacity(ctx, req.(*AddAstraCapacityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalService_CreateInternalRegionalNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInternalRegionalNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServiceServer).CreateInternalRegionalNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.saasapi.operator.internalservice.v1.InternalService/CreateInternalRegionalNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServiceServer).CreateInternalRegionalNamespace(ctx, req.(*CreateInternalRegionalNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalService_SyncTieredStorageLifecycleRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncTieredStorageLifecycleRulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServiceServer).SyncTieredStorageLifecycleRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.saasapi.operator.internalservice.v1.InternalService/SyncTieredStorageLifecycleRules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServiceServer).SyncTieredStorageLifecycleRules(ctx, req.(*SyncTieredStorageLifecycleRulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalService_GetAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServiceServer).GetAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.saasapi.operator.internalservice.v1.InternalService/GetAPIKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServiceServer).GetAPIKey(ctx, req.(*GetResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalService_ListAPIKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAPIKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServiceServer).ListAPIKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.saasapi.operator.internalservice.v1.InternalService/ListAPIKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServiceServer).ListAPIKeys(ctx, req.(*ListAPIKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _InternalService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "services.saasapi.operator.internalservice.v1.InternalService",
	HandlerType: (*InternalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNamespace",
			Handler:    _InternalService_CreateNamespace_Handler,
		},
		{
			MethodName: "ListNamespaces",
			Handler:    _InternalService_ListNamespaces_Handler,
		},
		{
			MethodName: "GetNamespace",
			Handler:    _InternalService_GetNamespace_Handler,
		},
		{
			MethodName: "UpdateNamespace",
			Handler:    _InternalService_UpdateNamespace_Handler,
		},
		{
			MethodName: "SyncNamespace",
			Handler:    _InternalService_SyncNamespace_Handler,
		},
		{
			MethodName: "DeleteNamespaceFromDatabase",
			Handler:    _InternalService_DeleteNamespaceFromDatabase_Handler,
		},
		{
			MethodName: "DeleteNamespace",
			Handler:    _InternalService_DeleteNamespace_Handler,
		},
		{
			MethodName: "UpdateNamespaceOperatorSettings",
			Handler:    _InternalService_UpdateNamespaceOperatorSettings_Handler,
		},
		{
			MethodName: "ListCells",
			Handler:    _InternalService_ListCells_Handler,
		},
		{
			MethodName: "GetCell",
			Handler:    _InternalService_GetCell_Handler,
		},
		{
			MethodName: "UpdateCell",
			Handler:    _InternalService_UpdateCell_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _InternalService_GetUser_Handler,
		},
		{
			MethodName: "ListUsers",
			Handler:    _InternalService_ListUsers_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _InternalService_UpdateUser_Handler,
		},
		{
			MethodName: "RollingUpdateTemporalCells",
			Handler:    _InternalService_RollingUpdateTemporalCells_Handler,
		},
		{
			MethodName: "CreateCell",
			Handler:    _InternalService_CreateCell_Handler,
		},
		{
			MethodName: "DeleteCell",
			Handler:    _InternalService_DeleteCell_Handler,
		},
		{
			MethodName: "CreateCellInDatabase",
			Handler:    _InternalService_CreateCellInDatabase_Handler,
		},
		{
			MethodName: "DeleteCellInDatabase",
			Handler:    _InternalService_DeleteCellInDatabase_Handler,
		},
		{
			MethodName: "AllocateInitialFailoverVersion",
			Handler:    _InternalService_AllocateInitialFailoverVersion_Handler,
		},
		{
			MethodName: "UpdateInitialFailoverVersion",
			Handler:    _InternalService_UpdateInitialFailoverVersion_Handler,
		},
		{
			MethodName: "DeleteInitialFailoverVersion",
			Handler:    _InternalService_DeleteInitialFailoverVersion_Handler,
		},
		{
			MethodName: "GetInitialFailoverVersion",
			Handler:    _InternalService_GetInitialFailoverVersion_Handler,
		},
		{
			MethodName: "InviteUsers",
			Handler:    _InternalService_InviteUsers_Handler,
		},
		{
			MethodName: "AddRolesToUser",
			Handler:    _InternalService_AddRolesToUser_Handler,
		},
		{
			MethodName: "DeleteRolesFromUser",
			Handler:    _InternalService_DeleteRolesFromUser_Handler,
		},
		{
			MethodName: "GetRoleInDatabase",
			Handler:    _InternalService_GetRoleInDatabase_Handler,
		},
		{
			MethodName: "UpdateRoleInDatabase",
			Handler:    _InternalService_UpdateRoleInDatabase_Handler,
		},
		{
			MethodName: "DeleteRoleInDatabase",
			Handler:    _InternalService_DeleteRoleInDatabase_Handler,
		},
		{
			MethodName: "CreateRoleInDatabase",
			Handler:    _InternalService_CreateRoleInDatabase_Handler,
		},
		{
			MethodName: "GetEntityRequestMap",
			Handler:    _InternalService_GetEntityRequestMap_Handler,
		},
		{
			MethodName: "GetAccount",
			Handler:    _InternalService_GetAccount_Handler,
		},
		{
			MethodName: "UpdateAccount",
			Handler:    _InternalService_UpdateAccount_Handler,
		},
		{
			MethodName: "ListAccountsInDatabase",
			Handler:    _InternalService_ListAccountsInDatabase_Handler,
		},
		{
			MethodName: "GetAccountFromDatabase",
			Handler:    _InternalService_GetAccountFromDatabase_Handler,
		},
		{
			MethodName: "UpdateAccountInDatabase",
			Handler:    _InternalService_UpdateAccountInDatabase_Handler,
		},
		{
			MethodName: "SetInternalRolesForUser",
			Handler:    _InternalService_SetInternalRolesForUser_Handler,
		},
		{
			MethodName: "GetResourceManagerConfig",
			Handler:    _InternalService_GetResourceManagerConfig_Handler,
		},
		{
			MethodName: "UpdateResourceManagerConfig",
			Handler:    _InternalService_UpdateResourceManagerConfig_Handler,
		},
		{
			MethodName: "GetResourceManagerNamespace",
			Handler:    _InternalService_GetResourceManagerNamespace_Handler,
		},
		{
			MethodName: "UpdateResourceManagerNamespace",
			Handler:    _InternalService_UpdateResourceManagerNamespace_Handler,
		},
		{
			MethodName: "ListResourceManagerCells",
			Handler:    _InternalService_ListResourceManagerCells_Handler,
		},
		{
			MethodName: "ListResourceManagerNamespaces",
			Handler:    _InternalService_ListResourceManagerNamespaces_Handler,
		},
		{
			MethodName: "GetUserRoleFromOPA",
			Handler:    _InternalService_GetUserRoleFromOPA_Handler,
		},
		{
			MethodName: "GetSubjectRoleFromOPA",
			Handler:    _InternalService_GetSubjectRoleFromOPA_Handler,
		},
		{
			MethodName: "GetRoleFromOPA",
			Handler:    _InternalService_GetRoleFromOPA_Handler,
		},
		{
			MethodName: "GetAuthorizeResultFromOPA",
			Handler:    _InternalService_GetAuthorizeResultFromOPA_Handler,
		},
		{
			MethodName: "UpdateGlobalDynamicConfig",
			Handler:    _InternalService_UpdateGlobalDynamicConfig_Handler,
		},
		{
			MethodName: "GetGlobalDynamicConfig",
			Handler:    _InternalService_GetGlobalDynamicConfig_Handler,
		},
		{
			MethodName: "GetGlobalPolicyConfigFromDatabase",
			Handler:    _InternalService_GetGlobalPolicyConfigFromDatabase_Handler,
		},
		{
			MethodName: "UpdateGlobalPolicyConfigFromDatabase",
			Handler:    _InternalService_UpdateGlobalPolicyConfigFromDatabase_Handler,
		},
		{
			MethodName: "AssignAccount",
			Handler:    _InternalService_AssignAccount_Handler,
		},
		{
			MethodName: "ProvisionAccount",
			Handler:    _InternalService_ProvisionAccount_Handler,
		},
		{
			MethodName: "SyncPolicyConfig",
			Handler:    _InternalService_SyncPolicyConfig_Handler,
		},
		{
			MethodName: "BackfillRoles",
			Handler:    _InternalService_BackfillRoles_Handler,
		},
		{
			MethodName: "ExpandAccountPool",
			Handler:    _InternalService_ExpandAccountPool_Handler,
		},
		{
			MethodName: "InitializeAccount",
			Handler:    _InternalService_InitializeAccount_Handler,
		},
		{
			MethodName: "MigrateNamespace",
			Handler:    _InternalService_MigrateNamespace_Handler,
		},
		{
			MethodName: "ListRoles",
			Handler:    _InternalService_ListRoles_Handler,
		},
		{
			MethodName: "UpsertAccountRoles",
			Handler:    _InternalService_UpsertAccountRoles_Handler,
		},
		{
			MethodName: "GetRequestStatus",
			Handler:    _InternalService_GetRequestStatus_Handler,
		},
		{
			MethodName: "PlannerDryRun",
			Handler:    _InternalService_PlannerDryRun_Handler,
		},
		{
			MethodName: "ValidateResourceManagerData",
			Handler:    _InternalService_ValidateResourceManagerData_Handler,
		},
		{
			MethodName: "CreateSAMLConnection",
			Handler:    _InternalService_CreateSAMLConnection_Handler,
		},
		{
			MethodName: "CreateInternalAPIKey",
			Handler:    _InternalService_CreateInternalAPIKey_Handler,
		},
		{
			MethodName: "GrantEphemeralRole",
			Handler:    _InternalService_GrantEphemeralRole_Handler,
		},
		{
			MethodName: "GrantEphemeralReadRole",
			Handler:    _InternalService_GrantEphemeralReadRole_Handler,
		},
		{
			MethodName: "AddAstraCapacity",
			Handler:    _InternalService_AddAstraCapacity_Handler,
		},
		{
			MethodName: "CreateInternalRegionalNamespace",
			Handler:    _InternalService_CreateInternalRegionalNamespace_Handler,
		},
		{
			MethodName: "SyncTieredStorageLifecycleRules",
			Handler:    _InternalService_SyncTieredStorageLifecycleRules_Handler,
		},
		{
			MethodName: "GetAPIKey",
			Handler:    _InternalService_GetAPIKey_Handler,
		},
		{
			MethodName: "ListAPIKeys",
			Handler:    _InternalService_ListAPIKeys_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/saasapi/operator/internalservice/v1/service.proto",
}
