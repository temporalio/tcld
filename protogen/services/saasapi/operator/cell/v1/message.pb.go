// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: services/saasapi/operator/cell/v1/message.proto

package cell

import (
	bytes "bytes"
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CloudProvider struct {
	Region string `protobuf:"bytes,1,opt,name=region,proto3" json:"region,omitempty"`
}

func (m *CloudProvider) Reset()      { *m = CloudProvider{} }
func (*CloudProvider) ProtoMessage() {}
func (*CloudProvider) Descriptor() ([]byte, []int) {
	return fileDescriptor_da4769aca3df1c34, []int{0}
}
func (m *CloudProvider) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CloudProvider) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CloudProvider.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CloudProvider) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloudProvider.Merge(m, src)
}
func (m *CloudProvider) XXX_Size() int {
	return m.Size()
}
func (m *CloudProvider) XXX_DiscardUnknown() {
	xxx_messageInfo_CloudProvider.DiscardUnknown(m)
}

var xxx_messageInfo_CloudProvider proto.InternalMessageInfo

func (m *CloudProvider) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

type Astra struct {
	Tier                  string `protobuf:"bytes,1,opt,name=tier,proto3" json:"tier,omitempty"`
	CUCount               uint64 `protobuf:"varint,2,opt,name=cUCount,proto3" json:"cUCount,omitempty"`
	DBCount               uint64 `protobuf:"varint,3,opt,name=dBCount,proto3" json:"dBCount,omitempty"`
	AstraExpansionEnabled bool   `protobuf:"varint,4,opt,name=astraExpansionEnabled,proto3" json:"astraExpansionEnabled,omitempty"`
}

func (m *Astra) Reset()      { *m = Astra{} }
func (*Astra) ProtoMessage() {}
func (*Astra) Descriptor() ([]byte, []int) {
	return fileDescriptor_da4769aca3df1c34, []int{1}
}
func (m *Astra) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Astra) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Astra.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Astra) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Astra.Merge(m, src)
}
func (m *Astra) XXX_Size() int {
	return m.Size()
}
func (m *Astra) XXX_DiscardUnknown() {
	xxx_messageInfo_Astra.DiscardUnknown(m)
}

var xxx_messageInfo_Astra proto.InternalMessageInfo

func (m *Astra) GetTier() string {
	if m != nil {
		return m.Tier
	}
	return ""
}

func (m *Astra) GetCUCount() uint64 {
	if m != nil {
		return m.CUCount
	}
	return 0
}

func (m *Astra) GetDBCount() uint64 {
	if m != nil {
		return m.DBCount
	}
	return 0
}

func (m *Astra) GetAstraExpansionEnabled() bool {
	if m != nil {
		return m.AstraExpansionEnabled
	}
	return false
}

type DeploymentSpec struct {
	Version      string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	ReplicaCount uint64 `protobuf:"varint,2,opt,name=replicaCount,proto3" json:"replicaCount,omitempty"`
}

func (m *DeploymentSpec) Reset()      { *m = DeploymentSpec{} }
func (*DeploymentSpec) ProtoMessage() {}
func (*DeploymentSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_da4769aca3df1c34, []int{2}
}
func (m *DeploymentSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeploymentSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeploymentSpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeploymentSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeploymentSpec.Merge(m, src)
}
func (m *DeploymentSpec) XXX_Size() int {
	return m.Size()
}
func (m *DeploymentSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_DeploymentSpec.DiscardUnknown(m)
}

var xxx_messageInfo_DeploymentSpec proto.InternalMessageInfo

func (m *DeploymentSpec) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *DeploymentSpec) GetReplicaCount() uint64 {
	if m != nil {
		return m.ReplicaCount
	}
	return 0
}

type TemporalDeploymentSpec struct {
	Version            string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	FrontendReplicas   uint64 `protobuf:"varint,2,opt,name=frontendReplicas,proto3" json:"frontendReplicas,omitempty"`
	HistoryReplicas    uint64 `protobuf:"varint,3,opt,name=historyReplicas,proto3" json:"historyReplicas,omitempty"`
	MatchingReplicas   uint64 `protobuf:"varint,4,opt,name=matchingReplicas,proto3" json:"matchingReplicas,omitempty"`
	WorkerReplicas     uint64 `protobuf:"varint,5,opt,name=workerReplicas,proto3" json:"workerReplicas,omitempty"`
	AgentReplicas      uint64 `protobuf:"varint,6,opt,name=agentReplicas,proto3" json:"agentReplicas,omitempty"`
	AdminToolsReplicas uint64 `protobuf:"varint,7,opt,name=adminToolsReplicas,proto3" json:"adminToolsReplicas,omitempty"`
}

func (m *TemporalDeploymentSpec) Reset()      { *m = TemporalDeploymentSpec{} }
func (*TemporalDeploymentSpec) ProtoMessage() {}
func (*TemporalDeploymentSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_da4769aca3df1c34, []int{3}
}
func (m *TemporalDeploymentSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TemporalDeploymentSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TemporalDeploymentSpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TemporalDeploymentSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TemporalDeploymentSpec.Merge(m, src)
}
func (m *TemporalDeploymentSpec) XXX_Size() int {
	return m.Size()
}
func (m *TemporalDeploymentSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_TemporalDeploymentSpec.DiscardUnknown(m)
}

var xxx_messageInfo_TemporalDeploymentSpec proto.InternalMessageInfo

func (m *TemporalDeploymentSpec) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *TemporalDeploymentSpec) GetFrontendReplicas() uint64 {
	if m != nil {
		return m.FrontendReplicas
	}
	return 0
}

func (m *TemporalDeploymentSpec) GetHistoryReplicas() uint64 {
	if m != nil {
		return m.HistoryReplicas
	}
	return 0
}

func (m *TemporalDeploymentSpec) GetMatchingReplicas() uint64 {
	if m != nil {
		return m.MatchingReplicas
	}
	return 0
}

func (m *TemporalDeploymentSpec) GetWorkerReplicas() uint64 {
	if m != nil {
		return m.WorkerReplicas
	}
	return 0
}

func (m *TemporalDeploymentSpec) GetAgentReplicas() uint64 {
	if m != nil {
		return m.AgentReplicas
	}
	return 0
}

func (m *TemporalDeploymentSpec) GetAdminToolsReplicas() uint64 {
	if m != nil {
		return m.AdminToolsReplicas
	}
	return 0
}

type Deployments struct {
	Opa      *DeploymentSpec         `protobuf:"bytes,1,opt,name=opa,proto3" json:"opa,omitempty"`
	GoCanary *DeploymentSpec         `protobuf:"bytes,2,opt,name=goCanary,proto3" json:"goCanary,omitempty"`
	Web      *DeploymentSpec         `protobuf:"bytes,3,opt,name=web,proto3" json:"web,omitempty"`
	Temporal *TemporalDeploymentSpec `protobuf:"bytes,4,opt,name=temporal,proto3" json:"temporal,omitempty"`
	WebApi   *DeploymentSpec         `protobuf:"bytes,5,opt,name=webApi,proto3" json:"webApi,omitempty"`
}

func (m *Deployments) Reset()      { *m = Deployments{} }
func (*Deployments) ProtoMessage() {}
func (*Deployments) Descriptor() ([]byte, []int) {
	return fileDescriptor_da4769aca3df1c34, []int{4}
}
func (m *Deployments) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Deployments) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Deployments.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Deployments) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Deployments.Merge(m, src)
}
func (m *Deployments) XXX_Size() int {
	return m.Size()
}
func (m *Deployments) XXX_DiscardUnknown() {
	xxx_messageInfo_Deployments.DiscardUnknown(m)
}

var xxx_messageInfo_Deployments proto.InternalMessageInfo

func (m *Deployments) GetOpa() *DeploymentSpec {
	if m != nil {
		return m.Opa
	}
	return nil
}

func (m *Deployments) GetGoCanary() *DeploymentSpec {
	if m != nil {
		return m.GoCanary
	}
	return nil
}

func (m *Deployments) GetWeb() *DeploymentSpec {
	if m != nil {
		return m.Web
	}
	return nil
}

func (m *Deployments) GetTemporal() *TemporalDeploymentSpec {
	if m != nil {
		return m.Temporal
	}
	return nil
}

func (m *Deployments) GetWebApi() *DeploymentSpec {
	if m != nil {
		return m.WebApi
	}
	return nil
}

type InfraVersion struct {
	Major uint64 `protobuf:"varint,1,opt,name=major,proto3" json:"major,omitempty"`
	Minor uint64 `protobuf:"varint,2,opt,name=minor,proto3" json:"minor,omitempty"`
	Patch uint64 `protobuf:"varint,3,opt,name=patch,proto3" json:"patch,omitempty"`
}

func (m *InfraVersion) Reset()      { *m = InfraVersion{} }
func (*InfraVersion) ProtoMessage() {}
func (*InfraVersion) Descriptor() ([]byte, []int) {
	return fileDescriptor_da4769aca3df1c34, []int{5}
}
func (m *InfraVersion) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InfraVersion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InfraVersion.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InfraVersion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InfraVersion.Merge(m, src)
}
func (m *InfraVersion) XXX_Size() int {
	return m.Size()
}
func (m *InfraVersion) XXX_DiscardUnknown() {
	xxx_messageInfo_InfraVersion.DiscardUnknown(m)
}

var xxx_messageInfo_InfraVersion proto.InternalMessageInfo

func (m *InfraVersion) GetMajor() uint64 {
	if m != nil {
		return m.Major
	}
	return 0
}

func (m *InfraVersion) GetMinor() uint64 {
	if m != nil {
		return m.Minor
	}
	return 0
}

func (m *InfraVersion) GetPatch() uint64 {
	if m != nil {
		return m.Patch
	}
	return 0
}

type RMSpec struct {
	// True iff this cell is eligible for workload placement. False by default so that we need to explicitly set
	// a cell to be accepting workload. Note that this field only applies to automated placement and operator could
	// still potentially place workload into a cell where this field is false.
	AcceptingWorkload bool `protobuf:"varint,1,opt,name=acceptingWorkload,proto3" json:"acceptingWorkload,omitempty"`
	// Maximum number of namespaces allowed for this cell.
	//
	// NOTE: The actual limit is the max of this number and the global default limit.
	MaxAllowedNamespaces uint64 `protobuf:"varint,2,opt,name=maxAllowedNamespaces,proto3" json:"maxAllowedNamespaces,omitempty"`
	// Maximum state transitions per second supported by this cell.
	//
	// NOTE: If set to a positive number, this number overrides the limit derived from Astra CU count.
	MaxStateTransitionsPerSecond uint64 `protobuf:"varint,3,opt,name=maxStateTransitionsPerSecond,proto3" json:"maxStateTransitionsPerSecond,omitempty"`
	// Maximum history persistence rps supported by this cell.
	//
	// NOTE: If set to a positive number, this number overrides the limit derived from Astra CU count.
	MaxHistoryPersistenceRPS uint64 `protobuf:"varint,4,opt,name=maxHistoryPersistenceRPS,proto3" json:"maxHistoryPersistenceRPS,omitempty"`
}

func (m *RMSpec) Reset()      { *m = RMSpec{} }
func (*RMSpec) ProtoMessage() {}
func (*RMSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_da4769aca3df1c34, []int{6}
}
func (m *RMSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RMSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RMSpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RMSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RMSpec.Merge(m, src)
}
func (m *RMSpec) XXX_Size() int {
	return m.Size()
}
func (m *RMSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_RMSpec.DiscardUnknown(m)
}

var xxx_messageInfo_RMSpec proto.InternalMessageInfo

func (m *RMSpec) GetAcceptingWorkload() bool {
	if m != nil {
		return m.AcceptingWorkload
	}
	return false
}

func (m *RMSpec) GetMaxAllowedNamespaces() uint64 {
	if m != nil {
		return m.MaxAllowedNamespaces
	}
	return 0
}

func (m *RMSpec) GetMaxStateTransitionsPerSecond() uint64 {
	if m != nil {
		return m.MaxStateTransitionsPerSecond
	}
	return 0
}

func (m *RMSpec) GetMaxHistoryPersistenceRPS() uint64 {
	if m != nil {
		return m.MaxHistoryPersistenceRPS
	}
	return 0
}

type Opa struct {
	KmsKeyArn     string `protobuf:"bytes,1,opt,name=kmsKeyArn,proto3" json:"kmsKeyArn,omitempty"`
	BucketName    string `protobuf:"bytes,2,opt,name=bucketName,proto3" json:"bucketName,omitempty"`
	BucketRegion  string `protobuf:"bytes,3,opt,name=bucketRegion,proto3" json:"bucketRegion,omitempty"`
	BundlePath    string `protobuf:"bytes,4,opt,name=bundlePath,proto3" json:"bundlePath,omitempty"`
	HostPort      string `protobuf:"bytes,5,opt,name=hostPort,proto3" json:"hostPort,omitempty"`
	AuthzPath     string `protobuf:"bytes,6,opt,name=authzPath,proto3" json:"authzPath,omitempty"`
	AuthzV2Path   string `protobuf:"bytes,7,opt,name=authzV2Path,proto3" json:"authzV2Path,omitempty"`
	Auth0Audience string `protobuf:"bytes,8,opt,name=auth0Audience,proto3" json:"auth0Audience,omitempty"`
	Auth0Domain   string `protobuf:"bytes,9,opt,name=auth0Domain,proto3" json:"auth0Domain,omitempty"`
	UseV2         bool   `protobuf:"varint,10,opt,name=useV2,proto3" json:"useV2,omitempty"`
}

func (m *Opa) Reset()      { *m = Opa{} }
func (*Opa) ProtoMessage() {}
func (*Opa) Descriptor() ([]byte, []int) {
	return fileDescriptor_da4769aca3df1c34, []int{7}
}
func (m *Opa) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Opa) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Opa.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Opa) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Opa.Merge(m, src)
}
func (m *Opa) XXX_Size() int {
	return m.Size()
}
func (m *Opa) XXX_DiscardUnknown() {
	xxx_messageInfo_Opa.DiscardUnknown(m)
}

var xxx_messageInfo_Opa proto.InternalMessageInfo

func (m *Opa) GetKmsKeyArn() string {
	if m != nil {
		return m.KmsKeyArn
	}
	return ""
}

func (m *Opa) GetBucketName() string {
	if m != nil {
		return m.BucketName
	}
	return ""
}

func (m *Opa) GetBucketRegion() string {
	if m != nil {
		return m.BucketRegion
	}
	return ""
}

func (m *Opa) GetBundlePath() string {
	if m != nil {
		return m.BundlePath
	}
	return ""
}

func (m *Opa) GetHostPort() string {
	if m != nil {
		return m.HostPort
	}
	return ""
}

func (m *Opa) GetAuthzPath() string {
	if m != nil {
		return m.AuthzPath
	}
	return ""
}

func (m *Opa) GetAuthzV2Path() string {
	if m != nil {
		return m.AuthzV2Path
	}
	return ""
}

func (m *Opa) GetAuth0Audience() string {
	if m != nil {
		return m.Auth0Audience
	}
	return ""
}

func (m *Opa) GetAuth0Domain() string {
	if m != nil {
		return m.Auth0Domain
	}
	return ""
}

func (m *Opa) GetUseV2() bool {
	if m != nil {
		return m.UseV2
	}
	return false
}

type Visibility struct {
	EnableWriteToSecondaryAdvancedVisibility  bool `protobuf:"varint,1,opt,name=enableWriteToSecondaryAdvancedVisibility,proto3" json:"enableWriteToSecondaryAdvancedVisibility,omitempty"`
	EnableReadFromSecondaryAdvancedVisibility bool `protobuf:"varint,2,opt,name=enableReadFromSecondaryAdvancedVisibility,proto3" json:"enableReadFromSecondaryAdvancedVisibility,omitempty"`
}

func (m *Visibility) Reset()      { *m = Visibility{} }
func (*Visibility) ProtoMessage() {}
func (*Visibility) Descriptor() ([]byte, []int) {
	return fileDescriptor_da4769aca3df1c34, []int{8}
}
func (m *Visibility) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Visibility) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Visibility.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Visibility) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Visibility.Merge(m, src)
}
func (m *Visibility) XXX_Size() int {
	return m.Size()
}
func (m *Visibility) XXX_DiscardUnknown() {
	xxx_messageInfo_Visibility.DiscardUnknown(m)
}

var xxx_messageInfo_Visibility proto.InternalMessageInfo

func (m *Visibility) GetEnableWriteToSecondaryAdvancedVisibility() bool {
	if m != nil {
		return m.EnableWriteToSecondaryAdvancedVisibility
	}
	return false
}

func (m *Visibility) GetEnableReadFromSecondaryAdvancedVisibility() bool {
	if m != nil {
		return m.EnableReadFromSecondaryAdvancedVisibility
	}
	return false
}

type Replication struct {
	ReplicationTaskFetcherAggregationInterval *types.Duration `protobuf:"bytes,1,opt,name=replicationTaskFetcherAggregationInterval,proto3" json:"replicationTaskFetcherAggregationInterval,omitempty"`
	ReplicationTaskProcessorNoTaskInitialWait *types.Duration `protobuf:"bytes,2,opt,name=replicationTaskProcessorNoTaskInitialWait,proto3" json:"replicationTaskProcessorNoTaskInitialWait,omitempty"`
	ReplicationTaskFetcherParallelism         uint64          `protobuf:"varint,3,opt,name=replicationTaskFetcherParallelism,proto3" json:"replicationTaskFetcherParallelism,omitempty"`
}

func (m *Replication) Reset()      { *m = Replication{} }
func (*Replication) ProtoMessage() {}
func (*Replication) Descriptor() ([]byte, []int) {
	return fileDescriptor_da4769aca3df1c34, []int{9}
}
func (m *Replication) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Replication) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Replication.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Replication) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Replication.Merge(m, src)
}
func (m *Replication) XXX_Size() int {
	return m.Size()
}
func (m *Replication) XXX_DiscardUnknown() {
	xxx_messageInfo_Replication.DiscardUnknown(m)
}

var xxx_messageInfo_Replication proto.InternalMessageInfo

func (m *Replication) GetReplicationTaskFetcherAggregationInterval() *types.Duration {
	if m != nil {
		return m.ReplicationTaskFetcherAggregationInterval
	}
	return nil
}

func (m *Replication) GetReplicationTaskProcessorNoTaskInitialWait() *types.Duration {
	if m != nil {
		return m.ReplicationTaskProcessorNoTaskInitialWait
	}
	return nil
}

func (m *Replication) GetReplicationTaskFetcherParallelism() uint64 {
	if m != nil {
		return m.ReplicationTaskFetcherParallelism
	}
	return 0
}

type MeteringValidation struct {
	SkipCanaryStateTransitionsValidation bool    `protobuf:"varint,1,opt,name=skipCanaryStateTransitionsValidation,proto3" json:"skipCanaryStateTransitionsValidation,omitempty"`
	SkipCanaryActionsValidation          bool    `protobuf:"varint,2,opt,name=skipCanaryActionsValidation,proto3" json:"skipCanaryActionsValidation,omitempty"`
	SkipCanaryClosedStorageValidation    bool    `protobuf:"varint,3,opt,name=skipCanaryClosedStorageValidation,proto3" json:"skipCanaryClosedStorageValidation,omitempty"`
	SkipCanaryOpenStorageValidation      bool    `protobuf:"varint,4,opt,name=skipCanaryOpenStorageValidation,proto3" json:"skipCanaryOpenStorageValidation,omitempty"`
	SkipPromQLValidation                 bool    `protobuf:"varint,5,opt,name=skipPromQLValidation,proto3" json:"skipPromQLValidation,omitempty"`
	StateTransitionsHourlyOverride       float64 `protobuf:"fixed64,6,opt,name=stateTransitionsHourlyOverride,proto3" json:"stateTransitionsHourlyOverride,omitempty"`
	ActionsHourlyOverride                float64 `protobuf:"fixed64,7,opt,name=actionsHourlyOverride,proto3" json:"actionsHourlyOverride,omitempty"`
	OpenStorageHourlyOverride            float64 `protobuf:"fixed64,8,opt,name=openStorageHourlyOverride,proto3" json:"openStorageHourlyOverride,omitempty"`
	ClosedStorageHourlyOverride          float64 `protobuf:"fixed64,9,opt,name=closedStorageHourlyOverride,proto3" json:"closedStorageHourlyOverride,omitempty"`
}

func (m *MeteringValidation) Reset()      { *m = MeteringValidation{} }
func (*MeteringValidation) ProtoMessage() {}
func (*MeteringValidation) Descriptor() ([]byte, []int) {
	return fileDescriptor_da4769aca3df1c34, []int{10}
}
func (m *MeteringValidation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MeteringValidation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MeteringValidation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MeteringValidation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MeteringValidation.Merge(m, src)
}
func (m *MeteringValidation) XXX_Size() int {
	return m.Size()
}
func (m *MeteringValidation) XXX_DiscardUnknown() {
	xxx_messageInfo_MeteringValidation.DiscardUnknown(m)
}

var xxx_messageInfo_MeteringValidation proto.InternalMessageInfo

func (m *MeteringValidation) GetSkipCanaryStateTransitionsValidation() bool {
	if m != nil {
		return m.SkipCanaryStateTransitionsValidation
	}
	return false
}

func (m *MeteringValidation) GetSkipCanaryActionsValidation() bool {
	if m != nil {
		return m.SkipCanaryActionsValidation
	}
	return false
}

func (m *MeteringValidation) GetSkipCanaryClosedStorageValidation() bool {
	if m != nil {
		return m.SkipCanaryClosedStorageValidation
	}
	return false
}

func (m *MeteringValidation) GetSkipCanaryOpenStorageValidation() bool {
	if m != nil {
		return m.SkipCanaryOpenStorageValidation
	}
	return false
}

func (m *MeteringValidation) GetSkipPromQLValidation() bool {
	if m != nil {
		return m.SkipPromQLValidation
	}
	return false
}

func (m *MeteringValidation) GetStateTransitionsHourlyOverride() float64 {
	if m != nil {
		return m.StateTransitionsHourlyOverride
	}
	return 0
}

func (m *MeteringValidation) GetActionsHourlyOverride() float64 {
	if m != nil {
		return m.ActionsHourlyOverride
	}
	return 0
}

func (m *MeteringValidation) GetOpenStorageHourlyOverride() float64 {
	if m != nil {
		return m.OpenStorageHourlyOverride
	}
	return 0
}

func (m *MeteringValidation) GetClosedStorageHourlyOverride() float64 {
	if m != nil {
		return m.ClosedStorageHourlyOverride
	}
	return 0
}

type AdvancedCellSpecs struct {
	TopLevelDomain                        string              `protobuf:"bytes,1,opt,name=topLevelDomain,proto3" json:"topLevelDomain,omitempty"`
	Opa                                   *Opa                `protobuf:"bytes,2,opt,name=opa,proto3" json:"opa,omitempty"`
	Visibility                            *Visibility         `protobuf:"bytes,3,opt,name=visibility,proto3" json:"visibility,omitempty"`
	Replication                           *Replication        `protobuf:"bytes,4,opt,name=replication,proto3" json:"replication,omitempty"`
	NamespaceCacheRefreshIntervalTime     *types.Duration     `protobuf:"bytes,5,opt,name=namespaceCacheRefreshIntervalTime,proto3" json:"namespaceCacheRefreshIntervalTime,omitempty"`
	SaasAgentTaskQueueActivitiesPerSecond uint64              `protobuf:"varint,6,opt,name=saasAgentTaskQueueActivitiesPerSecond,proto3" json:"saasAgentTaskQueueActivitiesPerSecond,omitempty"`
	MeteringValidation                    *MeteringValidation `protobuf:"bytes,7,opt,name=meteringValidation,proto3" json:"meteringValidation,omitempty"`
}

func (m *AdvancedCellSpecs) Reset()      { *m = AdvancedCellSpecs{} }
func (*AdvancedCellSpecs) ProtoMessage() {}
func (*AdvancedCellSpecs) Descriptor() ([]byte, []int) {
	return fileDescriptor_da4769aca3df1c34, []int{11}
}
func (m *AdvancedCellSpecs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdvancedCellSpecs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdvancedCellSpecs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdvancedCellSpecs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdvancedCellSpecs.Merge(m, src)
}
func (m *AdvancedCellSpecs) XXX_Size() int {
	return m.Size()
}
func (m *AdvancedCellSpecs) XXX_DiscardUnknown() {
	xxx_messageInfo_AdvancedCellSpecs.DiscardUnknown(m)
}

var xxx_messageInfo_AdvancedCellSpecs proto.InternalMessageInfo

func (m *AdvancedCellSpecs) GetTopLevelDomain() string {
	if m != nil {
		return m.TopLevelDomain
	}
	return ""
}

func (m *AdvancedCellSpecs) GetOpa() *Opa {
	if m != nil {
		return m.Opa
	}
	return nil
}

func (m *AdvancedCellSpecs) GetVisibility() *Visibility {
	if m != nil {
		return m.Visibility
	}
	return nil
}

func (m *AdvancedCellSpecs) GetReplication() *Replication {
	if m != nil {
		return m.Replication
	}
	return nil
}

func (m *AdvancedCellSpecs) GetNamespaceCacheRefreshIntervalTime() *types.Duration {
	if m != nil {
		return m.NamespaceCacheRefreshIntervalTime
	}
	return nil
}

func (m *AdvancedCellSpecs) GetSaasAgentTaskQueueActivitiesPerSecond() uint64 {
	if m != nil {
		return m.SaasAgentTaskQueueActivitiesPerSecond
	}
	return 0
}

func (m *AdvancedCellSpecs) GetMeteringValidation() *MeteringValidation {
	if m != nil {
		return m.MeteringValidation
	}
	return nil
}

type CellSpec struct {
	Ring          uint64         `protobuf:"varint,1,opt,name=ring,proto3" json:"ring,omitempty"`
	CloudProvider *CloudProvider `protobuf:"bytes,2,opt,name=cloudProvider,proto3" json:"cloudProvider,omitempty"`
	Astra         *Astra         `protobuf:"bytes,3,opt,name=astra,proto3" json:"astra,omitempty"`
	Deployments   *Deployments   `protobuf:"bytes,4,opt,name=deployments,proto3" json:"deployments,omitempty"`
	InfraVersion  *InfraVersion  `protobuf:"bytes,5,opt,name=infraVersion,proto3" json:"infraVersion,omitempty"`
	// Optional Params
	Rm                         *RMSpec            `protobuf:"bytes,6,opt,name=rm,proto3" json:"rm,omitempty"`
	DynamicConfigOverridesJson string             `protobuf:"bytes,7,opt,name=dynamicConfigOverridesJson,proto3" json:"dynamicConfigOverridesJson,omitempty"`
	Advanced                   *AdvancedCellSpecs `protobuf:"bytes,8,opt,name=advanced,proto3" json:"advanced,omitempty"`
	Tags                       []string           `protobuf:"bytes,9,rep,name=tags,proto3" json:"tags,omitempty"`
	Purpose                    []string           `protobuf:"bytes,10,rep,name=purpose,proto3" json:"purpose,omitempty"`
}

func (m *CellSpec) Reset()      { *m = CellSpec{} }
func (*CellSpec) ProtoMessage() {}
func (*CellSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_da4769aca3df1c34, []int{12}
}
func (m *CellSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CellSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CellSpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CellSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CellSpec.Merge(m, src)
}
func (m *CellSpec) XXX_Size() int {
	return m.Size()
}
func (m *CellSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_CellSpec.DiscardUnknown(m)
}

var xxx_messageInfo_CellSpec proto.InternalMessageInfo

func (m *CellSpec) GetRing() uint64 {
	if m != nil {
		return m.Ring
	}
	return 0
}

func (m *CellSpec) GetCloudProvider() *CloudProvider {
	if m != nil {
		return m.CloudProvider
	}
	return nil
}

func (m *CellSpec) GetAstra() *Astra {
	if m != nil {
		return m.Astra
	}
	return nil
}

func (m *CellSpec) GetDeployments() *Deployments {
	if m != nil {
		return m.Deployments
	}
	return nil
}

func (m *CellSpec) GetInfraVersion() *InfraVersion {
	if m != nil {
		return m.InfraVersion
	}
	return nil
}

func (m *CellSpec) GetRm() *RMSpec {
	if m != nil {
		return m.Rm
	}
	return nil
}

func (m *CellSpec) GetDynamicConfigOverridesJson() string {
	if m != nil {
		return m.DynamicConfigOverridesJson
	}
	return ""
}

func (m *CellSpec) GetAdvanced() *AdvancedCellSpecs {
	if m != nil {
		return m.Advanced
	}
	return nil
}

func (m *CellSpec) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *CellSpec) GetPurpose() []string {
	if m != nil {
		return m.Purpose
	}
	return nil
}

type Cell struct {
	// id of the cell
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// serialized cell model
	Model []byte `protobuf:"bytes,2,opt,name=model,proto3" json:"model,omitempty"`
}

func (m *Cell) Reset()      { *m = Cell{} }
func (*Cell) ProtoMessage() {}
func (*Cell) Descriptor() ([]byte, []int) {
	return fileDescriptor_da4769aca3df1c34, []int{13}
}
func (m *Cell) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Cell) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Cell.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Cell) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Cell.Merge(m, src)
}
func (m *Cell) XXX_Size() int {
	return m.Size()
}
func (m *Cell) XXX_DiscardUnknown() {
	xxx_messageInfo_Cell.DiscardUnknown(m)
}

var xxx_messageInfo_Cell proto.InternalMessageInfo

func (m *Cell) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Cell) GetModel() []byte {
	if m != nil {
		return m.Model
	}
	return nil
}

func init() {
	proto.RegisterType((*CloudProvider)(nil), "services.saasapi.operator.cell.v1.CloudProvider")
	proto.RegisterType((*Astra)(nil), "services.saasapi.operator.cell.v1.Astra")
	proto.RegisterType((*DeploymentSpec)(nil), "services.saasapi.operator.cell.v1.DeploymentSpec")
	proto.RegisterType((*TemporalDeploymentSpec)(nil), "services.saasapi.operator.cell.v1.TemporalDeploymentSpec")
	proto.RegisterType((*Deployments)(nil), "services.saasapi.operator.cell.v1.Deployments")
	proto.RegisterType((*InfraVersion)(nil), "services.saasapi.operator.cell.v1.InfraVersion")
	proto.RegisterType((*RMSpec)(nil), "services.saasapi.operator.cell.v1.RMSpec")
	proto.RegisterType((*Opa)(nil), "services.saasapi.operator.cell.v1.Opa")
	proto.RegisterType((*Visibility)(nil), "services.saasapi.operator.cell.v1.Visibility")
	proto.RegisterType((*Replication)(nil), "services.saasapi.operator.cell.v1.Replication")
	proto.RegisterType((*MeteringValidation)(nil), "services.saasapi.operator.cell.v1.MeteringValidation")
	proto.RegisterType((*AdvancedCellSpecs)(nil), "services.saasapi.operator.cell.v1.AdvancedCellSpecs")
	proto.RegisterType((*CellSpec)(nil), "services.saasapi.operator.cell.v1.CellSpec")
	proto.RegisterType((*Cell)(nil), "services.saasapi.operator.cell.v1.Cell")
}

func init() {
	proto.RegisterFile("services/saasapi/operator/cell/v1/message.proto", fileDescriptor_da4769aca3df1c34)
}

var fileDescriptor_da4769aca3df1c34 = []byte{
	// 1494 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x58, 0x41, 0x73, 0x13, 0x47,
	0x16, 0xb6, 0x64, 0xd9, 0x96, 0x9e, 0x0c, 0xbb, 0x74, 0xb1, 0x94, 0x60, 0xa9, 0x59, 0xa3, 0x62,
	0x59, 0xb3, 0xc5, 0x4a, 0xa0, 0x25, 0x55, 0x21, 0x49, 0x51, 0x11, 0x02, 0x0a, 0x27, 0x80, 0xc5,
	0xd8, 0x98, 0x2a, 0x2a, 0x97, 0xd6, 0xcc, 0xf3, 0xa8, 0xe3, 0x99, 0xe9, 0xa9, 0xee, 0x96, 0x6c,
	0xe5, 0x94, 0x4b, 0xaa, 0x72, 0xcc, 0xcf, 0xc8, 0x39, 0xe7, 0x5c, 0x72, 0x49, 0xe5, 0x92, 0x2a,
	0x8e, 0x1c, 0x83, 0xb9, 0xa4, 0x72, 0xe2, 0x90, 0x1f, 0x90, 0xea, 0x9e, 0x19, 0x69, 0x24, 0x0b,
	0x7b, 0xe0, 0x64, 0xbd, 0xf7, 0xbe, 0xf7, 0x4d, 0x4f, 0xcf, 0x7b, 0x5f, 0xbf, 0x36, 0x34, 0x25,
	0x8a, 0x21, 0x73, 0x50, 0x36, 0x25, 0xa5, 0x92, 0x46, 0xac, 0xc9, 0x23, 0x14, 0x54, 0x71, 0xd1,
	0x74, 0xd0, 0xf7, 0x9b, 0xc3, 0x1b, 0xcd, 0x00, 0xa5, 0xa4, 0x1e, 0x36, 0x22, 0xc1, 0x15, 0x27,
	0x97, 0xd2, 0x84, 0x46, 0x92, 0xd0, 0x48, 0x13, 0x1a, 0x3a, 0xa1, 0x31, 0xbc, 0x71, 0xc1, 0xf2,
	0x38, 0xf7, 0x7c, 0x6c, 0x9a, 0x84, 0xde, 0x60, 0xb7, 0xe9, 0x0e, 0x04, 0x55, 0x8c, 0x87, 0x31,
	0x45, 0xfd, 0x3f, 0x70, 0xaa, 0xe3, 0xf3, 0x81, 0xdb, 0x15, 0x7c, 0xc8, 0x5c, 0x14, 0xe4, 0x1c,
	0x2c, 0x0b, 0xf4, 0x18, 0x0f, 0x6b, 0x85, 0xb5, 0xc2, 0x7a, 0xc5, 0x4e, 0xac, 0xfa, 0x37, 0x05,
	0x58, 0x6a, 0x4b, 0x25, 0x28, 0x21, 0x50, 0x52, 0x0c, 0x45, 0x12, 0x37, 0xbf, 0x49, 0x0d, 0x56,
	0x9c, 0xa7, 0x1d, 0x3e, 0x08, 0x55, 0xad, 0xb8, 0x56, 0x58, 0x2f, 0xd9, 0xa9, 0xa9, 0x23, 0xee,
	0x9d, 0x38, 0xb2, 0x18, 0x47, 0x12, 0x93, 0xdc, 0x84, 0x7f, 0x50, 0x4d, 0x78, 0xef, 0x20, 0xa2,
	0xa1, 0x64, 0x3c, 0xbc, 0x17, 0xd2, 0x9e, 0x8f, 0x6e, 0xad, 0xb4, 0x56, 0x58, 0x2f, 0xdb, 0xf3,
	0x83, 0xf5, 0xc7, 0x70, 0xfa, 0x2e, 0x46, 0x3e, 0x1f, 0x05, 0x18, 0xaa, 0xad, 0x08, 0x1d, 0xfd,
	0x84, 0x21, 0x0a, 0x39, 0x59, 0x72, 0x6a, 0x92, 0x3a, 0xac, 0x0a, 0x8c, 0x7c, 0xe6, 0xd0, 0xec,
	0xd2, 0xa6, 0x7c, 0xf5, 0x1f, 0x8a, 0x70, 0x6e, 0x1b, 0x83, 0x88, 0x0b, 0xea, 0xe7, 0x26, 0xfe,
	0x2f, 0xfc, 0x7d, 0x57, 0xf0, 0x50, 0x61, 0xe8, 0xda, 0x31, 0x99, 0x4c, 0xc8, 0x8f, 0xf8, 0xc9,
	0x3a, 0xfc, 0xad, 0xcf, 0xa4, 0xe2, 0x62, 0x34, 0x86, 0xc6, 0x1b, 0x31, 0xeb, 0xd6, 0xac, 0x01,
	0x55, 0x4e, 0x9f, 0x85, 0xde, 0x18, 0x5a, 0x8a, 0x59, 0x67, 0xfd, 0xe4, 0x0a, 0x9c, 0xde, 0xe7,
	0x62, 0x0f, 0xc5, 0x18, 0xb9, 0x64, 0x90, 0x33, 0x5e, 0x72, 0x19, 0x4e, 0x51, 0x0f, 0x43, 0x35,
	0x86, 0x2d, 0x1b, 0xd8, 0xb4, 0x93, 0x34, 0x80, 0x50, 0x37, 0x60, 0xe1, 0x36, 0xe7, 0xbe, 0x1c,
	0x43, 0x57, 0x0c, 0x74, 0x4e, 0xa4, 0xfe, 0xed, 0x22, 0x54, 0x27, 0x9b, 0x25, 0x49, 0x07, 0x16,
	0x79, 0x44, 0xcd, 0x2e, 0x55, 0x5b, 0x37, 0x1a, 0x27, 0x96, 0x65, 0x63, 0x7a, 0xa7, 0x6d, 0x9d,
	0x4d, 0x1e, 0x41, 0xd9, 0xe3, 0x1d, 0x1a, 0x52, 0x31, 0x32, 0x9b, 0xf9, 0x5e, 0x4c, 0x63, 0x0a,
	0xbd, 0xa6, 0x7d, 0xec, 0x99, 0xbd, 0x7e, 0xbf, 0x35, 0xed, 0x63, 0x8f, 0x3c, 0x85, 0xb2, 0x4a,
	0x8a, 0xc3, 0x7c, 0x8a, 0x6a, 0xeb, 0x56, 0x0e, 0xa6, 0xf9, 0xf5, 0x64, 0x8f, 0xa9, 0xc8, 0x06,
	0x2c, 0xef, 0x63, 0xaf, 0x1d, 0x31, 0xf3, 0xd5, 0xde, 0x6b, 0x79, 0x09, 0x41, 0xbd, 0x0b, 0xab,
	0x1b, 0xe1, 0xae, 0xa0, 0x3b, 0x49, 0x69, 0x9e, 0x85, 0xa5, 0x80, 0x7e, 0xc9, 0xe3, 0xf6, 0x2c,
	0xd9, 0xb1, 0x61, 0xbc, 0x2c, 0xe4, 0x22, 0xa9, 0xd2, 0xd8, 0xd0, 0xde, 0x48, 0x17, 0x56, 0x52,
	0x90, 0xb1, 0x51, 0xff, 0xa3, 0x00, 0xcb, 0xf6, 0x23, 0xd3, 0x01, 0xd7, 0xe0, 0x0c, 0x75, 0x1c,
	0x8c, 0x14, 0x0b, 0xbd, 0x67, 0x5c, 0xec, 0xf9, 0x9c, 0xba, 0x86, 0xb8, 0x6c, 0x1f, 0x0d, 0x90,
	0x16, 0x9c, 0x0d, 0xe8, 0x41, 0xdb, 0xf7, 0xf9, 0x3e, 0xba, 0x8f, 0x69, 0x80, 0x32, 0xa2, 0x0e,
	0xa6, 0x9d, 0x31, 0x37, 0x46, 0xee, 0xc0, 0xc5, 0x80, 0x1e, 0x6c, 0x29, 0xaa, 0x70, 0x5b, 0xe8,
	0x4e, 0xd7, 0xda, 0x24, 0xbb, 0x28, 0xb6, 0xd0, 0xe1, 0xa1, 0x9b, 0xac, 0xec, 0x58, 0x0c, 0xf9,
	0x08, 0x6a, 0x01, 0x3d, 0x78, 0x10, 0x77, 0x53, 0x57, 0xef, 0x83, 0x54, 0x18, 0x3a, 0x68, 0x77,
	0xb7, 0x92, 0xfe, 0x79, 0x6b, 0xbc, 0xfe, 0x53, 0x11, 0x16, 0x37, 0x23, 0x4a, 0x2e, 0x42, 0x65,
	0x2f, 0x90, 0x9f, 0xe3, 0xa8, 0x2d, 0xd2, 0x6e, 0x9f, 0x38, 0x88, 0x05, 0xd0, 0x1b, 0x38, 0x7b,
	0xa8, 0xf4, 0xca, 0xcd, 0xfb, 0x54, 0xec, 0x8c, 0x47, 0x0b, 0x4d, 0x6c, 0xd9, 0xb1, 0x74, 0x2e,
	0x1a, 0xc4, 0x94, 0x2f, 0xe6, 0x08, 0x5d, 0x1f, 0xbb, 0x54, 0xf5, 0xcd, 0xba, 0x0c, 0x47, 0xea,
	0x21, 0x17, 0xa0, 0xdc, 0xe7, 0x52, 0x75, 0xb9, 0x50, 0xa6, 0x2a, 0x2a, 0xf6, 0xd8, 0xd6, 0xab,
	0xa3, 0x03, 0xd5, 0xff, 0xca, 0xa4, 0x2e, 0xc7, 0xab, 0x1b, 0x3b, 0xc8, 0x1a, 0x54, 0x8d, 0xb1,
	0xd3, 0x32, 0xf1, 0x15, 0x13, 0xcf, 0xba, 0x8c, 0x0a, 0x0c, 0x54, 0xff, 0x7a, 0x7b, 0xe0, 0x32,
	0xfd, 0xe6, 0xb5, 0xb2, 0xc1, 0x4c, 0x3b, 0x53, 0x9e, 0xeb, 0x77, 0x79, 0x40, 0x59, 0x58, 0xab,
	0x4c, 0x78, 0x12, 0x97, 0x2e, 0x98, 0x81, 0xc4, 0x9d, 0x56, 0x0d, 0x4c, 0x0d, 0xc4, 0x46, 0xfd,
	0xe7, 0x02, 0xc0, 0x0e, 0x93, 0xac, 0xc7, 0x7c, 0xa6, 0x46, 0xe4, 0x39, 0xac, 0xa3, 0x11, 0xeb,
	0x67, 0x82, 0x29, 0xdc, 0xe6, 0xf1, 0x57, 0xa2, 0x62, 0xd4, 0x76, 0x87, 0x34, 0x74, 0xd0, 0x9d,
	0x60, 0x93, 0x5a, 0xca, 0x8d, 0x27, 0x5f, 0xc0, 0xd5, 0x18, 0x6b, 0x23, 0x75, 0xef, 0x0b, 0x1e,
	0x1c, 0x47, 0x5e, 0x34, 0xe4, 0xf9, 0x13, 0xea, 0xbf, 0x16, 0xa1, 0x9a, 0x68, 0x9c, 0x2e, 0x31,
	0xb2, 0x0f, 0x57, 0xc5, 0xc4, 0xdc, 0xa6, 0x72, 0xef, 0x3e, 0x2a, 0xa7, 0x8f, 0xa2, 0xed, 0x79,
	0x02, 0x3d, 0xe3, 0xdd, 0x08, 0x15, 0x8a, 0x21, 0xf5, 0x13, 0xf1, 0x3b, 0xdf, 0x88, 0x0f, 0xdc,
	0x46, 0x7a, 0xe0, 0x36, 0xee, 0x26, 0x07, 0xae, 0x9d, 0x9f, 0x6b, 0xce, 0x83, 0xbb, 0x82, 0x3b,
	0x28, 0x25, 0x17, 0x8f, 0xb9, 0x36, 0x37, 0x42, 0xa6, 0x18, 0xf5, 0x9f, 0x51, 0xa6, 0x12, 0xad,
	0x7c, 0x87, 0x07, 0xbf, 0x9d, 0x8b, 0x3c, 0x84, 0x4b, 0xf3, 0x57, 0xd9, 0xa5, 0x82, 0xfa, 0x3e,
	0xfa, 0x4c, 0x06, 0x49, 0x4f, 0x9e, 0x0c, 0xac, 0xff, 0x59, 0x02, 0xf2, 0x08, 0x15, 0x0a, 0x16,
	0x7a, 0x3b, 0xd4, 0x67, 0x6e, 0xbc, 0xad, 0x36, 0x5c, 0x96, 0x7b, 0x2c, 0x8a, 0x75, 0x7a, 0xb6,
	0xad, 0x27, 0xb8, 0xa4, 0x38, 0x72, 0x61, 0xc9, 0xa7, 0xf0, 0xcf, 0x09, 0xae, 0xed, 0xcc, 0x52,
	0xc5, 0xa5, 0x70, 0x1c, 0x44, 0xbf, 0xfa, 0x24, 0xdc, 0xf1, 0xb9, 0x44, 0x77, 0x4b, 0x71, 0x41,
	0x3d, 0xcc, 0xf0, 0x2c, 0x1a, 0x9e, 0x93, 0x81, 0xe4, 0x01, 0xfc, 0x6b, 0x02, 0xda, 0x8c, 0x30,
	0x3c, 0xca, 0x15, 0x8f, 0x39, 0x27, 0xc1, 0xb4, 0xaa, 0x6a, 0x48, 0x57, 0xf0, 0xe0, 0xc9, 0xc3,
	0x4c, 0xfa, 0x92, 0x49, 0x9f, 0x1b, 0x23, 0xf7, 0xc1, 0x92, 0x33, 0x7b, 0xf5, 0x80, 0x0f, 0x84,
	0x3f, 0xda, 0x1c, 0xa2, 0x10, 0xcc, 0x45, 0x23, 0x22, 0x05, 0xfb, 0x04, 0x94, 0x19, 0xd1, 0x9c,
	0x79, 0xe9, 0x2b, 0x26, 0x7d, 0x7e, 0x90, 0x7c, 0x02, 0xe7, 0xf9, 0xe4, 0x55, 0x66, 0x32, 0xcb,
	0x26, 0xf3, 0xed, 0x00, 0xfd, 0x25, 0x9d, 0xec, 0xa6, 0xce, 0xe4, 0x57, 0x4c, 0xfe, 0x71, 0x90,
	0xfa, 0x8f, 0x25, 0x38, 0x93, 0x76, 0x77, 0x07, 0x7d, 0x5f, 0x1f, 0x65, 0x66, 0x62, 0x52, 0x3c,
	0x7a, 0x88, 0x43, 0xf4, 0x13, 0x81, 0x8b, 0x65, 0x7e, 0xc6, 0x4b, 0x3e, 0x8c, 0x67, 0x99, 0xb8,
	0xab, 0xae, 0xe4, 0x38, 0x98, 0x37, 0x23, 0x9a, 0x0e, 0x30, 0x30, 0x9c, 0xa8, 0x4f, 0x3c, 0x78,
	0xfc, 0x2f, 0x07, 0xc1, 0x44, 0x81, 0xec, 0x0c, 0x01, 0xe9, 0x42, 0x35, 0xd3, 0x62, 0xc9, 0xf8,
	0xd1, 0xc8, 0xc1, 0x97, 0x91, 0x30, 0x3b, 0x4b, 0x41, 0x3c, 0xb8, 0x14, 0xa6, 0x47, 0x6f, 0x87,
	0x3a, 0x7d, 0xb4, 0x71, 0x57, 0xa0, 0xec, 0xa7, 0xba, 0xb3, 0xcd, 0x02, 0x4c, 0x26, 0x92, 0x63,
	0xe4, 0xe4, 0x64, 0x0e, 0xb2, 0x0d, 0xff, 0xd6, 0xab, 0x6b, 0xeb, 0x21, 0x53, 0x6b, 0xc3, 0x93,
	0x01, 0x0e, 0x50, 0xb7, 0xdc, 0x90, 0x29, 0x86, 0x99, 0xe3, 0x3d, 0x9e, 0x46, 0xf3, 0x81, 0x09,
	0x02, 0x09, 0x8e, 0xa8, 0x89, 0x29, 0xc5, 0x6a, 0xeb, 0x83, 0x1c, 0xfb, 0x72, 0x54, 0x8a, 0xec,
	0x39, 0x84, 0xf5, 0x97, 0x25, 0x28, 0xa7, 0x65, 0xa3, 0x2f, 0x3b, 0x3a, 0x9c, 0x4c, 0x53, 0xe6,
	0x37, 0xd9, 0x81, 0x53, 0x4e, 0xf6, 0xce, 0x94, 0xd4, 0xca, 0xf5, 0x1c, 0x4b, 0x98, 0xba, 0x6b,
	0xd9, 0xd3, 0x34, 0xe4, 0x36, 0x2c, 0x99, 0x3b, 0x4f, 0x52, 0x3a, 0xeb, 0x39, 0xf8, 0xcc, 0x8d,
	0xcc, 0x8e, 0xd3, 0x74, 0xc1, 0xb8, 0x93, 0xa1, 0xfc, 0x1d, 0x0a, 0x26, 0x33, 0xca, 0xdb, 0x59,
	0x0a, 0xb2, 0x05, 0xab, 0x2c, 0x33, 0x5c, 0x26, 0xb5, 0xd1, 0xcc, 0x41, 0x99, 0x9d, 0x49, 0xed,
	0x29, 0x12, 0x72, 0x0b, 0x8a, 0x22, 0x30, 0x5f, 0xbe, 0xda, 0xba, 0x9a, 0xa7, 0x9c, 0xcd, 0x2c,
	0x6a, 0x17, 0x45, 0x40, 0x6e, 0xc3, 0x05, 0x77, 0x14, 0xd2, 0x80, 0x39, 0x1d, 0x1e, 0xee, 0x32,
	0x2f, 0x6d, 0x79, 0xf9, 0x99, 0x4c, 0x2a, 0xa1, 0x62, 0x1f, 0x83, 0x20, 0x5d, 0x28, 0xd3, 0x44,
	0x18, 0x8c, 0x10, 0x55, 0x5b, 0x37, 0xf3, 0x6c, 0xf2, 0xac, 0x96, 0xd8, 0x63, 0x16, 0x73, 0x19,
	0xa6, 0x9e, 0xac, 0x55, 0xd6, 0x16, 0xcd, 0x65, 0x98, 0x7a, 0x52, 0xdf, 0x1b, 0xa3, 0x81, 0x88,
	0xb8, 0xc4, 0x1a, 0x18, 0x77, 0x6a, 0xd6, 0xaf, 0x41, 0x49, 0x93, 0x90, 0xd3, 0x50, 0x64, 0x6e,
	0xa2, 0x3f, 0x45, 0xe6, 0x9a, 0xf1, 0x9c, 0xbb, 0xe8, 0x9b, 0x4a, 0x5a, 0xb5, 0x63, 0xe3, 0x4e,
	0xff, 0xc5, 0x2b, 0x6b, 0xe1, 0xe5, 0x2b, 0x6b, 0xe1, 0xcd, 0x2b, 0xab, 0xf0, 0xf5, 0xa1, 0x55,
	0xf8, 0xfe, 0xd0, 0x2a, 0xfc, 0x72, 0x68, 0x15, 0x5e, 0x1c, 0x5a, 0x85, 0xdf, 0x0e, 0xad, 0xc2,
	0xef, 0x87, 0xd6, 0xc2, 0x9b, 0x43, 0xab, 0xf0, 0xdd, 0x6b, 0x6b, 0xe1, 0xc5, 0x6b, 0x6b, 0xe1,
	0xe5, 0x6b, 0x6b, 0xe1, 0x79, 0x4b, 0x05, 0x91, 0xf0, 0x1b, 0xa6, 0xb4, 0x4e, 0xfe, 0x8f, 0xc2,
	0xc7, 0xfa, 0x6f, 0x6f, 0xd9, 0x74, 0xf9, 0xff, 0xff, 0x0a, 0x00, 0x00, 0xff, 0xff, 0xa5, 0xa1,
	0x52, 0x31, 0x82, 0x10, 0x00, 0x00,
}

func (this *CloudProvider) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CloudProvider)
	if !ok {
		that2, ok := that.(CloudProvider)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Region != that1.Region {
		return false
	}
	return true
}
func (this *Astra) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Astra)
	if !ok {
		that2, ok := that.(Astra)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Tier != that1.Tier {
		return false
	}
	if this.CUCount != that1.CUCount {
		return false
	}
	if this.DBCount != that1.DBCount {
		return false
	}
	if this.AstraExpansionEnabled != that1.AstraExpansionEnabled {
		return false
	}
	return true
}
func (this *DeploymentSpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeploymentSpec)
	if !ok {
		that2, ok := that.(DeploymentSpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	if this.ReplicaCount != that1.ReplicaCount {
		return false
	}
	return true
}
func (this *TemporalDeploymentSpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TemporalDeploymentSpec)
	if !ok {
		that2, ok := that.(TemporalDeploymentSpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	if this.FrontendReplicas != that1.FrontendReplicas {
		return false
	}
	if this.HistoryReplicas != that1.HistoryReplicas {
		return false
	}
	if this.MatchingReplicas != that1.MatchingReplicas {
		return false
	}
	if this.WorkerReplicas != that1.WorkerReplicas {
		return false
	}
	if this.AgentReplicas != that1.AgentReplicas {
		return false
	}
	if this.AdminToolsReplicas != that1.AdminToolsReplicas {
		return false
	}
	return true
}
func (this *Deployments) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Deployments)
	if !ok {
		that2, ok := that.(Deployments)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Opa.Equal(that1.Opa) {
		return false
	}
	if !this.GoCanary.Equal(that1.GoCanary) {
		return false
	}
	if !this.Web.Equal(that1.Web) {
		return false
	}
	if !this.Temporal.Equal(that1.Temporal) {
		return false
	}
	if !this.WebApi.Equal(that1.WebApi) {
		return false
	}
	return true
}
func (this *InfraVersion) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*InfraVersion)
	if !ok {
		that2, ok := that.(InfraVersion)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Major != that1.Major {
		return false
	}
	if this.Minor != that1.Minor {
		return false
	}
	if this.Patch != that1.Patch {
		return false
	}
	return true
}
func (this *RMSpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RMSpec)
	if !ok {
		that2, ok := that.(RMSpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AcceptingWorkload != that1.AcceptingWorkload {
		return false
	}
	if this.MaxAllowedNamespaces != that1.MaxAllowedNamespaces {
		return false
	}
	if this.MaxStateTransitionsPerSecond != that1.MaxStateTransitionsPerSecond {
		return false
	}
	if this.MaxHistoryPersistenceRPS != that1.MaxHistoryPersistenceRPS {
		return false
	}
	return true
}
func (this *Opa) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Opa)
	if !ok {
		that2, ok := that.(Opa)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.KmsKeyArn != that1.KmsKeyArn {
		return false
	}
	if this.BucketName != that1.BucketName {
		return false
	}
	if this.BucketRegion != that1.BucketRegion {
		return false
	}
	if this.BundlePath != that1.BundlePath {
		return false
	}
	if this.HostPort != that1.HostPort {
		return false
	}
	if this.AuthzPath != that1.AuthzPath {
		return false
	}
	if this.AuthzV2Path != that1.AuthzV2Path {
		return false
	}
	if this.Auth0Audience != that1.Auth0Audience {
		return false
	}
	if this.Auth0Domain != that1.Auth0Domain {
		return false
	}
	if this.UseV2 != that1.UseV2 {
		return false
	}
	return true
}
func (this *Visibility) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Visibility)
	if !ok {
		that2, ok := that.(Visibility)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.EnableWriteToSecondaryAdvancedVisibility != that1.EnableWriteToSecondaryAdvancedVisibility {
		return false
	}
	if this.EnableReadFromSecondaryAdvancedVisibility != that1.EnableReadFromSecondaryAdvancedVisibility {
		return false
	}
	return true
}
func (this *Replication) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Replication)
	if !ok {
		that2, ok := that.(Replication)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ReplicationTaskFetcherAggregationInterval.Equal(that1.ReplicationTaskFetcherAggregationInterval) {
		return false
	}
	if !this.ReplicationTaskProcessorNoTaskInitialWait.Equal(that1.ReplicationTaskProcessorNoTaskInitialWait) {
		return false
	}
	if this.ReplicationTaskFetcherParallelism != that1.ReplicationTaskFetcherParallelism {
		return false
	}
	return true
}
func (this *MeteringValidation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MeteringValidation)
	if !ok {
		that2, ok := that.(MeteringValidation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SkipCanaryStateTransitionsValidation != that1.SkipCanaryStateTransitionsValidation {
		return false
	}
	if this.SkipCanaryActionsValidation != that1.SkipCanaryActionsValidation {
		return false
	}
	if this.SkipCanaryClosedStorageValidation != that1.SkipCanaryClosedStorageValidation {
		return false
	}
	if this.SkipCanaryOpenStorageValidation != that1.SkipCanaryOpenStorageValidation {
		return false
	}
	if this.SkipPromQLValidation != that1.SkipPromQLValidation {
		return false
	}
	if this.StateTransitionsHourlyOverride != that1.StateTransitionsHourlyOverride {
		return false
	}
	if this.ActionsHourlyOverride != that1.ActionsHourlyOverride {
		return false
	}
	if this.OpenStorageHourlyOverride != that1.OpenStorageHourlyOverride {
		return false
	}
	if this.ClosedStorageHourlyOverride != that1.ClosedStorageHourlyOverride {
		return false
	}
	return true
}
func (this *AdvancedCellSpecs) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AdvancedCellSpecs)
	if !ok {
		that2, ok := that.(AdvancedCellSpecs)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TopLevelDomain != that1.TopLevelDomain {
		return false
	}
	if !this.Opa.Equal(that1.Opa) {
		return false
	}
	if !this.Visibility.Equal(that1.Visibility) {
		return false
	}
	if !this.Replication.Equal(that1.Replication) {
		return false
	}
	if !this.NamespaceCacheRefreshIntervalTime.Equal(that1.NamespaceCacheRefreshIntervalTime) {
		return false
	}
	if this.SaasAgentTaskQueueActivitiesPerSecond != that1.SaasAgentTaskQueueActivitiesPerSecond {
		return false
	}
	if !this.MeteringValidation.Equal(that1.MeteringValidation) {
		return false
	}
	return true
}
func (this *CellSpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CellSpec)
	if !ok {
		that2, ok := that.(CellSpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Ring != that1.Ring {
		return false
	}
	if !this.CloudProvider.Equal(that1.CloudProvider) {
		return false
	}
	if !this.Astra.Equal(that1.Astra) {
		return false
	}
	if !this.Deployments.Equal(that1.Deployments) {
		return false
	}
	if !this.InfraVersion.Equal(that1.InfraVersion) {
		return false
	}
	if !this.Rm.Equal(that1.Rm) {
		return false
	}
	if this.DynamicConfigOverridesJson != that1.DynamicConfigOverridesJson {
		return false
	}
	if !this.Advanced.Equal(that1.Advanced) {
		return false
	}
	if len(this.Tags) != len(that1.Tags) {
		return false
	}
	for i := range this.Tags {
		if this.Tags[i] != that1.Tags[i] {
			return false
		}
	}
	if len(this.Purpose) != len(that1.Purpose) {
		return false
	}
	for i := range this.Purpose {
		if this.Purpose[i] != that1.Purpose[i] {
			return false
		}
	}
	return true
}
func (this *Cell) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Cell)
	if !ok {
		that2, ok := that.(Cell)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if !bytes.Equal(this.Model, that1.Model) {
		return false
	}
	return true
}
func (this *CloudProvider) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&cell.CloudProvider{")
	s = append(s, "Region: "+fmt.Sprintf("%#v", this.Region)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Astra) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&cell.Astra{")
	s = append(s, "Tier: "+fmt.Sprintf("%#v", this.Tier)+",\n")
	s = append(s, "CUCount: "+fmt.Sprintf("%#v", this.CUCount)+",\n")
	s = append(s, "DBCount: "+fmt.Sprintf("%#v", this.DBCount)+",\n")
	s = append(s, "AstraExpansionEnabled: "+fmt.Sprintf("%#v", this.AstraExpansionEnabled)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeploymentSpec) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&cell.DeploymentSpec{")
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	s = append(s, "ReplicaCount: "+fmt.Sprintf("%#v", this.ReplicaCount)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TemporalDeploymentSpec) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&cell.TemporalDeploymentSpec{")
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	s = append(s, "FrontendReplicas: "+fmt.Sprintf("%#v", this.FrontendReplicas)+",\n")
	s = append(s, "HistoryReplicas: "+fmt.Sprintf("%#v", this.HistoryReplicas)+",\n")
	s = append(s, "MatchingReplicas: "+fmt.Sprintf("%#v", this.MatchingReplicas)+",\n")
	s = append(s, "WorkerReplicas: "+fmt.Sprintf("%#v", this.WorkerReplicas)+",\n")
	s = append(s, "AgentReplicas: "+fmt.Sprintf("%#v", this.AgentReplicas)+",\n")
	s = append(s, "AdminToolsReplicas: "+fmt.Sprintf("%#v", this.AdminToolsReplicas)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Deployments) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&cell.Deployments{")
	if this.Opa != nil {
		s = append(s, "Opa: "+fmt.Sprintf("%#v", this.Opa)+",\n")
	}
	if this.GoCanary != nil {
		s = append(s, "GoCanary: "+fmt.Sprintf("%#v", this.GoCanary)+",\n")
	}
	if this.Web != nil {
		s = append(s, "Web: "+fmt.Sprintf("%#v", this.Web)+",\n")
	}
	if this.Temporal != nil {
		s = append(s, "Temporal: "+fmt.Sprintf("%#v", this.Temporal)+",\n")
	}
	if this.WebApi != nil {
		s = append(s, "WebApi: "+fmt.Sprintf("%#v", this.WebApi)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *InfraVersion) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&cell.InfraVersion{")
	s = append(s, "Major: "+fmt.Sprintf("%#v", this.Major)+",\n")
	s = append(s, "Minor: "+fmt.Sprintf("%#v", this.Minor)+",\n")
	s = append(s, "Patch: "+fmt.Sprintf("%#v", this.Patch)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RMSpec) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&cell.RMSpec{")
	s = append(s, "AcceptingWorkload: "+fmt.Sprintf("%#v", this.AcceptingWorkload)+",\n")
	s = append(s, "MaxAllowedNamespaces: "+fmt.Sprintf("%#v", this.MaxAllowedNamespaces)+",\n")
	s = append(s, "MaxStateTransitionsPerSecond: "+fmt.Sprintf("%#v", this.MaxStateTransitionsPerSecond)+",\n")
	s = append(s, "MaxHistoryPersistenceRPS: "+fmt.Sprintf("%#v", this.MaxHistoryPersistenceRPS)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Opa) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&cell.Opa{")
	s = append(s, "KmsKeyArn: "+fmt.Sprintf("%#v", this.KmsKeyArn)+",\n")
	s = append(s, "BucketName: "+fmt.Sprintf("%#v", this.BucketName)+",\n")
	s = append(s, "BucketRegion: "+fmt.Sprintf("%#v", this.BucketRegion)+",\n")
	s = append(s, "BundlePath: "+fmt.Sprintf("%#v", this.BundlePath)+",\n")
	s = append(s, "HostPort: "+fmt.Sprintf("%#v", this.HostPort)+",\n")
	s = append(s, "AuthzPath: "+fmt.Sprintf("%#v", this.AuthzPath)+",\n")
	s = append(s, "AuthzV2Path: "+fmt.Sprintf("%#v", this.AuthzV2Path)+",\n")
	s = append(s, "Auth0Audience: "+fmt.Sprintf("%#v", this.Auth0Audience)+",\n")
	s = append(s, "Auth0Domain: "+fmt.Sprintf("%#v", this.Auth0Domain)+",\n")
	s = append(s, "UseV2: "+fmt.Sprintf("%#v", this.UseV2)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Visibility) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&cell.Visibility{")
	s = append(s, "EnableWriteToSecondaryAdvancedVisibility: "+fmt.Sprintf("%#v", this.EnableWriteToSecondaryAdvancedVisibility)+",\n")
	s = append(s, "EnableReadFromSecondaryAdvancedVisibility: "+fmt.Sprintf("%#v", this.EnableReadFromSecondaryAdvancedVisibility)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Replication) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&cell.Replication{")
	if this.ReplicationTaskFetcherAggregationInterval != nil {
		s = append(s, "ReplicationTaskFetcherAggregationInterval: "+fmt.Sprintf("%#v", this.ReplicationTaskFetcherAggregationInterval)+",\n")
	}
	if this.ReplicationTaskProcessorNoTaskInitialWait != nil {
		s = append(s, "ReplicationTaskProcessorNoTaskInitialWait: "+fmt.Sprintf("%#v", this.ReplicationTaskProcessorNoTaskInitialWait)+",\n")
	}
	s = append(s, "ReplicationTaskFetcherParallelism: "+fmt.Sprintf("%#v", this.ReplicationTaskFetcherParallelism)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MeteringValidation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&cell.MeteringValidation{")
	s = append(s, "SkipCanaryStateTransitionsValidation: "+fmt.Sprintf("%#v", this.SkipCanaryStateTransitionsValidation)+",\n")
	s = append(s, "SkipCanaryActionsValidation: "+fmt.Sprintf("%#v", this.SkipCanaryActionsValidation)+",\n")
	s = append(s, "SkipCanaryClosedStorageValidation: "+fmt.Sprintf("%#v", this.SkipCanaryClosedStorageValidation)+",\n")
	s = append(s, "SkipCanaryOpenStorageValidation: "+fmt.Sprintf("%#v", this.SkipCanaryOpenStorageValidation)+",\n")
	s = append(s, "SkipPromQLValidation: "+fmt.Sprintf("%#v", this.SkipPromQLValidation)+",\n")
	s = append(s, "StateTransitionsHourlyOverride: "+fmt.Sprintf("%#v", this.StateTransitionsHourlyOverride)+",\n")
	s = append(s, "ActionsHourlyOverride: "+fmt.Sprintf("%#v", this.ActionsHourlyOverride)+",\n")
	s = append(s, "OpenStorageHourlyOverride: "+fmt.Sprintf("%#v", this.OpenStorageHourlyOverride)+",\n")
	s = append(s, "ClosedStorageHourlyOverride: "+fmt.Sprintf("%#v", this.ClosedStorageHourlyOverride)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AdvancedCellSpecs) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&cell.AdvancedCellSpecs{")
	s = append(s, "TopLevelDomain: "+fmt.Sprintf("%#v", this.TopLevelDomain)+",\n")
	if this.Opa != nil {
		s = append(s, "Opa: "+fmt.Sprintf("%#v", this.Opa)+",\n")
	}
	if this.Visibility != nil {
		s = append(s, "Visibility: "+fmt.Sprintf("%#v", this.Visibility)+",\n")
	}
	if this.Replication != nil {
		s = append(s, "Replication: "+fmt.Sprintf("%#v", this.Replication)+",\n")
	}
	if this.NamespaceCacheRefreshIntervalTime != nil {
		s = append(s, "NamespaceCacheRefreshIntervalTime: "+fmt.Sprintf("%#v", this.NamespaceCacheRefreshIntervalTime)+",\n")
	}
	s = append(s, "SaasAgentTaskQueueActivitiesPerSecond: "+fmt.Sprintf("%#v", this.SaasAgentTaskQueueActivitiesPerSecond)+",\n")
	if this.MeteringValidation != nil {
		s = append(s, "MeteringValidation: "+fmt.Sprintf("%#v", this.MeteringValidation)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CellSpec) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&cell.CellSpec{")
	s = append(s, "Ring: "+fmt.Sprintf("%#v", this.Ring)+",\n")
	if this.CloudProvider != nil {
		s = append(s, "CloudProvider: "+fmt.Sprintf("%#v", this.CloudProvider)+",\n")
	}
	if this.Astra != nil {
		s = append(s, "Astra: "+fmt.Sprintf("%#v", this.Astra)+",\n")
	}
	if this.Deployments != nil {
		s = append(s, "Deployments: "+fmt.Sprintf("%#v", this.Deployments)+",\n")
	}
	if this.InfraVersion != nil {
		s = append(s, "InfraVersion: "+fmt.Sprintf("%#v", this.InfraVersion)+",\n")
	}
	if this.Rm != nil {
		s = append(s, "Rm: "+fmt.Sprintf("%#v", this.Rm)+",\n")
	}
	s = append(s, "DynamicConfigOverridesJson: "+fmt.Sprintf("%#v", this.DynamicConfigOverridesJson)+",\n")
	if this.Advanced != nil {
		s = append(s, "Advanced: "+fmt.Sprintf("%#v", this.Advanced)+",\n")
	}
	s = append(s, "Tags: "+fmt.Sprintf("%#v", this.Tags)+",\n")
	s = append(s, "Purpose: "+fmt.Sprintf("%#v", this.Purpose)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Cell) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&cell.Cell{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Model: "+fmt.Sprintf("%#v", this.Model)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringMessage(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *CloudProvider) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CloudProvider) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CloudProvider) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Region) > 0 {
		i -= len(m.Region)
		copy(dAtA[i:], m.Region)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Region)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Astra) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Astra) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Astra) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AstraExpansionEnabled {
		i--
		if m.AstraExpansionEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.DBCount != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.DBCount))
		i--
		dAtA[i] = 0x18
	}
	if m.CUCount != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.CUCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Tier) > 0 {
		i -= len(m.Tier)
		copy(dAtA[i:], m.Tier)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Tier)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeploymentSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeploymentSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeploymentSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ReplicaCount != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.ReplicaCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TemporalDeploymentSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TemporalDeploymentSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TemporalDeploymentSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AdminToolsReplicas != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.AdminToolsReplicas))
		i--
		dAtA[i] = 0x38
	}
	if m.AgentReplicas != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.AgentReplicas))
		i--
		dAtA[i] = 0x30
	}
	if m.WorkerReplicas != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.WorkerReplicas))
		i--
		dAtA[i] = 0x28
	}
	if m.MatchingReplicas != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.MatchingReplicas))
		i--
		dAtA[i] = 0x20
	}
	if m.HistoryReplicas != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.HistoryReplicas))
		i--
		dAtA[i] = 0x18
	}
	if m.FrontendReplicas != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.FrontendReplicas))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Deployments) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Deployments) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Deployments) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.WebApi != nil {
		{
			size, err := m.WebApi.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Temporal != nil {
		{
			size, err := m.Temporal.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Web != nil {
		{
			size, err := m.Web.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.GoCanary != nil {
		{
			size, err := m.GoCanary.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Opa != nil {
		{
			size, err := m.Opa.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InfraVersion) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InfraVersion) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InfraVersion) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Patch != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Patch))
		i--
		dAtA[i] = 0x18
	}
	if m.Minor != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Minor))
		i--
		dAtA[i] = 0x10
	}
	if m.Major != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Major))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RMSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RMSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RMSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxHistoryPersistenceRPS != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.MaxHistoryPersistenceRPS))
		i--
		dAtA[i] = 0x20
	}
	if m.MaxStateTransitionsPerSecond != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.MaxStateTransitionsPerSecond))
		i--
		dAtA[i] = 0x18
	}
	if m.MaxAllowedNamespaces != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.MaxAllowedNamespaces))
		i--
		dAtA[i] = 0x10
	}
	if m.AcceptingWorkload {
		i--
		if m.AcceptingWorkload {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Opa) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Opa) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Opa) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UseV2 {
		i--
		if m.UseV2 {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if len(m.Auth0Domain) > 0 {
		i -= len(m.Auth0Domain)
		copy(dAtA[i:], m.Auth0Domain)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Auth0Domain)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Auth0Audience) > 0 {
		i -= len(m.Auth0Audience)
		copy(dAtA[i:], m.Auth0Audience)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Auth0Audience)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.AuthzV2Path) > 0 {
		i -= len(m.AuthzV2Path)
		copy(dAtA[i:], m.AuthzV2Path)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.AuthzV2Path)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.AuthzPath) > 0 {
		i -= len(m.AuthzPath)
		copy(dAtA[i:], m.AuthzPath)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.AuthzPath)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.HostPort) > 0 {
		i -= len(m.HostPort)
		copy(dAtA[i:], m.HostPort)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.HostPort)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.BundlePath) > 0 {
		i -= len(m.BundlePath)
		copy(dAtA[i:], m.BundlePath)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.BundlePath)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.BucketRegion) > 0 {
		i -= len(m.BucketRegion)
		copy(dAtA[i:], m.BucketRegion)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.BucketRegion)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.BucketName) > 0 {
		i -= len(m.BucketName)
		copy(dAtA[i:], m.BucketName)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.BucketName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.KmsKeyArn) > 0 {
		i -= len(m.KmsKeyArn)
		copy(dAtA[i:], m.KmsKeyArn)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.KmsKeyArn)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Visibility) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Visibility) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Visibility) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EnableReadFromSecondaryAdvancedVisibility {
		i--
		if m.EnableReadFromSecondaryAdvancedVisibility {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.EnableWriteToSecondaryAdvancedVisibility {
		i--
		if m.EnableWriteToSecondaryAdvancedVisibility {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Replication) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Replication) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Replication) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ReplicationTaskFetcherParallelism != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.ReplicationTaskFetcherParallelism))
		i--
		dAtA[i] = 0x18
	}
	if m.ReplicationTaskProcessorNoTaskInitialWait != nil {
		{
			size, err := m.ReplicationTaskProcessorNoTaskInitialWait.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ReplicationTaskFetcherAggregationInterval != nil {
		{
			size, err := m.ReplicationTaskFetcherAggregationInterval.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MeteringValidation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MeteringValidation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MeteringValidation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ClosedStorageHourlyOverride != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.ClosedStorageHourlyOverride))))
		i--
		dAtA[i] = 0x49
	}
	if m.OpenStorageHourlyOverride != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.OpenStorageHourlyOverride))))
		i--
		dAtA[i] = 0x41
	}
	if m.ActionsHourlyOverride != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.ActionsHourlyOverride))))
		i--
		dAtA[i] = 0x39
	}
	if m.StateTransitionsHourlyOverride != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.StateTransitionsHourlyOverride))))
		i--
		dAtA[i] = 0x31
	}
	if m.SkipPromQLValidation {
		i--
		if m.SkipPromQLValidation {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.SkipCanaryOpenStorageValidation {
		i--
		if m.SkipCanaryOpenStorageValidation {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.SkipCanaryClosedStorageValidation {
		i--
		if m.SkipCanaryClosedStorageValidation {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.SkipCanaryActionsValidation {
		i--
		if m.SkipCanaryActionsValidation {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.SkipCanaryStateTransitionsValidation {
		i--
		if m.SkipCanaryStateTransitionsValidation {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AdvancedCellSpecs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdvancedCellSpecs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdvancedCellSpecs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MeteringValidation != nil {
		{
			size, err := m.MeteringValidation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.SaasAgentTaskQueueActivitiesPerSecond != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.SaasAgentTaskQueueActivitiesPerSecond))
		i--
		dAtA[i] = 0x30
	}
	if m.NamespaceCacheRefreshIntervalTime != nil {
		{
			size, err := m.NamespaceCacheRefreshIntervalTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Replication != nil {
		{
			size, err := m.Replication.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Visibility != nil {
		{
			size, err := m.Visibility.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Opa != nil {
		{
			size, err := m.Opa.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.TopLevelDomain) > 0 {
		i -= len(m.TopLevelDomain)
		copy(dAtA[i:], m.TopLevelDomain)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.TopLevelDomain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CellSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CellSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CellSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Purpose) > 0 {
		for iNdEx := len(m.Purpose) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Purpose[iNdEx])
			copy(dAtA[i:], m.Purpose[iNdEx])
			i = encodeVarintMessage(dAtA, i, uint64(len(m.Purpose[iNdEx])))
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.Tags) > 0 {
		for iNdEx := len(m.Tags) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Tags[iNdEx])
			copy(dAtA[i:], m.Tags[iNdEx])
			i = encodeVarintMessage(dAtA, i, uint64(len(m.Tags[iNdEx])))
			i--
			dAtA[i] = 0x4a
		}
	}
	if m.Advanced != nil {
		{
			size, err := m.Advanced.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if len(m.DynamicConfigOverridesJson) > 0 {
		i -= len(m.DynamicConfigOverridesJson)
		copy(dAtA[i:], m.DynamicConfigOverridesJson)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.DynamicConfigOverridesJson)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Rm != nil {
		{
			size, err := m.Rm.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.InfraVersion != nil {
		{
			size, err := m.InfraVersion.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Deployments != nil {
		{
			size, err := m.Deployments.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Astra != nil {
		{
			size, err := m.Astra.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.CloudProvider != nil {
		{
			size, err := m.CloudProvider.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Ring != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Ring))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Cell) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Cell) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Cell) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Model) > 0 {
		i -= len(m.Model)
		copy(dAtA[i:], m.Model)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Model)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMessage(dAtA []byte, offset int, v uint64) int {
	offset -= sovMessage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CloudProvider) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Region)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *Astra) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Tier)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.CUCount != 0 {
		n += 1 + sovMessage(uint64(m.CUCount))
	}
	if m.DBCount != 0 {
		n += 1 + sovMessage(uint64(m.DBCount))
	}
	if m.AstraExpansionEnabled {
		n += 2
	}
	return n
}

func (m *DeploymentSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.ReplicaCount != 0 {
		n += 1 + sovMessage(uint64(m.ReplicaCount))
	}
	return n
}

func (m *TemporalDeploymentSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.FrontendReplicas != 0 {
		n += 1 + sovMessage(uint64(m.FrontendReplicas))
	}
	if m.HistoryReplicas != 0 {
		n += 1 + sovMessage(uint64(m.HistoryReplicas))
	}
	if m.MatchingReplicas != 0 {
		n += 1 + sovMessage(uint64(m.MatchingReplicas))
	}
	if m.WorkerReplicas != 0 {
		n += 1 + sovMessage(uint64(m.WorkerReplicas))
	}
	if m.AgentReplicas != 0 {
		n += 1 + sovMessage(uint64(m.AgentReplicas))
	}
	if m.AdminToolsReplicas != 0 {
		n += 1 + sovMessage(uint64(m.AdminToolsReplicas))
	}
	return n
}

func (m *Deployments) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Opa != nil {
		l = m.Opa.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.GoCanary != nil {
		l = m.GoCanary.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Web != nil {
		l = m.Web.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Temporal != nil {
		l = m.Temporal.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.WebApi != nil {
		l = m.WebApi.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *InfraVersion) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Major != 0 {
		n += 1 + sovMessage(uint64(m.Major))
	}
	if m.Minor != 0 {
		n += 1 + sovMessage(uint64(m.Minor))
	}
	if m.Patch != 0 {
		n += 1 + sovMessage(uint64(m.Patch))
	}
	return n
}

func (m *RMSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AcceptingWorkload {
		n += 2
	}
	if m.MaxAllowedNamespaces != 0 {
		n += 1 + sovMessage(uint64(m.MaxAllowedNamespaces))
	}
	if m.MaxStateTransitionsPerSecond != 0 {
		n += 1 + sovMessage(uint64(m.MaxStateTransitionsPerSecond))
	}
	if m.MaxHistoryPersistenceRPS != 0 {
		n += 1 + sovMessage(uint64(m.MaxHistoryPersistenceRPS))
	}
	return n
}

func (m *Opa) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.KmsKeyArn)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.BucketName)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.BucketRegion)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.BundlePath)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.HostPort)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.AuthzPath)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.AuthzV2Path)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Auth0Audience)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Auth0Domain)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.UseV2 {
		n += 2
	}
	return n
}

func (m *Visibility) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableWriteToSecondaryAdvancedVisibility {
		n += 2
	}
	if m.EnableReadFromSecondaryAdvancedVisibility {
		n += 2
	}
	return n
}

func (m *Replication) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReplicationTaskFetcherAggregationInterval != nil {
		l = m.ReplicationTaskFetcherAggregationInterval.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.ReplicationTaskProcessorNoTaskInitialWait != nil {
		l = m.ReplicationTaskProcessorNoTaskInitialWait.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.ReplicationTaskFetcherParallelism != 0 {
		n += 1 + sovMessage(uint64(m.ReplicationTaskFetcherParallelism))
	}
	return n
}

func (m *MeteringValidation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SkipCanaryStateTransitionsValidation {
		n += 2
	}
	if m.SkipCanaryActionsValidation {
		n += 2
	}
	if m.SkipCanaryClosedStorageValidation {
		n += 2
	}
	if m.SkipCanaryOpenStorageValidation {
		n += 2
	}
	if m.SkipPromQLValidation {
		n += 2
	}
	if m.StateTransitionsHourlyOverride != 0 {
		n += 9
	}
	if m.ActionsHourlyOverride != 0 {
		n += 9
	}
	if m.OpenStorageHourlyOverride != 0 {
		n += 9
	}
	if m.ClosedStorageHourlyOverride != 0 {
		n += 9
	}
	return n
}

func (m *AdvancedCellSpecs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TopLevelDomain)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Opa != nil {
		l = m.Opa.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Visibility != nil {
		l = m.Visibility.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Replication != nil {
		l = m.Replication.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.NamespaceCacheRefreshIntervalTime != nil {
		l = m.NamespaceCacheRefreshIntervalTime.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.SaasAgentTaskQueueActivitiesPerSecond != 0 {
		n += 1 + sovMessage(uint64(m.SaasAgentTaskQueueActivitiesPerSecond))
	}
	if m.MeteringValidation != nil {
		l = m.MeteringValidation.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *CellSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ring != 0 {
		n += 1 + sovMessage(uint64(m.Ring))
	}
	if m.CloudProvider != nil {
		l = m.CloudProvider.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Astra != nil {
		l = m.Astra.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Deployments != nil {
		l = m.Deployments.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.InfraVersion != nil {
		l = m.InfraVersion.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Rm != nil {
		l = m.Rm.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.DynamicConfigOverridesJson)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Advanced != nil {
		l = m.Advanced.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			l = len(s)
			n += 1 + l + sovMessage(uint64(l))
		}
	}
	if len(m.Purpose) > 0 {
		for _, s := range m.Purpose {
			l = len(s)
			n += 1 + l + sovMessage(uint64(l))
		}
	}
	return n
}

func (m *Cell) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Model)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func sovMessage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMessage(x uint64) (n int) {
	return sovMessage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *CloudProvider) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CloudProvider{`,
		`Region:` + fmt.Sprintf("%v", this.Region) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Astra) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Astra{`,
		`Tier:` + fmt.Sprintf("%v", this.Tier) + `,`,
		`CUCount:` + fmt.Sprintf("%v", this.CUCount) + `,`,
		`DBCount:` + fmt.Sprintf("%v", this.DBCount) + `,`,
		`AstraExpansionEnabled:` + fmt.Sprintf("%v", this.AstraExpansionEnabled) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeploymentSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeploymentSpec{`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`ReplicaCount:` + fmt.Sprintf("%v", this.ReplicaCount) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TemporalDeploymentSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TemporalDeploymentSpec{`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`FrontendReplicas:` + fmt.Sprintf("%v", this.FrontendReplicas) + `,`,
		`HistoryReplicas:` + fmt.Sprintf("%v", this.HistoryReplicas) + `,`,
		`MatchingReplicas:` + fmt.Sprintf("%v", this.MatchingReplicas) + `,`,
		`WorkerReplicas:` + fmt.Sprintf("%v", this.WorkerReplicas) + `,`,
		`AgentReplicas:` + fmt.Sprintf("%v", this.AgentReplicas) + `,`,
		`AdminToolsReplicas:` + fmt.Sprintf("%v", this.AdminToolsReplicas) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Deployments) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Deployments{`,
		`Opa:` + strings.Replace(this.Opa.String(), "DeploymentSpec", "DeploymentSpec", 1) + `,`,
		`GoCanary:` + strings.Replace(this.GoCanary.String(), "DeploymentSpec", "DeploymentSpec", 1) + `,`,
		`Web:` + strings.Replace(this.Web.String(), "DeploymentSpec", "DeploymentSpec", 1) + `,`,
		`Temporal:` + strings.Replace(this.Temporal.String(), "TemporalDeploymentSpec", "TemporalDeploymentSpec", 1) + `,`,
		`WebApi:` + strings.Replace(this.WebApi.String(), "DeploymentSpec", "DeploymentSpec", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InfraVersion) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InfraVersion{`,
		`Major:` + fmt.Sprintf("%v", this.Major) + `,`,
		`Minor:` + fmt.Sprintf("%v", this.Minor) + `,`,
		`Patch:` + fmt.Sprintf("%v", this.Patch) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RMSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RMSpec{`,
		`AcceptingWorkload:` + fmt.Sprintf("%v", this.AcceptingWorkload) + `,`,
		`MaxAllowedNamespaces:` + fmt.Sprintf("%v", this.MaxAllowedNamespaces) + `,`,
		`MaxStateTransitionsPerSecond:` + fmt.Sprintf("%v", this.MaxStateTransitionsPerSecond) + `,`,
		`MaxHistoryPersistenceRPS:` + fmt.Sprintf("%v", this.MaxHistoryPersistenceRPS) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Opa) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Opa{`,
		`KmsKeyArn:` + fmt.Sprintf("%v", this.KmsKeyArn) + `,`,
		`BucketName:` + fmt.Sprintf("%v", this.BucketName) + `,`,
		`BucketRegion:` + fmt.Sprintf("%v", this.BucketRegion) + `,`,
		`BundlePath:` + fmt.Sprintf("%v", this.BundlePath) + `,`,
		`HostPort:` + fmt.Sprintf("%v", this.HostPort) + `,`,
		`AuthzPath:` + fmt.Sprintf("%v", this.AuthzPath) + `,`,
		`AuthzV2Path:` + fmt.Sprintf("%v", this.AuthzV2Path) + `,`,
		`Auth0Audience:` + fmt.Sprintf("%v", this.Auth0Audience) + `,`,
		`Auth0Domain:` + fmt.Sprintf("%v", this.Auth0Domain) + `,`,
		`UseV2:` + fmt.Sprintf("%v", this.UseV2) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Visibility) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Visibility{`,
		`EnableWriteToSecondaryAdvancedVisibility:` + fmt.Sprintf("%v", this.EnableWriteToSecondaryAdvancedVisibility) + `,`,
		`EnableReadFromSecondaryAdvancedVisibility:` + fmt.Sprintf("%v", this.EnableReadFromSecondaryAdvancedVisibility) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Replication) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Replication{`,
		`ReplicationTaskFetcherAggregationInterval:` + strings.Replace(fmt.Sprintf("%v", this.ReplicationTaskFetcherAggregationInterval), "Duration", "types.Duration", 1) + `,`,
		`ReplicationTaskProcessorNoTaskInitialWait:` + strings.Replace(fmt.Sprintf("%v", this.ReplicationTaskProcessorNoTaskInitialWait), "Duration", "types.Duration", 1) + `,`,
		`ReplicationTaskFetcherParallelism:` + fmt.Sprintf("%v", this.ReplicationTaskFetcherParallelism) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MeteringValidation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MeteringValidation{`,
		`SkipCanaryStateTransitionsValidation:` + fmt.Sprintf("%v", this.SkipCanaryStateTransitionsValidation) + `,`,
		`SkipCanaryActionsValidation:` + fmt.Sprintf("%v", this.SkipCanaryActionsValidation) + `,`,
		`SkipCanaryClosedStorageValidation:` + fmt.Sprintf("%v", this.SkipCanaryClosedStorageValidation) + `,`,
		`SkipCanaryOpenStorageValidation:` + fmt.Sprintf("%v", this.SkipCanaryOpenStorageValidation) + `,`,
		`SkipPromQLValidation:` + fmt.Sprintf("%v", this.SkipPromQLValidation) + `,`,
		`StateTransitionsHourlyOverride:` + fmt.Sprintf("%v", this.StateTransitionsHourlyOverride) + `,`,
		`ActionsHourlyOverride:` + fmt.Sprintf("%v", this.ActionsHourlyOverride) + `,`,
		`OpenStorageHourlyOverride:` + fmt.Sprintf("%v", this.OpenStorageHourlyOverride) + `,`,
		`ClosedStorageHourlyOverride:` + fmt.Sprintf("%v", this.ClosedStorageHourlyOverride) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AdvancedCellSpecs) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AdvancedCellSpecs{`,
		`TopLevelDomain:` + fmt.Sprintf("%v", this.TopLevelDomain) + `,`,
		`Opa:` + strings.Replace(this.Opa.String(), "Opa", "Opa", 1) + `,`,
		`Visibility:` + strings.Replace(this.Visibility.String(), "Visibility", "Visibility", 1) + `,`,
		`Replication:` + strings.Replace(this.Replication.String(), "Replication", "Replication", 1) + `,`,
		`NamespaceCacheRefreshIntervalTime:` + strings.Replace(fmt.Sprintf("%v", this.NamespaceCacheRefreshIntervalTime), "Duration", "types.Duration", 1) + `,`,
		`SaasAgentTaskQueueActivitiesPerSecond:` + fmt.Sprintf("%v", this.SaasAgentTaskQueueActivitiesPerSecond) + `,`,
		`MeteringValidation:` + strings.Replace(this.MeteringValidation.String(), "MeteringValidation", "MeteringValidation", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CellSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CellSpec{`,
		`Ring:` + fmt.Sprintf("%v", this.Ring) + `,`,
		`CloudProvider:` + strings.Replace(this.CloudProvider.String(), "CloudProvider", "CloudProvider", 1) + `,`,
		`Astra:` + strings.Replace(this.Astra.String(), "Astra", "Astra", 1) + `,`,
		`Deployments:` + strings.Replace(this.Deployments.String(), "Deployments", "Deployments", 1) + `,`,
		`InfraVersion:` + strings.Replace(this.InfraVersion.String(), "InfraVersion", "InfraVersion", 1) + `,`,
		`Rm:` + strings.Replace(this.Rm.String(), "RMSpec", "RMSpec", 1) + `,`,
		`DynamicConfigOverridesJson:` + fmt.Sprintf("%v", this.DynamicConfigOverridesJson) + `,`,
		`Advanced:` + strings.Replace(this.Advanced.String(), "AdvancedCellSpecs", "AdvancedCellSpecs", 1) + `,`,
		`Tags:` + fmt.Sprintf("%v", this.Tags) + `,`,
		`Purpose:` + fmt.Sprintf("%v", this.Purpose) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Cell) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Cell{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Model:` + fmt.Sprintf("%v", this.Model) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringMessage(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *CloudProvider) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CloudProvider: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CloudProvider: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Region = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Astra) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Astra: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Astra: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CUCount", wireType)
			}
			m.CUCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CUCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DBCount", wireType)
			}
			m.DBCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DBCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AstraExpansionEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AstraExpansionEnabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeploymentSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeploymentSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeploymentSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicaCount", wireType)
			}
			m.ReplicaCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplicaCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TemporalDeploymentSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TemporalDeploymentSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TemporalDeploymentSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrontendReplicas", wireType)
			}
			m.FrontendReplicas = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FrontendReplicas |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HistoryReplicas", wireType)
			}
			m.HistoryReplicas = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HistoryReplicas |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchingReplicas", wireType)
			}
			m.MatchingReplicas = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MatchingReplicas |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkerReplicas", wireType)
			}
			m.WorkerReplicas = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkerReplicas |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentReplicas", wireType)
			}
			m.AgentReplicas = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AgentReplicas |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminToolsReplicas", wireType)
			}
			m.AdminToolsReplicas = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AdminToolsReplicas |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Deployments) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Deployments: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Deployments: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Opa", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Opa == nil {
				m.Opa = &DeploymentSpec{}
			}
			if err := m.Opa.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoCanary", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GoCanary == nil {
				m.GoCanary = &DeploymentSpec{}
			}
			if err := m.GoCanary.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Web", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Web == nil {
				m.Web = &DeploymentSpec{}
			}
			if err := m.Web.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Temporal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Temporal == nil {
				m.Temporal = &TemporalDeploymentSpec{}
			}
			if err := m.Temporal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WebApi", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WebApi == nil {
				m.WebApi = &DeploymentSpec{}
			}
			if err := m.WebApi.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InfraVersion) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InfraVersion: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InfraVersion: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Major", wireType)
			}
			m.Major = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Major |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Minor", wireType)
			}
			m.Minor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Minor |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Patch", wireType)
			}
			m.Patch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Patch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RMSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RMSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RMSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AcceptingWorkload", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AcceptingWorkload = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxAllowedNamespaces", wireType)
			}
			m.MaxAllowedNamespaces = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxAllowedNamespaces |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxStateTransitionsPerSecond", wireType)
			}
			m.MaxStateTransitionsPerSecond = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxStateTransitionsPerSecond |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxHistoryPersistenceRPS", wireType)
			}
			m.MaxHistoryPersistenceRPS = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxHistoryPersistenceRPS |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Opa) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Opa: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Opa: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KmsKeyArn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KmsKeyArn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BucketName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BucketName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BucketRegion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BucketRegion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BundlePath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BundlePath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostPort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostPort = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthzPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthzPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthzV2Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthzV2Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Auth0Audience", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Auth0Audience = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Auth0Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Auth0Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseV2", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UseV2 = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Visibility) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Visibility: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Visibility: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableWriteToSecondaryAdvancedVisibility", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableWriteToSecondaryAdvancedVisibility = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableReadFromSecondaryAdvancedVisibility", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableReadFromSecondaryAdvancedVisibility = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Replication) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Replication: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Replication: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicationTaskFetcherAggregationInterval", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReplicationTaskFetcherAggregationInterval == nil {
				m.ReplicationTaskFetcherAggregationInterval = &types.Duration{}
			}
			if err := m.ReplicationTaskFetcherAggregationInterval.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicationTaskProcessorNoTaskInitialWait", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReplicationTaskProcessorNoTaskInitialWait == nil {
				m.ReplicationTaskProcessorNoTaskInitialWait = &types.Duration{}
			}
			if err := m.ReplicationTaskProcessorNoTaskInitialWait.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicationTaskFetcherParallelism", wireType)
			}
			m.ReplicationTaskFetcherParallelism = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplicationTaskFetcherParallelism |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MeteringValidation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MeteringValidation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MeteringValidation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkipCanaryStateTransitionsValidation", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SkipCanaryStateTransitionsValidation = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkipCanaryActionsValidation", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SkipCanaryActionsValidation = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkipCanaryClosedStorageValidation", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SkipCanaryClosedStorageValidation = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkipCanaryOpenStorageValidation", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SkipCanaryOpenStorageValidation = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkipPromQLValidation", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SkipPromQLValidation = bool(v != 0)
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateTransitionsHourlyOverride", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.StateTransitionsHourlyOverride = float64(math.Float64frombits(v))
		case 7:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionsHourlyOverride", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.ActionsHourlyOverride = float64(math.Float64frombits(v))
		case 8:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenStorageHourlyOverride", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.OpenStorageHourlyOverride = float64(math.Float64frombits(v))
		case 9:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClosedStorageHourlyOverride", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.ClosedStorageHourlyOverride = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdvancedCellSpecs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdvancedCellSpecs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdvancedCellSpecs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopLevelDomain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TopLevelDomain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Opa", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Opa == nil {
				m.Opa = &Opa{}
			}
			if err := m.Opa.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Visibility", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Visibility == nil {
				m.Visibility = &Visibility{}
			}
			if err := m.Visibility.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Replication", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Replication == nil {
				m.Replication = &Replication{}
			}
			if err := m.Replication.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NamespaceCacheRefreshIntervalTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NamespaceCacheRefreshIntervalTime == nil {
				m.NamespaceCacheRefreshIntervalTime = &types.Duration{}
			}
			if err := m.NamespaceCacheRefreshIntervalTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SaasAgentTaskQueueActivitiesPerSecond", wireType)
			}
			m.SaasAgentTaskQueueActivitiesPerSecond = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SaasAgentTaskQueueActivitiesPerSecond |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MeteringValidation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MeteringValidation == nil {
				m.MeteringValidation = &MeteringValidation{}
			}
			if err := m.MeteringValidation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CellSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CellSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CellSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ring", wireType)
			}
			m.Ring = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ring |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloudProvider", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CloudProvider == nil {
				m.CloudProvider = &CloudProvider{}
			}
			if err := m.CloudProvider.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Astra", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Astra == nil {
				m.Astra = &Astra{}
			}
			if err := m.Astra.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deployments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Deployments == nil {
				m.Deployments = &Deployments{}
			}
			if err := m.Deployments.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InfraVersion", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InfraVersion == nil {
				m.InfraVersion = &InfraVersion{}
			}
			if err := m.InfraVersion.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rm == nil {
				m.Rm = &RMSpec{}
			}
			if err := m.Rm.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DynamicConfigOverridesJson", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DynamicConfigOverridesJson = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Advanced", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Advanced == nil {
				m.Advanced = &AdvancedCellSpecs{}
			}
			if err := m.Advanced.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Purpose", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Purpose = append(m.Purpose, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Cell) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Cell: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Cell: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Model", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Model = append(m.Model[:0], dAtA[iNdEx:postIndex]...)
			if m.Model == nil {
				m.Model = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMessage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMessage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMessage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMessage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMessage = fmt.Errorf("proto: unexpected end of group")
)
