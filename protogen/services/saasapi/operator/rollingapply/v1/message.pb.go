// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: services/saasapi/operator/rollingapply/v1/message.proto

package rollingapply

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CellFilter struct {
	// Only cells of these envs will be affected.
	Environments []string `protobuf:"bytes,1,rep,name=environments,proto3" json:"environments,omitempty"`
	// Skips the specified cells.
	CellBlocklist []string `protobuf:"bytes,2,rep,name=cell_blocklist,json=cellBlocklist,proto3" json:"cell_blocklist,omitempty"`
	// If set, only considers these specified cells. Note that they are still subject to other conditions like
	// environments and cell_blocklist. By default (i.e., if empty), this field is ignored.
	CellAllowlist []string `protobuf:"bytes,3,rep,name=cell_allowlist,json=cellAllowlist,proto3" json:"cell_allowlist,omitempty"`
	// If set, only includes cells that pass the query expression.
	// Example query: ">1.0.0 <2.0.0 || >=3.0.0 !4.2.1"
	// Matches: 1.2.3, 1.9.9, 3.1.1.
	// Excludes: 1.0.0, 2.x.x, 4.2.1
	// See: https://github.com/blang/semver for more information
	InfraVersionRangeExpr string `protobuf:"bytes,4,opt,name=infra_version_range_expr,json=infraVersionRangeExpr,proto3" json:"infra_version_range_expr,omitempty"`
	// Skips cells in specified rings
	RingBlocklist []int64 `protobuf:"varint,5,rep,packed,name=ring_blocklist,json=ringBlocklist,proto3" json:"ring_blocklist,omitempty"`
	// If set, only considers cells in the specified rings. Note that these are still subject to other conditions like
	// environments and cell_blocklist and ring_blocklist. By default (i.e. if empty), this field is ignored.
	RingAllowlist []int64 `protobuf:"varint,6,rep,packed,name=ring_allowlist,json=ringAllowlist,proto3" json:"ring_allowlist,omitempty"`
	// If set, executes a govaluate expression against the cell object.
	// There is a special has_tag function which enables filtering logic based on tags on the cell.
	// Example queries:
	//
	//	has_tag("a") && has_tag("b")  --> cell only matches if it has tags "a" and "b" in its Tags slice.
	//	cell.Ring > 2 --> cell only matches if it has a ring number greater than 2
	//
	// See https://github.com/Knetic/govaluate for types of expressions that can be supported
	FilterExpr string `protobuf:"bytes,7,opt,name=filter_expr,json=filterExpr,proto3" json:"filter_expr,omitempty"`
}

func (m *CellFilter) Reset()      { *m = CellFilter{} }
func (*CellFilter) ProtoMessage() {}
func (*CellFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8a9b63f07923cab, []int{0}
}
func (m *CellFilter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CellFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CellFilter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CellFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CellFilter.Merge(m, src)
}
func (m *CellFilter) XXX_Size() int {
	return m.Size()
}
func (m *CellFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_CellFilter.DiscardUnknown(m)
}

var xxx_messageInfo_CellFilter proto.InternalMessageInfo

func (m *CellFilter) GetEnvironments() []string {
	if m != nil {
		return m.Environments
	}
	return nil
}

func (m *CellFilter) GetCellBlocklist() []string {
	if m != nil {
		return m.CellBlocklist
	}
	return nil
}

func (m *CellFilter) GetCellAllowlist() []string {
	if m != nil {
		return m.CellAllowlist
	}
	return nil
}

func (m *CellFilter) GetInfraVersionRangeExpr() string {
	if m != nil {
		return m.InfraVersionRangeExpr
	}
	return ""
}

func (m *CellFilter) GetRingBlocklist() []int64 {
	if m != nil {
		return m.RingBlocklist
	}
	return nil
}

func (m *CellFilter) GetRingAllowlist() []int64 {
	if m != nil {
		return m.RingAllowlist
	}
	return nil
}

func (m *CellFilter) GetFilterExpr() string {
	if m != nil {
		return m.FilterExpr
	}
	return ""
}

type RolloutConfig struct {
	// Waiting periods between rings and batches.
	WaitingPeriodsBetweenRingsInSeconds   []int32                           `protobuf:"varint,1,rep,packed,name=waiting_periods_between_rings_in_seconds,json=waitingPeriodsBetweenRingsInSeconds,proto3" json:"waiting_periods_between_rings_in_seconds,omitempty"`
	WaitingPeriodsBetweenBatchesInSeconds []*RolloutConfig_ValuesWithinRing `protobuf:"bytes,2,rep,name=waiting_periods_between_batches_in_seconds,json=waitingPeriodsBetweenBatchesInSeconds,proto3" json:"waiting_periods_between_batches_in_seconds,omitempty"`
	// Within a ring, we roll out this percentage of cells (rounded down) in one batch.
	BatchSizePercentagesWithinRing []*RolloutConfig_ValuesWithinRing `protobuf:"bytes,3,rep,name=batch_size_percentages_within_ring,json=batchSizePercentagesWithinRing,proto3" json:"batch_size_percentages_within_ring,omitempty"`
}

func (m *RolloutConfig) Reset()      { *m = RolloutConfig{} }
func (*RolloutConfig) ProtoMessage() {}
func (*RolloutConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8a9b63f07923cab, []int{1}
}
func (m *RolloutConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RolloutConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RolloutConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RolloutConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RolloutConfig.Merge(m, src)
}
func (m *RolloutConfig) XXX_Size() int {
	return m.Size()
}
func (m *RolloutConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_RolloutConfig.DiscardUnknown(m)
}

var xxx_messageInfo_RolloutConfig proto.InternalMessageInfo

func (m *RolloutConfig) GetWaitingPeriodsBetweenRingsInSeconds() []int32 {
	if m != nil {
		return m.WaitingPeriodsBetweenRingsInSeconds
	}
	return nil
}

func (m *RolloutConfig) GetWaitingPeriodsBetweenBatchesInSeconds() []*RolloutConfig_ValuesWithinRing {
	if m != nil {
		return m.WaitingPeriodsBetweenBatchesInSeconds
	}
	return nil
}

func (m *RolloutConfig) GetBatchSizePercentagesWithinRing() []*RolloutConfig_ValuesWithinRing {
	if m != nil {
		return m.BatchSizePercentagesWithinRing
	}
	return nil
}

type RolloutConfig_ValuesWithinRing struct {
	Values []int32 `protobuf:"varint,1,rep,packed,name=values,proto3" json:"values,omitempty"`
}

func (m *RolloutConfig_ValuesWithinRing) Reset()      { *m = RolloutConfig_ValuesWithinRing{} }
func (*RolloutConfig_ValuesWithinRing) ProtoMessage() {}
func (*RolloutConfig_ValuesWithinRing) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8a9b63f07923cab, []int{1, 0}
}
func (m *RolloutConfig_ValuesWithinRing) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RolloutConfig_ValuesWithinRing) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RolloutConfig_ValuesWithinRing.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RolloutConfig_ValuesWithinRing) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RolloutConfig_ValuesWithinRing.Merge(m, src)
}
func (m *RolloutConfig_ValuesWithinRing) XXX_Size() int {
	return m.Size()
}
func (m *RolloutConfig_ValuesWithinRing) XXX_DiscardUnknown() {
	xxx_messageInfo_RolloutConfig_ValuesWithinRing.DiscardUnknown(m)
}

var xxx_messageInfo_RolloutConfig_ValuesWithinRing proto.InternalMessageInfo

func (m *RolloutConfig_ValuesWithinRing) GetValues() []int32 {
	if m != nil {
		return m.Values
	}
	return nil
}

func init() {
	proto.RegisterType((*CellFilter)(nil), "services.saasapi.operator.rollingapply.v1.CellFilter")
	proto.RegisterType((*RolloutConfig)(nil), "services.saasapi.operator.rollingapply.v1.RolloutConfig")
	proto.RegisterType((*RolloutConfig_ValuesWithinRing)(nil), "services.saasapi.operator.rollingapply.v1.RolloutConfig.ValuesWithinRing")
}

func init() {
	proto.RegisterFile("services/saasapi/operator/rollingapply/v1/message.proto", fileDescriptor_a8a9b63f07923cab)
}

var fileDescriptor_a8a9b63f07923cab = []byte{
	// 513 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x93, 0x31, 0x6f, 0x13, 0x31,
	0x14, 0xc7, 0xcf, 0x0d, 0x2d, 0xaa, 0x4b, 0x10, 0x3a, 0x09, 0x14, 0x31, 0x98, 0x28, 0xa8, 0x52,
	0xe8, 0x70, 0xa7, 0xc2, 0xd0, 0x81, 0x89, 0x54, 0x20, 0x75, 0xab, 0xae, 0xa2, 0x48, 0x2c, 0x96,
	0x73, 0x79, 0xb9, 0x5a, 0x38, 0xf6, 0xc9, 0x76, 0x2e, 0xa1, 0x13, 0x1f, 0x81, 0x85, 0x6f, 0x80,
	0x10, 0x1f, 0x85, 0x31, 0x6c, 0x1d, 0xc9, 0x65, 0x61, 0xec, 0x47, 0x40, 0xf6, 0x25, 0x5c, 0x82,
	0x40, 0xea, 0xc0, 0x78, 0xff, 0xf7, 0x7b, 0xef, 0xff, 0xbf, 0xf7, 0x64, 0x7c, 0x64, 0x40, 0x17,
	0x3c, 0x05, 0x13, 0x1b, 0xc6, 0x0c, 0xcb, 0x79, 0xac, 0x72, 0xd0, 0xcc, 0x2a, 0x1d, 0x6b, 0x25,
	0x04, 0x97, 0x19, 0xcb, 0x73, 0xf1, 0x3e, 0x2e, 0x0e, 0xe3, 0x11, 0x18, 0xc3, 0x32, 0x88, 0x72,
	0xad, 0xac, 0x0a, 0x9f, 0xac, 0x1a, 0xa3, 0x65, 0x63, 0xb4, 0x6a, 0x8c, 0xd6, 0x1b, 0xa3, 0xe2,
	0xb0, 0xf3, 0x65, 0x0b, 0xe3, 0x63, 0x10, 0xe2, 0x15, 0x17, 0x16, 0x74, 0xd8, 0xc1, 0x77, 0x40,
	0x16, 0x5c, 0x2b, 0x39, 0x02, 0x69, 0x4d, 0x0b, 0xb5, 0x1b, 0xdd, 0xdd, 0x64, 0x43, 0x0b, 0xf7,
	0xf1, 0xdd, 0x14, 0x84, 0xa0, 0x7d, 0xa1, 0xd2, 0x77, 0x82, 0x1b, 0xdb, 0xda, 0xf2, 0x54, 0xd3,
	0xa9, 0xbd, 0x95, 0xf8, 0x1b, 0x63, 0x42, 0xa8, 0x89, 0xc7, 0x1a, 0x35, 0xf6, 0x62, 0x25, 0x86,
	0x47, 0xb8, 0xc5, 0xe5, 0x50, 0x33, 0x5a, 0x80, 0x36, 0x5c, 0x49, 0xaa, 0x99, 0xcc, 0x80, 0xc2,
	0x34, 0xd7, 0xad, 0x5b, 0x6d, 0xd4, 0xdd, 0x4d, 0xee, 0xfb, 0xfa, 0x79, 0x55, 0x4e, 0x5c, 0xf5,
	0xe5, 0x34, 0xd7, 0x6e, 0xbe, 0xe6, 0x32, 0x5b, 0x8b, 0xb1, 0xdd, 0x6e, 0x74, 0x1b, 0x49, 0xd3,
	0xa9, 0x1b, 0x31, 0x3c, 0x56, 0xc7, 0xd8, 0xa9, 0xb1, 0x3a, 0xc6, 0x23, 0xbc, 0x37, 0xf4, 0x2b,
	0xa8, 0x9c, 0x6f, 0x7b, 0x67, 0x5c, 0x49, 0xce, 0xae, 0xf3, 0xbd, 0x81, 0x9b, 0x89, 0x12, 0x42,
	0x8d, 0xed, 0xb1, 0x92, 0x43, 0x9e, 0x85, 0xaf, 0x71, 0x77, 0xc2, 0xb8, 0x75, 0xc3, 0x73, 0xd0,
	0x5c, 0x0d, 0x0c, 0xed, 0x83, 0x9d, 0x00, 0x48, 0xea, 0x66, 0x1b, 0xca, 0x25, 0x35, 0x90, 0x2a,
	0x39, 0xa8, 0xf6, 0xb8, 0x9d, 0x3c, 0x5e, 0xf2, 0xa7, 0x15, 0xde, 0xab, 0xe8, 0xc4, 0xc1, 0x27,
	0xf2, 0xac, 0x42, 0xc3, 0xcf, 0x08, 0x1f, 0xfc, 0x6b, 0x6e, 0x9f, 0xd9, 0xf4, 0x02, 0x36, 0x26,
	0xbb, 0xdd, 0xef, 0x3d, 0x3d, 0x89, 0x6e, 0x7c, 0xf2, 0x68, 0xe3, 0x2f, 0xa2, 0x73, 0x26, 0xc6,
	0x60, 0xde, 0x70, 0x7b, 0xc1, 0x7d, 0x92, 0x64, 0xff, 0xaf, 0x21, 0x7b, 0x95, 0x73, 0x1d, 0xf3,
	0x13, 0xc2, 0x1d, 0x1f, 0x87, 0x1a, 0x7e, 0x09, 0x2e, 0x69, 0x0a, 0xd2, 0xb2, 0x0c, 0x0c, 0x9d,
	0xf8, 0x61, 0x7e, 0x09, 0xfe, 0xe6, 0xff, 0x35, 0x1e, 0xf1, 0xa6, 0x67, 0xfc, 0x12, 0x4e, 0x6b,
	0xcb, 0xba, 0xfe, 0xf0, 0x00, 0xdf, 0xfb, 0xb3, 0x27, 0x7c, 0x80, 0x77, 0x0a, 0xaf, 0x2d, 0xef,
	0xb0, 0xfc, 0xea, 0x4d, 0x67, 0x73, 0x12, 0x5c, 0xcd, 0x49, 0x70, 0x3d, 0x27, 0xe8, 0x43, 0x49,
	0xd0, 0xd7, 0x92, 0xa0, 0x6f, 0x25, 0x41, 0xb3, 0x92, 0xa0, 0x1f, 0x25, 0x41, 0x3f, 0x4b, 0x12,
	0x5c, 0x97, 0x04, 0x7d, 0x5c, 0x90, 0x60, 0xb6, 0x20, 0xc1, 0xd5, 0x82, 0x04, 0x6f, 0x7b, 0x76,
	0x94, 0x6b, 0x11, 0xa5, 0x42, 0x8d, 0x07, 0xf1, 0x8d, 0x9f, 0xe8, 0xf3, 0xf5, 0xef, 0xfe, 0x8e,
	0x7f, 0xa8, 0xcf, 0x7e, 0x05, 0x00, 0x00, 0xff, 0xff, 0xb9, 0x8e, 0xfd, 0xfe, 0xe3, 0x03, 0x00,
	0x00,
}

func (this *CellFilter) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CellFilter)
	if !ok {
		that2, ok := that.(CellFilter)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Environments) != len(that1.Environments) {
		return false
	}
	for i := range this.Environments {
		if this.Environments[i] != that1.Environments[i] {
			return false
		}
	}
	if len(this.CellBlocklist) != len(that1.CellBlocklist) {
		return false
	}
	for i := range this.CellBlocklist {
		if this.CellBlocklist[i] != that1.CellBlocklist[i] {
			return false
		}
	}
	if len(this.CellAllowlist) != len(that1.CellAllowlist) {
		return false
	}
	for i := range this.CellAllowlist {
		if this.CellAllowlist[i] != that1.CellAllowlist[i] {
			return false
		}
	}
	if this.InfraVersionRangeExpr != that1.InfraVersionRangeExpr {
		return false
	}
	if len(this.RingBlocklist) != len(that1.RingBlocklist) {
		return false
	}
	for i := range this.RingBlocklist {
		if this.RingBlocklist[i] != that1.RingBlocklist[i] {
			return false
		}
	}
	if len(this.RingAllowlist) != len(that1.RingAllowlist) {
		return false
	}
	for i := range this.RingAllowlist {
		if this.RingAllowlist[i] != that1.RingAllowlist[i] {
			return false
		}
	}
	if this.FilterExpr != that1.FilterExpr {
		return false
	}
	return true
}
func (this *RolloutConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RolloutConfig)
	if !ok {
		that2, ok := that.(RolloutConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.WaitingPeriodsBetweenRingsInSeconds) != len(that1.WaitingPeriodsBetweenRingsInSeconds) {
		return false
	}
	for i := range this.WaitingPeriodsBetweenRingsInSeconds {
		if this.WaitingPeriodsBetweenRingsInSeconds[i] != that1.WaitingPeriodsBetweenRingsInSeconds[i] {
			return false
		}
	}
	if len(this.WaitingPeriodsBetweenBatchesInSeconds) != len(that1.WaitingPeriodsBetweenBatchesInSeconds) {
		return false
	}
	for i := range this.WaitingPeriodsBetweenBatchesInSeconds {
		if !this.WaitingPeriodsBetweenBatchesInSeconds[i].Equal(that1.WaitingPeriodsBetweenBatchesInSeconds[i]) {
			return false
		}
	}
	if len(this.BatchSizePercentagesWithinRing) != len(that1.BatchSizePercentagesWithinRing) {
		return false
	}
	for i := range this.BatchSizePercentagesWithinRing {
		if !this.BatchSizePercentagesWithinRing[i].Equal(that1.BatchSizePercentagesWithinRing[i]) {
			return false
		}
	}
	return true
}
func (this *RolloutConfig_ValuesWithinRing) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RolloutConfig_ValuesWithinRing)
	if !ok {
		that2, ok := that.(RolloutConfig_ValuesWithinRing)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Values) != len(that1.Values) {
		return false
	}
	for i := range this.Values {
		if this.Values[i] != that1.Values[i] {
			return false
		}
	}
	return true
}
func (this *CellFilter) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&rollingapply.CellFilter{")
	s = append(s, "Environments: "+fmt.Sprintf("%#v", this.Environments)+",\n")
	s = append(s, "CellBlocklist: "+fmt.Sprintf("%#v", this.CellBlocklist)+",\n")
	s = append(s, "CellAllowlist: "+fmt.Sprintf("%#v", this.CellAllowlist)+",\n")
	s = append(s, "InfraVersionRangeExpr: "+fmt.Sprintf("%#v", this.InfraVersionRangeExpr)+",\n")
	s = append(s, "RingBlocklist: "+fmt.Sprintf("%#v", this.RingBlocklist)+",\n")
	s = append(s, "RingAllowlist: "+fmt.Sprintf("%#v", this.RingAllowlist)+",\n")
	s = append(s, "FilterExpr: "+fmt.Sprintf("%#v", this.FilterExpr)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RolloutConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&rollingapply.RolloutConfig{")
	s = append(s, "WaitingPeriodsBetweenRingsInSeconds: "+fmt.Sprintf("%#v", this.WaitingPeriodsBetweenRingsInSeconds)+",\n")
	if this.WaitingPeriodsBetweenBatchesInSeconds != nil {
		s = append(s, "WaitingPeriodsBetweenBatchesInSeconds: "+fmt.Sprintf("%#v", this.WaitingPeriodsBetweenBatchesInSeconds)+",\n")
	}
	if this.BatchSizePercentagesWithinRing != nil {
		s = append(s, "BatchSizePercentagesWithinRing: "+fmt.Sprintf("%#v", this.BatchSizePercentagesWithinRing)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RolloutConfig_ValuesWithinRing) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&rollingapply.RolloutConfig_ValuesWithinRing{")
	s = append(s, "Values: "+fmt.Sprintf("%#v", this.Values)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringMessage(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *CellFilter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CellFilter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CellFilter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FilterExpr) > 0 {
		i -= len(m.FilterExpr)
		copy(dAtA[i:], m.FilterExpr)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.FilterExpr)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.RingAllowlist) > 0 {
		dAtA2 := make([]byte, len(m.RingAllowlist)*10)
		var j1 int
		for _, num1 := range m.RingAllowlist {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintMessage(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x32
	}
	if len(m.RingBlocklist) > 0 {
		dAtA4 := make([]byte, len(m.RingBlocklist)*10)
		var j3 int
		for _, num1 := range m.RingBlocklist {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintMessage(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.InfraVersionRangeExpr) > 0 {
		i -= len(m.InfraVersionRangeExpr)
		copy(dAtA[i:], m.InfraVersionRangeExpr)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.InfraVersionRangeExpr)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.CellAllowlist) > 0 {
		for iNdEx := len(m.CellAllowlist) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.CellAllowlist[iNdEx])
			copy(dAtA[i:], m.CellAllowlist[iNdEx])
			i = encodeVarintMessage(dAtA, i, uint64(len(m.CellAllowlist[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.CellBlocklist) > 0 {
		for iNdEx := len(m.CellBlocklist) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.CellBlocklist[iNdEx])
			copy(dAtA[i:], m.CellBlocklist[iNdEx])
			i = encodeVarintMessage(dAtA, i, uint64(len(m.CellBlocklist[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Environments) > 0 {
		for iNdEx := len(m.Environments) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Environments[iNdEx])
			copy(dAtA[i:], m.Environments[iNdEx])
			i = encodeVarintMessage(dAtA, i, uint64(len(m.Environments[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RolloutConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RolloutConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RolloutConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BatchSizePercentagesWithinRing) > 0 {
		for iNdEx := len(m.BatchSizePercentagesWithinRing) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BatchSizePercentagesWithinRing[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.WaitingPeriodsBetweenBatchesInSeconds) > 0 {
		for iNdEx := len(m.WaitingPeriodsBetweenBatchesInSeconds) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.WaitingPeriodsBetweenBatchesInSeconds[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.WaitingPeriodsBetweenRingsInSeconds) > 0 {
		dAtA6 := make([]byte, len(m.WaitingPeriodsBetweenRingsInSeconds)*10)
		var j5 int
		for _, num1 := range m.WaitingPeriodsBetweenRingsInSeconds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		i -= j5
		copy(dAtA[i:], dAtA6[:j5])
		i = encodeVarintMessage(dAtA, i, uint64(j5))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RolloutConfig_ValuesWithinRing) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RolloutConfig_ValuesWithinRing) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RolloutConfig_ValuesWithinRing) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Values) > 0 {
		dAtA8 := make([]byte, len(m.Values)*10)
		var j7 int
		for _, num1 := range m.Values {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA8[j7] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j7++
			}
			dAtA8[j7] = uint8(num)
			j7++
		}
		i -= j7
		copy(dAtA[i:], dAtA8[:j7])
		i = encodeVarintMessage(dAtA, i, uint64(j7))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMessage(dAtA []byte, offset int, v uint64) int {
	offset -= sovMessage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CellFilter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Environments) > 0 {
		for _, s := range m.Environments {
			l = len(s)
			n += 1 + l + sovMessage(uint64(l))
		}
	}
	if len(m.CellBlocklist) > 0 {
		for _, s := range m.CellBlocklist {
			l = len(s)
			n += 1 + l + sovMessage(uint64(l))
		}
	}
	if len(m.CellAllowlist) > 0 {
		for _, s := range m.CellAllowlist {
			l = len(s)
			n += 1 + l + sovMessage(uint64(l))
		}
	}
	l = len(m.InfraVersionRangeExpr)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if len(m.RingBlocklist) > 0 {
		l = 0
		for _, e := range m.RingBlocklist {
			l += sovMessage(uint64(e))
		}
		n += 1 + sovMessage(uint64(l)) + l
	}
	if len(m.RingAllowlist) > 0 {
		l = 0
		for _, e := range m.RingAllowlist {
			l += sovMessage(uint64(e))
		}
		n += 1 + sovMessage(uint64(l)) + l
	}
	l = len(m.FilterExpr)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *RolloutConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.WaitingPeriodsBetweenRingsInSeconds) > 0 {
		l = 0
		for _, e := range m.WaitingPeriodsBetweenRingsInSeconds {
			l += sovMessage(uint64(e))
		}
		n += 1 + sovMessage(uint64(l)) + l
	}
	if len(m.WaitingPeriodsBetweenBatchesInSeconds) > 0 {
		for _, e := range m.WaitingPeriodsBetweenBatchesInSeconds {
			l = e.Size()
			n += 1 + l + sovMessage(uint64(l))
		}
	}
	if len(m.BatchSizePercentagesWithinRing) > 0 {
		for _, e := range m.BatchSizePercentagesWithinRing {
			l = e.Size()
			n += 1 + l + sovMessage(uint64(l))
		}
	}
	return n
}

func (m *RolloutConfig_ValuesWithinRing) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Values) > 0 {
		l = 0
		for _, e := range m.Values {
			l += sovMessage(uint64(e))
		}
		n += 1 + sovMessage(uint64(l)) + l
	}
	return n
}

func sovMessage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMessage(x uint64) (n int) {
	return sovMessage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *CellFilter) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CellFilter{`,
		`Environments:` + fmt.Sprintf("%v", this.Environments) + `,`,
		`CellBlocklist:` + fmt.Sprintf("%v", this.CellBlocklist) + `,`,
		`CellAllowlist:` + fmt.Sprintf("%v", this.CellAllowlist) + `,`,
		`InfraVersionRangeExpr:` + fmt.Sprintf("%v", this.InfraVersionRangeExpr) + `,`,
		`RingBlocklist:` + fmt.Sprintf("%v", this.RingBlocklist) + `,`,
		`RingAllowlist:` + fmt.Sprintf("%v", this.RingAllowlist) + `,`,
		`FilterExpr:` + fmt.Sprintf("%v", this.FilterExpr) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RolloutConfig) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForWaitingPeriodsBetweenBatchesInSeconds := "[]*RolloutConfig_ValuesWithinRing{"
	for _, f := range this.WaitingPeriodsBetweenBatchesInSeconds {
		repeatedStringForWaitingPeriodsBetweenBatchesInSeconds += strings.Replace(fmt.Sprintf("%v", f), "RolloutConfig_ValuesWithinRing", "RolloutConfig_ValuesWithinRing", 1) + ","
	}
	repeatedStringForWaitingPeriodsBetweenBatchesInSeconds += "}"
	repeatedStringForBatchSizePercentagesWithinRing := "[]*RolloutConfig_ValuesWithinRing{"
	for _, f := range this.BatchSizePercentagesWithinRing {
		repeatedStringForBatchSizePercentagesWithinRing += strings.Replace(fmt.Sprintf("%v", f), "RolloutConfig_ValuesWithinRing", "RolloutConfig_ValuesWithinRing", 1) + ","
	}
	repeatedStringForBatchSizePercentagesWithinRing += "}"
	s := strings.Join([]string{`&RolloutConfig{`,
		`WaitingPeriodsBetweenRingsInSeconds:` + fmt.Sprintf("%v", this.WaitingPeriodsBetweenRingsInSeconds) + `,`,
		`WaitingPeriodsBetweenBatchesInSeconds:` + repeatedStringForWaitingPeriodsBetweenBatchesInSeconds + `,`,
		`BatchSizePercentagesWithinRing:` + repeatedStringForBatchSizePercentagesWithinRing + `,`,
		`}`,
	}, "")
	return s
}
func (this *RolloutConfig_ValuesWithinRing) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RolloutConfig_ValuesWithinRing{`,
		`Values:` + fmt.Sprintf("%v", this.Values) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringMessage(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *CellFilter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CellFilter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CellFilter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Environments", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Environments = append(m.Environments, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CellBlocklist", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CellBlocklist = append(m.CellBlocklist, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CellAllowlist", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CellAllowlist = append(m.CellAllowlist, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InfraVersionRangeExpr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InfraVersionRangeExpr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.RingBlocklist = append(m.RingBlocklist, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMessage
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMessage
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.RingBlocklist) == 0 {
					m.RingBlocklist = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.RingBlocklist = append(m.RingBlocklist, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RingBlocklist", wireType)
			}
		case 6:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.RingAllowlist = append(m.RingAllowlist, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMessage
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMessage
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.RingAllowlist) == 0 {
					m.RingAllowlist = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.RingAllowlist = append(m.RingAllowlist, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RingAllowlist", wireType)
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FilterExpr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FilterExpr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RolloutConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RolloutConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RolloutConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.WaitingPeriodsBetweenRingsInSeconds = append(m.WaitingPeriodsBetweenRingsInSeconds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMessage
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMessage
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.WaitingPeriodsBetweenRingsInSeconds) == 0 {
					m.WaitingPeriodsBetweenRingsInSeconds = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.WaitingPeriodsBetweenRingsInSeconds = append(m.WaitingPeriodsBetweenRingsInSeconds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field WaitingPeriodsBetweenRingsInSeconds", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WaitingPeriodsBetweenBatchesInSeconds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WaitingPeriodsBetweenBatchesInSeconds = append(m.WaitingPeriodsBetweenBatchesInSeconds, &RolloutConfig_ValuesWithinRing{})
			if err := m.WaitingPeriodsBetweenBatchesInSeconds[len(m.WaitingPeriodsBetweenBatchesInSeconds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchSizePercentagesWithinRing", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BatchSizePercentagesWithinRing = append(m.BatchSizePercentagesWithinRing, &RolloutConfig_ValuesWithinRing{})
			if err := m.BatchSizePercentagesWithinRing[len(m.BatchSizePercentagesWithinRing)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RolloutConfig_ValuesWithinRing) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValuesWithinRing: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValuesWithinRing: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Values = append(m.Values, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMessage
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMessage
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Values) == 0 {
					m.Values = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Values = append(m.Values, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMessage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMessage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMessage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMessage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMessage = fmt.Errorf("proto: unexpected end of group")
)
