// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: resourcemanager/v1/message.proto

package resourcemanager

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
	v11 "github.com/temporalio/tcld/protogen/api/auth/v1"
	v1 "github.com/temporalio/tcld/protogen/api/namespace/v1"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Workload struct {
	// ID of the workload.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Env of the workload.
	Env string `protobuf:"bytes,2,opt,name=env,proto3" json:"env,omitempty"`
	// If set, the workload will be placed accordingly to this override.
	PlacementOverride *Placement `protobuf:"bytes,3,opt,name=placement_override,json=placementOverride,proto3" json:"placement_override,omitempty"`
	// Spec of the workload.
	//
	// Types that are valid to be assigned to Spec:
	//	*Workload_Namespace
	Spec isWorkload_Spec `protobuf_oneof:"spec"`
}

func (m *Workload) Reset()      { *m = Workload{} }
func (*Workload) ProtoMessage() {}
func (*Workload) Descriptor() ([]byte, []int) {
	return fileDescriptor_646c7f54af859ede, []int{0}
}
func (m *Workload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Workload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Workload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Workload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Workload.Merge(m, src)
}
func (m *Workload) XXX_Size() int {
	return m.Size()
}
func (m *Workload) XXX_DiscardUnknown() {
	xxx_messageInfo_Workload.DiscardUnknown(m)
}

var xxx_messageInfo_Workload proto.InternalMessageInfo

type isWorkload_Spec interface {
	isWorkload_Spec()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Workload_Namespace struct {
	Namespace *Namespace `protobuf:"bytes,100,opt,name=namespace,proto3,oneof" json:"namespace,omitempty"`
}

func (*Workload_Namespace) isWorkload_Spec() {}

func (m *Workload) GetSpec() isWorkload_Spec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *Workload) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Workload) GetEnv() string {
	if m != nil {
		return m.Env
	}
	return ""
}

func (m *Workload) GetPlacementOverride() *Placement {
	if m != nil {
		return m.PlacementOverride
	}
	return nil
}

func (m *Workload) GetNamespace() *Namespace {
	if x, ok := m.GetSpec().(*Workload_Namespace); ok {
		return x.Namespace
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Workload) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Workload_Namespace)(nil),
	}
}

type Namespace struct {
	// ID of the namespace.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Namespace name provided by customer.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Customer root account id.
	AccountId string `protobuf:"bytes,3,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// Spec of the namespace.
	Spec *v1.NamespaceSpec `protobuf:"bytes,4,opt,name=spec,proto3" json:"spec,omitempty"`
	// If enabled, forces namespace creation by bypassing certain checks and/or overwriting existing values.
	ForceOverwrite *types.BoolValue `protobuf:"bytes,6,opt,name=force_overwrite,json=forceOverwrite,proto3" json:"force_overwrite,omitempty"`
	// Request id from saas-api.
	RequestId string `protobuf:"bytes,7,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// Assigns namespace permissions to users.
	UserNamespacePermissions []*v11.UserNamespacePermissions `protobuf:"bytes,8,rep,name=user_namespace_permissions,json=userNamespacePermissions,proto3" json:"user_namespace_permissions,omitempty"`
	// Metadata used to indicate whether the namespace is used for internal regional operations
	// Not populated for user-facing namespaces
	RegionalMetadata *InternalRegionalMetadata `protobuf:"bytes,9,opt,name=regional_metadata,json=regionalMetadata,proto3" json:"regional_metadata,omitempty"`
}

func (m *Namespace) Reset()      { *m = Namespace{} }
func (*Namespace) ProtoMessage() {}
func (*Namespace) Descriptor() ([]byte, []int) {
	return fileDescriptor_646c7f54af859ede, []int{1}
}
func (m *Namespace) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Namespace) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Namespace.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Namespace) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Namespace.Merge(m, src)
}
func (m *Namespace) XXX_Size() int {
	return m.Size()
}
func (m *Namespace) XXX_DiscardUnknown() {
	xxx_messageInfo_Namespace.DiscardUnknown(m)
}

var xxx_messageInfo_Namespace proto.InternalMessageInfo

func (m *Namespace) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Namespace) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Namespace) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *Namespace) GetSpec() *v1.NamespaceSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *Namespace) GetForceOverwrite() *types.BoolValue {
	if m != nil {
		return m.ForceOverwrite
	}
	return nil
}

func (m *Namespace) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

func (m *Namespace) GetUserNamespacePermissions() []*v11.UserNamespacePermissions {
	if m != nil {
		return m.UserNamespacePermissions
	}
	return nil
}

func (m *Namespace) GetRegionalMetadata() *InternalRegionalMetadata {
	if m != nil {
		return m.RegionalMetadata
	}
	return nil
}

type InternalRegionalMetadata struct {
	// Indicates which regional namespace this is (starting from 0)
	NamespaceNumber int32 `protobuf:"varint,1,opt,name=namespace_number,json=namespaceNumber,proto3" json:"namespace_number,omitempty"`
	// Optional. Only set if the namespace has a special tag for partitioning/isolation constraints within a region (e.g. ring-0)
	Tag string `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
}

func (m *InternalRegionalMetadata) Reset()      { *m = InternalRegionalMetadata{} }
func (*InternalRegionalMetadata) ProtoMessage() {}
func (*InternalRegionalMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_646c7f54af859ede, []int{2}
}
func (m *InternalRegionalMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InternalRegionalMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InternalRegionalMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InternalRegionalMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InternalRegionalMetadata.Merge(m, src)
}
func (m *InternalRegionalMetadata) XXX_Size() int {
	return m.Size()
}
func (m *InternalRegionalMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_InternalRegionalMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_InternalRegionalMetadata proto.InternalMessageInfo

func (m *InternalRegionalMetadata) GetNamespaceNumber() int32 {
	if m != nil {
		return m.NamespaceNumber
	}
	return 0
}

func (m *InternalRegionalMetadata) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

type Placement struct {
	// ID of the workload.
	WorkloadId string `protobuf:"bytes,1,opt,name=workload_id,json=workloadId,proto3" json:"workload_id,omitempty"`
	// ID of the cell that the workload is placed into.
	CellId string `protobuf:"bytes,2,opt,name=cell_id,json=cellId,proto3" json:"cell_id,omitempty"`
}

func (m *Placement) Reset()      { *m = Placement{} }
func (*Placement) ProtoMessage() {}
func (*Placement) Descriptor() ([]byte, []int) {
	return fileDescriptor_646c7f54af859ede, []int{3}
}
func (m *Placement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Placement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Placement.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Placement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Placement.Merge(m, src)
}
func (m *Placement) XXX_Size() int {
	return m.Size()
}
func (m *Placement) XXX_DiscardUnknown() {
	xxx_messageInfo_Placement.DiscardUnknown(m)
}

var xxx_messageInfo_Placement proto.InternalMessageInfo

func (m *Placement) GetWorkloadId() string {
	if m != nil {
		return m.WorkloadId
	}
	return ""
}

func (m *Placement) GetCellId() string {
	if m != nil {
		return m.CellId
	}
	return ""
}

type Action struct {
	// ID of the action.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// IDs of actions that this action depends on.
	DependencyActionIds []string `protobuf:"bytes,2,rep,name=dependency_action_ids,json=dependencyActionIds,proto3" json:"dependency_action_ids,omitempty"`
	// Optional human-readable reason for this action for debugging purpose.
	Reason string `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
	// Spec of the action.
	//
	// Types that are valid to be assigned to Spec:
	//
	//	*Action_CreateNamespace
	//	*Action_MigrateNamespace
	//	*Action_AdjustNamespaceEnvelope
	//	*Action_CreateServerCell
	//	*Action_ScaleServerCell
	Spec isAction_Spec `protobuf_oneof:"spec"`
}

func (m *Action) Reset()      { *m = Action{} }
func (*Action) ProtoMessage() {}
func (*Action) Descriptor() ([]byte, []int) {
	return fileDescriptor_646c7f54af859ede, []int{4}
}
func (m *Action) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Action) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Action.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Action) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Action.Merge(m, src)
}
func (m *Action) XXX_Size() int {
	return m.Size()
}
func (m *Action) XXX_DiscardUnknown() {
	xxx_messageInfo_Action.DiscardUnknown(m)
}

var xxx_messageInfo_Action proto.InternalMessageInfo

type isAction_Spec interface {
	isAction_Spec()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Action_CreateNamespace struct {
	CreateNamespace *CreateNamespaceAction `protobuf:"bytes,100,opt,name=create_namespace,json=createNamespace,proto3,oneof" json:"create_namespace,omitempty"`
}
type Action_MigrateNamespace struct {
	MigrateNamespace *MigrateNamespaceAction `protobuf:"bytes,101,opt,name=migrate_namespace,json=migrateNamespace,proto3,oneof" json:"migrate_namespace,omitempty"`
}
type Action_AdjustNamespaceEnvelope struct {
	AdjustNamespaceEnvelope *AdjustNamespaceEnvelope `protobuf:"bytes,102,opt,name=adjust_namespace_envelope,json=adjustNamespaceEnvelope,proto3,oneof" json:"adjust_namespace_envelope,omitempty"`
}
type Action_CreateServerCell struct {
	CreateServerCell *CreateServerCellAction `protobuf:"bytes,200,opt,name=create_server_cell,json=createServerCell,proto3,oneof" json:"create_server_cell,omitempty"`
}
type Action_ScaleServerCell struct {
	ScaleServerCell *ScaleServerCellAction `protobuf:"bytes,201,opt,name=scale_server_cell,json=scaleServerCell,proto3,oneof" json:"scale_server_cell,omitempty"`
}

func (*Action_CreateNamespace) isAction_Spec()         {}
func (*Action_MigrateNamespace) isAction_Spec()        {}
func (*Action_AdjustNamespaceEnvelope) isAction_Spec() {}
func (*Action_CreateServerCell) isAction_Spec()        {}
func (*Action_ScaleServerCell) isAction_Spec()         {}

func (m *Action) GetSpec() isAction_Spec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *Action) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Action) GetDependencyActionIds() []string {
	if m != nil {
		return m.DependencyActionIds
	}
	return nil
}

func (m *Action) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *Action) GetCreateNamespace() *CreateNamespaceAction {
	if x, ok := m.GetSpec().(*Action_CreateNamespace); ok {
		return x.CreateNamespace
	}
	return nil
}

func (m *Action) GetMigrateNamespace() *MigrateNamespaceAction {
	if x, ok := m.GetSpec().(*Action_MigrateNamespace); ok {
		return x.MigrateNamespace
	}
	return nil
}

func (m *Action) GetAdjustNamespaceEnvelope() *AdjustNamespaceEnvelope {
	if x, ok := m.GetSpec().(*Action_AdjustNamespaceEnvelope); ok {
		return x.AdjustNamespaceEnvelope
	}
	return nil
}

func (m *Action) GetCreateServerCell() *CreateServerCellAction {
	if x, ok := m.GetSpec().(*Action_CreateServerCell); ok {
		return x.CreateServerCell
	}
	return nil
}

func (m *Action) GetScaleServerCell() *ScaleServerCellAction {
	if x, ok := m.GetSpec().(*Action_ScaleServerCell); ok {
		return x.ScaleServerCell
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Action) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Action_CreateNamespace)(nil),
		(*Action_MigrateNamespace)(nil),
		(*Action_AdjustNamespaceEnvelope)(nil),
		(*Action_CreateServerCell)(nil),
		(*Action_ScaleServerCell)(nil),
	}
}

// A DAG of actions.
type ActionPlan struct {
	// ID of the action plan.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Actions in the plan.
	Actions []*Action `protobuf:"bytes,2,rep,name=actions,proto3" json:"actions,omitempty"`
}

func (m *ActionPlan) Reset()      { *m = ActionPlan{} }
func (*ActionPlan) ProtoMessage() {}
func (*ActionPlan) Descriptor() ([]byte, []int) {
	return fileDescriptor_646c7f54af859ede, []int{5}
}
func (m *ActionPlan) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActionPlan) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActionPlan.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActionPlan) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActionPlan.Merge(m, src)
}
func (m *ActionPlan) XXX_Size() int {
	return m.Size()
}
func (m *ActionPlan) XXX_DiscardUnknown() {
	xxx_messageInfo_ActionPlan.DiscardUnknown(m)
}

var xxx_messageInfo_ActionPlan proto.InternalMessageInfo

func (m *ActionPlan) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ActionPlan) GetActions() []*Action {
	if m != nil {
		return m.Actions
	}
	return nil
}

// Actions proposed in planner.
type Proposal struct {
	ActionPlan *ActionPlan `protobuf:"bytes,1,opt,name=action_plan,json=actionPlan,proto3" json:"action_plan,omitempty"`
	Score      float64     `protobuf:"fixed64,2,opt,name=score,proto3" json:"score,omitempty"`
}

func (m *Proposal) Reset()      { *m = Proposal{} }
func (*Proposal) ProtoMessage() {}
func (*Proposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_646c7f54af859ede, []int{6}
}
func (m *Proposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Proposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Proposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Proposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Proposal.Merge(m, src)
}
func (m *Proposal) XXX_Size() int {
	return m.Size()
}
func (m *Proposal) XXX_DiscardUnknown() {
	xxx_messageInfo_Proposal.DiscardUnknown(m)
}

var xxx_messageInfo_Proposal proto.InternalMessageInfo

func (m *Proposal) GetActionPlan() *ActionPlan {
	if m != nil {
		return m.ActionPlan
	}
	return nil
}

func (m *Proposal) GetScore() float64 {
	if m != nil {
		return m.Score
	}
	return 0
}

type CreateNamespaceAction struct {
	// Namespace workload.
	Workload *Workload `protobuf:"bytes,1,opt,name=workload,proto3" json:"workload,omitempty"`
	// Proposed placement to be executed.
	Placement *Placement `protobuf:"bytes,2,opt,name=placement,proto3" json:"placement,omitempty"`
}

func (m *CreateNamespaceAction) Reset()      { *m = CreateNamespaceAction{} }
func (*CreateNamespaceAction) ProtoMessage() {}
func (*CreateNamespaceAction) Descriptor() ([]byte, []int) {
	return fileDescriptor_646c7f54af859ede, []int{7}
}
func (m *CreateNamespaceAction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateNamespaceAction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateNamespaceAction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateNamespaceAction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateNamespaceAction.Merge(m, src)
}
func (m *CreateNamespaceAction) XXX_Size() int {
	return m.Size()
}
func (m *CreateNamespaceAction) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateNamespaceAction.DiscardUnknown(m)
}

var xxx_messageInfo_CreateNamespaceAction proto.InternalMessageInfo

func (m *CreateNamespaceAction) GetWorkload() *Workload {
	if m != nil {
		return m.Workload
	}
	return nil
}

func (m *CreateNamespaceAction) GetPlacement() *Placement {
	if m != nil {
		return m.Placement
	}
	return nil
}

type AdjustNamespaceEnvelope struct {
	// Canonical name of the namespace to augment.
	NamespaceId string `protobuf:"bytes,1,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`
	// The rps to move the namespace to;
	TargetFrontendRps int32 `protobuf:"varint,2,opt,name=target_frontend_rps,json=targetFrontendRps,proto3" json:"target_frontend_rps,omitempty"`
}

func (m *AdjustNamespaceEnvelope) Reset()      { *m = AdjustNamespaceEnvelope{} }
func (*AdjustNamespaceEnvelope) ProtoMessage() {}
func (*AdjustNamespaceEnvelope) Descriptor() ([]byte, []int) {
	return fileDescriptor_646c7f54af859ede, []int{8}
}
func (m *AdjustNamespaceEnvelope) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdjustNamespaceEnvelope) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdjustNamespaceEnvelope.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdjustNamespaceEnvelope) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdjustNamespaceEnvelope.Merge(m, src)
}
func (m *AdjustNamespaceEnvelope) XXX_Size() int {
	return m.Size()
}
func (m *AdjustNamespaceEnvelope) XXX_DiscardUnknown() {
	xxx_messageInfo_AdjustNamespaceEnvelope.DiscardUnknown(m)
}

var xxx_messageInfo_AdjustNamespaceEnvelope proto.InternalMessageInfo

func (m *AdjustNamespaceEnvelope) GetNamespaceId() string {
	if m != nil {
		return m.NamespaceId
	}
	return ""
}

func (m *AdjustNamespaceEnvelope) GetTargetFrontendRps() int32 {
	if m != nil {
		return m.TargetFrontendRps
	}
	return 0
}

type MigrateNamespaceAction struct {
	// ID of the namespace.
	NamespaceId string `protobuf:"bytes,1,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`
	// Source cell to migrate the namespace from.
	SourceCellId string `protobuf:"bytes,2,opt,name=source_cell_id,json=sourceCellId,proto3" json:"source_cell_id,omitempty"`
	// Target cell to migrate the namespace to.
	TargetCellId string `protobuf:"bytes,3,opt,name=target_cell_id,json=targetCellId,proto3" json:"target_cell_id,omitempty"`
}

func (m *MigrateNamespaceAction) Reset()      { *m = MigrateNamespaceAction{} }
func (*MigrateNamespaceAction) ProtoMessage() {}
func (*MigrateNamespaceAction) Descriptor() ([]byte, []int) {
	return fileDescriptor_646c7f54af859ede, []int{9}
}
func (m *MigrateNamespaceAction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MigrateNamespaceAction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MigrateNamespaceAction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MigrateNamespaceAction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MigrateNamespaceAction.Merge(m, src)
}
func (m *MigrateNamespaceAction) XXX_Size() int {
	return m.Size()
}
func (m *MigrateNamespaceAction) XXX_DiscardUnknown() {
	xxx_messageInfo_MigrateNamespaceAction.DiscardUnknown(m)
}

var xxx_messageInfo_MigrateNamespaceAction proto.InternalMessageInfo

func (m *MigrateNamespaceAction) GetNamespaceId() string {
	if m != nil {
		return m.NamespaceId
	}
	return ""
}

func (m *MigrateNamespaceAction) GetSourceCellId() string {
	if m != nil {
		return m.SourceCellId
	}
	return ""
}

func (m *MigrateNamespaceAction) GetTargetCellId() string {
	if m != nil {
		return m.TargetCellId
	}
	return ""
}

type CreateServerCellAction struct {
	// Env of the cell to create.
	Env string `protobuf:"bytes,1,opt,name=env,proto3" json:"env,omitempty"`
	// Cloud provider, e.g., aws.
	Cloud string `protobuf:"bytes,2,opt,name=cloud,proto3" json:"cloud,omitempty"`
	// Region, e.g., us-west-1.
	Region string `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
}

func (m *CreateServerCellAction) Reset()      { *m = CreateServerCellAction{} }
func (*CreateServerCellAction) ProtoMessage() {}
func (*CreateServerCellAction) Descriptor() ([]byte, []int) {
	return fileDescriptor_646c7f54af859ede, []int{10}
}
func (m *CreateServerCellAction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateServerCellAction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateServerCellAction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateServerCellAction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateServerCellAction.Merge(m, src)
}
func (m *CreateServerCellAction) XXX_Size() int {
	return m.Size()
}
func (m *CreateServerCellAction) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateServerCellAction.DiscardUnknown(m)
}

var xxx_messageInfo_CreateServerCellAction proto.InternalMessageInfo

func (m *CreateServerCellAction) GetEnv() string {
	if m != nil {
		return m.Env
	}
	return ""
}

func (m *CreateServerCellAction) GetCloud() string {
	if m != nil {
		return m.Cloud
	}
	return ""
}

func (m *CreateServerCellAction) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

type ScaleServerCellAction struct {
	// ID of the cell to scale up (or down).
	CellId string `protobuf:"bytes,1,opt,name=cell_id,json=cellId,proto3" json:"cell_id,omitempty"`
	// The current number of Astra CUs.
	CurrentAstraCuCount int32 `protobuf:"varint,2,opt,name=current_astra_cu_count,json=currentAstraCuCount,proto3" json:"current_astra_cu_count,omitempty"`
	// The number of Astra CUs to scale to.
	TargetAstraCuCount int32 `protobuf:"varint,3,opt,name=target_astra_cu_count,json=targetAstraCuCount,proto3" json:"target_astra_cu_count,omitempty"`
}

func (m *ScaleServerCellAction) Reset()      { *m = ScaleServerCellAction{} }
func (*ScaleServerCellAction) ProtoMessage() {}
func (*ScaleServerCellAction) Descriptor() ([]byte, []int) {
	return fileDescriptor_646c7f54af859ede, []int{11}
}
func (m *ScaleServerCellAction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ScaleServerCellAction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ScaleServerCellAction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ScaleServerCellAction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScaleServerCellAction.Merge(m, src)
}
func (m *ScaleServerCellAction) XXX_Size() int {
	return m.Size()
}
func (m *ScaleServerCellAction) XXX_DiscardUnknown() {
	xxx_messageInfo_ScaleServerCellAction.DiscardUnknown(m)
}

var xxx_messageInfo_ScaleServerCellAction proto.InternalMessageInfo

func (m *ScaleServerCellAction) GetCellId() string {
	if m != nil {
		return m.CellId
	}
	return ""
}

func (m *ScaleServerCellAction) GetCurrentAstraCuCount() int32 {
	if m != nil {
		return m.CurrentAstraCuCount
	}
	return 0
}

func (m *ScaleServerCellAction) GetTargetAstraCuCount() int32 {
	if m != nil {
		return m.TargetAstraCuCount
	}
	return 0
}

type ActionResult struct {
	// Result value set according to Action.spec.
	//
	// Types that are valid to be assigned to Value:
	//
	//	*ActionResult_CreateNamespace
	//	*ActionResult_MigrateNamespace
	//	*ActionResult_CreateServerCell
	//	*ActionResult_ScaleServerCell
	Value isActionResult_Value `protobuf_oneof:"value"`
}

func (m *ActionResult) Reset()      { *m = ActionResult{} }
func (*ActionResult) ProtoMessage() {}
func (*ActionResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_646c7f54af859ede, []int{12}
}
func (m *ActionResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActionResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActionResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActionResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActionResult.Merge(m, src)
}
func (m *ActionResult) XXX_Size() int {
	return m.Size()
}
func (m *ActionResult) XXX_DiscardUnknown() {
	xxx_messageInfo_ActionResult.DiscardUnknown(m)
}

var xxx_messageInfo_ActionResult proto.InternalMessageInfo

type isActionResult_Value interface {
	isActionResult_Value()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ActionResult_CreateNamespace struct {
	CreateNamespace *CreateNamespaceActionResult `protobuf:"bytes,100,opt,name=create_namespace,json=createNamespace,proto3,oneof" json:"create_namespace,omitempty"`
}
type ActionResult_MigrateNamespace struct {
	MigrateNamespace *MigrateNamespaceActionResult `protobuf:"bytes,101,opt,name=migrate_namespace,json=migrateNamespace,proto3,oneof" json:"migrate_namespace,omitempty"`
}
type ActionResult_CreateServerCell struct {
	CreateServerCell *CreateServerCellActionResult `protobuf:"bytes,200,opt,name=create_server_cell,json=createServerCell,proto3,oneof" json:"create_server_cell,omitempty"`
}
type ActionResult_ScaleServerCell struct {
	ScaleServerCell *ScaleServerCellActionResult `protobuf:"bytes,201,opt,name=scale_server_cell,json=scaleServerCell,proto3,oneof" json:"scale_server_cell,omitempty"`
}

func (*ActionResult_CreateNamespace) isActionResult_Value()  {}
func (*ActionResult_MigrateNamespace) isActionResult_Value() {}
func (*ActionResult_CreateServerCell) isActionResult_Value() {}
func (*ActionResult_ScaleServerCell) isActionResult_Value()  {}

func (m *ActionResult) GetValue() isActionResult_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *ActionResult) GetCreateNamespace() *CreateNamespaceActionResult {
	if x, ok := m.GetValue().(*ActionResult_CreateNamespace); ok {
		return x.CreateNamespace
	}
	return nil
}

func (m *ActionResult) GetMigrateNamespace() *MigrateNamespaceActionResult {
	if x, ok := m.GetValue().(*ActionResult_MigrateNamespace); ok {
		return x.MigrateNamespace
	}
	return nil
}

func (m *ActionResult) GetCreateServerCell() *CreateServerCellActionResult {
	if x, ok := m.GetValue().(*ActionResult_CreateServerCell); ok {
		return x.CreateServerCell
	}
	return nil
}

func (m *ActionResult) GetScaleServerCell() *ScaleServerCellActionResult {
	if x, ok := m.GetValue().(*ActionResult_ScaleServerCell); ok {
		return x.ScaleServerCell
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ActionResult) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ActionResult_CreateNamespace)(nil),
		(*ActionResult_MigrateNamespace)(nil),
		(*ActionResult_CreateServerCell)(nil),
		(*ActionResult_ScaleServerCell)(nil),
	}
}

type CreateNamespaceActionResult struct {
}

func (m *CreateNamespaceActionResult) Reset()      { *m = CreateNamespaceActionResult{} }
func (*CreateNamespaceActionResult) ProtoMessage() {}
func (*CreateNamespaceActionResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_646c7f54af859ede, []int{13}
}
func (m *CreateNamespaceActionResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateNamespaceActionResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateNamespaceActionResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateNamespaceActionResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateNamespaceActionResult.Merge(m, src)
}
func (m *CreateNamespaceActionResult) XXX_Size() int {
	return m.Size()
}
func (m *CreateNamespaceActionResult) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateNamespaceActionResult.DiscardUnknown(m)
}

var xxx_messageInfo_CreateNamespaceActionResult proto.InternalMessageInfo

type MigrateNamespaceActionResult struct {
}

func (m *MigrateNamespaceActionResult) Reset()      { *m = MigrateNamespaceActionResult{} }
func (*MigrateNamespaceActionResult) ProtoMessage() {}
func (*MigrateNamespaceActionResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_646c7f54af859ede, []int{14}
}
func (m *MigrateNamespaceActionResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MigrateNamespaceActionResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MigrateNamespaceActionResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MigrateNamespaceActionResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MigrateNamespaceActionResult.Merge(m, src)
}
func (m *MigrateNamespaceActionResult) XXX_Size() int {
	return m.Size()
}
func (m *MigrateNamespaceActionResult) XXX_DiscardUnknown() {
	xxx_messageInfo_MigrateNamespaceActionResult.DiscardUnknown(m)
}

var xxx_messageInfo_MigrateNamespaceActionResult proto.InternalMessageInfo

type CreateServerCellActionResult struct {
}

func (m *CreateServerCellActionResult) Reset()      { *m = CreateServerCellActionResult{} }
func (*CreateServerCellActionResult) ProtoMessage() {}
func (*CreateServerCellActionResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_646c7f54af859ede, []int{15}
}
func (m *CreateServerCellActionResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateServerCellActionResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateServerCellActionResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateServerCellActionResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateServerCellActionResult.Merge(m, src)
}
func (m *CreateServerCellActionResult) XXX_Size() int {
	return m.Size()
}
func (m *CreateServerCellActionResult) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateServerCellActionResult.DiscardUnknown(m)
}

var xxx_messageInfo_CreateServerCellActionResult proto.InternalMessageInfo

type ScaleServerCellActionResult struct {
}

func (m *ScaleServerCellActionResult) Reset()      { *m = ScaleServerCellActionResult{} }
func (*ScaleServerCellActionResult) ProtoMessage() {}
func (*ScaleServerCellActionResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_646c7f54af859ede, []int{16}
}
func (m *ScaleServerCellActionResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ScaleServerCellActionResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ScaleServerCellActionResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ScaleServerCellActionResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScaleServerCellActionResult.Merge(m, src)
}
func (m *ScaleServerCellActionResult) XXX_Size() int {
	return m.Size()
}
func (m *ScaleServerCellActionResult) XXX_DiscardUnknown() {
	xxx_messageInfo_ScaleServerCellActionResult.DiscardUnknown(m)
}

var xxx_messageInfo_ScaleServerCellActionResult proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Workload)(nil), "resourcemanager.v1.Workload")
	proto.RegisterType((*Namespace)(nil), "resourcemanager.v1.Namespace")
	proto.RegisterType((*InternalRegionalMetadata)(nil), "resourcemanager.v1.InternalRegionalMetadata")
	proto.RegisterType((*Placement)(nil), "resourcemanager.v1.Placement")
	proto.RegisterType((*Action)(nil), "resourcemanager.v1.Action")
	proto.RegisterType((*ActionPlan)(nil), "resourcemanager.v1.ActionPlan")
	proto.RegisterType((*Proposal)(nil), "resourcemanager.v1.Proposal")
	proto.RegisterType((*CreateNamespaceAction)(nil), "resourcemanager.v1.CreateNamespaceAction")
	proto.RegisterType((*AdjustNamespaceEnvelope)(nil), "resourcemanager.v1.AdjustNamespaceEnvelope")
	proto.RegisterType((*MigrateNamespaceAction)(nil), "resourcemanager.v1.MigrateNamespaceAction")
	proto.RegisterType((*CreateServerCellAction)(nil), "resourcemanager.v1.CreateServerCellAction")
	proto.RegisterType((*ScaleServerCellAction)(nil), "resourcemanager.v1.ScaleServerCellAction")
	proto.RegisterType((*ActionResult)(nil), "resourcemanager.v1.ActionResult")
	proto.RegisterType((*CreateNamespaceActionResult)(nil), "resourcemanager.v1.CreateNamespaceActionResult")
	proto.RegisterType((*MigrateNamespaceActionResult)(nil), "resourcemanager.v1.MigrateNamespaceActionResult")
	proto.RegisterType((*CreateServerCellActionResult)(nil), "resourcemanager.v1.CreateServerCellActionResult")
	proto.RegisterType((*ScaleServerCellActionResult)(nil), "resourcemanager.v1.ScaleServerCellActionResult")
}

func init() { proto.RegisterFile("resourcemanager/v1/message.proto", fileDescriptor_646c7f54af859ede) }

var fileDescriptor_646c7f54af859ede = []byte{
	// 1132 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x56, 0x4d, 0x6f, 0xdb, 0x46,
	0x10, 0x15, 0x2d, 0x4b, 0xb6, 0xc6, 0x46, 0x2c, 0x6f, 0x62, 0x87, 0x71, 0x13, 0xc6, 0x25, 0x5a,
	0xc0, 0x69, 0x0b, 0x2a, 0x1f, 0x3d, 0x14, 0x08, 0x8a, 0xc2, 0x16, 0x52, 0x58, 0x45, 0x93, 0x18,
	0x34, 0x9a, 0xa4, 0x1f, 0x28, 0xb1, 0x26, 0xc7, 0x2a, 0x5b, 0x8a, 0x64, 0x77, 0x49, 0x19, 0xbd,
	0xf5, 0xd6, 0x5b, 0xd1, 0x63, 0xfb, 0x0f, 0x7a, 0xe9, 0x8f, 0xc8, 0x2d, 0xbd, 0xf9, 0x98, 0x63,
	0x2d, 0x5f, 0x7a, 0xcc, 0x4f, 0x28, 0x76, 0x97, 0x1f, 0x96, 0x44, 0xa9, 0xbe, 0x69, 0x67, 0xde,
	0xcc, 0xbe, 0x9d, 0x7d, 0x7c, 0x2b, 0xd8, 0x66, 0xc8, 0xa3, 0x94, 0xb9, 0x38, 0xa0, 0x21, 0xed,
	0x23, 0xeb, 0x0c, 0xef, 0x75, 0x06, 0xc8, 0x39, 0xed, 0xa3, 0x15, 0xb3, 0x28, 0x89, 0x08, 0x99,
	0x40, 0x58, 0xc3, 0x7b, 0x5b, 0x37, 0x68, 0xec, 0x77, 0x68, 0x9a, 0x7c, 0x37, 0x05, 0xdf, 0x32,
	0x44, 0x2a, 0xa4, 0x03, 0xe4, 0x31, 0x75, 0xb1, 0x22, 0xdf, 0x8f, 0xa2, 0x7e, 0x80, 0x1d, 0xb9,
	0x3a, 0x4a, 0x8f, 0x3b, 0x27, 0x8c, 0xc6, 0x31, 0x32, 0xae, 0xf2, 0xe6, 0x4b, 0x0d, 0x96, 0x9f,
	0x47, 0xec, 0x87, 0x20, 0xa2, 0x1e, 0xb9, 0x02, 0x0b, 0xbe, 0xa7, 0x6b, 0xdb, 0xda, 0x4e, 0xcb,
	0x5e, 0xf0, 0x3d, 0xd2, 0x86, 0x3a, 0x86, 0x43, 0x7d, 0x41, 0x06, 0xc4, 0x4f, 0xf2, 0x39, 0x90,
	0x38, 0xa0, 0x2e, 0x0e, 0x30, 0x4c, 0x9c, 0x68, 0x88, 0x8c, 0xf9, 0x1e, 0xea, 0xf5, 0x6d, 0x6d,
	0x67, 0xe5, 0xfe, 0x2d, 0x6b, 0x9a, 0xba, 0x75, 0x90, 0xa3, 0xed, 0xf5, 0xa2, 0xf0, 0x69, 0x56,
	0x47, 0x3e, 0x86, 0x56, 0x41, 0x5d, 0xf7, 0x66, 0x37, 0x79, 0x92, 0x83, 0xf6, 0x6b, 0x76, 0x59,
	0xb1, 0xd7, 0x84, 0x45, 0x1e, 0xa3, 0x6b, 0xfe, 0x55, 0x87, 0x56, 0x01, 0x99, 0x3a, 0x04, 0x81,
	0x45, 0x51, 0x92, 0x9d, 0x42, 0xfe, 0x26, 0xb7, 0x00, 0xa8, 0xeb, 0x46, 0x69, 0x98, 0x38, 0xbe,
	0x27, 0xe9, 0xb7, 0xec, 0x56, 0x16, 0xe9, 0x79, 0xe4, 0x81, 0x6a, 0xac, 0x2f, 0x4a, 0x4a, 0xb7,
	0x2d, 0x1a, 0xfb, 0x56, 0xb1, 0xed, 0x18, 0xa1, 0xc3, 0x18, 0x5d, 0x5b, 0x82, 0x49, 0x17, 0xd6,
	0x8e, 0x23, 0xe6, 0xa2, 0x1c, 0xcb, 0x09, 0xf3, 0x13, 0xd4, 0x9b, 0xb2, 0x7e, 0xcb, 0x52, 0x77,
	0x60, 0xe5, 0x77, 0x60, 0xed, 0x45, 0x51, 0xf0, 0x8c, 0x06, 0x29, 0xda, 0x57, 0x64, 0xc9, 0xd3,
	0xbc, 0x42, 0x10, 0x63, 0xf8, 0x63, 0x8a, 0x5c, 0x12, 0x5b, 0x52, 0xc4, 0xb2, 0x48, 0xcf, 0x23,
	0x2e, 0x6c, 0xa5, 0x1c, 0x99, 0x53, 0x90, 0x71, 0x62, 0x64, 0x03, 0x9f, 0x73, 0x3f, 0x0a, 0xb9,
	0xbe, 0xbc, 0x5d, 0xdf, 0x59, 0xb9, 0xff, 0xae, 0xa4, 0x2b, 0xd4, 0x22, 0x98, 0x7e, 0xc1, 0x91,
	0x15, 0x6c, 0x0f, 0x4a, 0xb0, 0xad, 0xa7, 0x33, 0x32, 0xe4, 0x4b, 0x58, 0x67, 0xd8, 0xf7, 0xa3,
	0x90, 0x06, 0xce, 0x00, 0x13, 0xea, 0xd1, 0x84, 0xea, 0x2d, 0x79, 0x94, 0x0f, 0xaa, 0x6e, 0xa7,
	0x17, 0x26, 0xc8, 0x42, 0x1a, 0xd8, 0x59, 0xd1, 0xe3, 0xac, 0xc6, 0x6e, 0xb3, 0x89, 0xc8, 0x67,
	0x8b, 0xcb, 0x8d, 0x76, 0xd3, 0x7c, 0x0e, 0xfa, 0xac, 0x1a, 0x72, 0x07, 0xda, 0xe5, 0xe1, 0xc2,
	0x74, 0x70, 0x84, 0x4c, 0xde, 0x65, 0xc3, 0x5e, 0x2b, 0xe2, 0x4f, 0x64, 0x58, 0xa8, 0x33, 0xa1,
	0xfd, 0x5c, 0x9d, 0x09, 0xed, 0x9b, 0x8f, 0xa0, 0x55, 0xe8, 0x8d, 0xdc, 0x86, 0x95, 0x93, 0x4c,
	0xd8, 0x4e, 0x21, 0x08, 0xc8, 0x43, 0x3d, 0x8f, 0x5c, 0x87, 0x25, 0x17, 0x83, 0x40, 0x24, 0x55,
	0x8f, 0xa6, 0x58, 0xf6, 0x3c, 0xf3, 0xe5, 0x22, 0x34, 0x77, 0xdd, 0xc4, 0x8f, 0xc2, 0x29, 0x31,
	0xdd, 0x87, 0x0d, 0x0f, 0x63, 0x0c, 0x3d, 0x0c, 0xdd, 0x9f, 0x1c, 0x2a, 0x41, 0x8e, 0xef, 0x71,
	0x7d, 0x61, 0xbb, 0xbe, 0xd3, 0xb2, 0xaf, 0x96, 0x49, 0xd5, 0xa0, 0xe7, 0x71, 0xb2, 0x09, 0x4d,
	0x86, 0x94, 0x47, 0x61, 0x26, 0xb4, 0x6c, 0x45, 0x9e, 0x41, 0xdb, 0x65, 0x48, 0x13, 0x74, 0x26,
	0x3f, 0x82, 0x3b, 0x55, 0x63, 0xee, 0x4a, 0x6c, 0x71, 0x63, 0xaa, 0xff, 0x7e, 0xcd, 0x5e, 0x73,
	0xc7, 0x13, 0xe2, 0xfe, 0x06, 0x7e, 0x9f, 0x8d, 0x37, 0x46, 0xd9, 0xf8, 0xbd, 0xaa, 0xc6, 0x8f,
	0x15, 0x78, 0xba, 0x73, 0x7b, 0x30, 0x91, 0x21, 0x3e, 0xdc, 0xa0, 0xde, 0xf7, 0x29, 0x4f, 0x2e,
	0x28, 0x10, 0xc3, 0x21, 0x06, 0x51, 0x8c, 0xfa, 0xb1, 0xdc, 0xe2, 0xfd, 0xaa, 0x2d, 0x76, 0x65,
	0x51, 0xd1, 0xe7, 0x51, 0x56, 0xb2, 0x5f, 0xb3, 0xaf, 0xd3, 0xea, 0x14, 0xf9, 0x1a, 0x48, 0x36,
	0x1d, 0x8e, 0x6c, 0x88, 0xcc, 0x11, 0x97, 0xa3, 0xbf, 0xd2, 0x66, 0x9f, 0x43, 0x0d, 0xe8, 0x50,
	0xa2, 0xbb, 0x18, 0x04, 0xe5, 0x39, 0xdc, 0x89, 0x0c, 0x79, 0x01, 0xeb, 0xdc, 0xa5, 0xc1, 0x78,
	0xef, 0xbf, 0xb5, 0xd9, 0xc3, 0x3f, 0x14, 0xe8, 0x8a, 0xd6, 0x6b, 0x7c, 0x3c, 0x51, 0x78, 0x92,
	0x0d, 0xa0, 0x40, 0x07, 0x01, 0x9d, 0x96, 0xd1, 0x87, 0xb0, 0xa4, 0xb4, 0xa3, 0x84, 0x23, 0x3c,
	0xa2, 0x6a, 0x6a, 0x12, 0x62, 0xe7, 0x50, 0x93, 0xc2, 0xf2, 0x01, 0x8b, 0xe2, 0x88, 0xd3, 0x80,
	0x7c, 0x02, 0x2b, 0x99, 0xfa, 0xe2, 0x80, 0x86, 0xba, 0xa2, 0x6e, 0xcc, 0xee, 0x22, 0x68, 0xd8,
	0x40, 0x4b, 0x4a, 0xd7, 0xa0, 0xc1, 0xdd, 0x88, 0x29, 0x5f, 0xd4, 0x6c, 0xb5, 0x30, 0x7f, 0xd5,
	0x60, 0xa3, 0x52, 0x68, 0xe4, 0x23, 0x58, 0xce, 0xbf, 0x9d, 0x6c, 0xb7, 0x9b, 0x55, 0xbb, 0xe5,
	0x6f, 0x89, 0x5d, 0xa0, 0xc9, 0x43, 0x68, 0x15, 0xd6, 0x2f, 0x77, 0xfb, 0xdf, 0xa7, 0xa2, 0xc4,
	0x9b, 0x01, 0x5c, 0x9f, 0x21, 0x1e, 0xf2, 0x36, 0xac, 0x96, 0x2a, 0x2c, 0xc6, 0xbb, 0x52, 0xc4,
	0x7a, 0x1e, 0xb1, 0xe0, 0x6a, 0x42, 0x59, 0x1f, 0x13, 0xe7, 0x98, 0x45, 0x61, 0x82, 0xa1, 0xe7,
	0xb0, 0x98, 0x4b, 0x12, 0x0d, 0x7b, 0x5d, 0xa5, 0x3e, 0xcd, 0x32, 0x76, 0xcc, 0xcd, 0x5f, 0x34,
	0xd8, 0xac, 0xfe, 0x1c, 0x2e, 0xb3, 0xdb, 0x3b, 0x70, 0x45, 0x1d, 0xca, 0x19, 0xf7, 0x95, 0x55,
	0x15, 0xed, 0x4a, 0x77, 0x11, 0xa8, 0x8c, 0x53, 0x8e, 0x52, 0xb6, 0xb0, 0xaa, 0xa2, 0x0a, 0x65,
	0xbe, 0x80, 0xcd, 0x6a, 0x3d, 0xe7, 0x8f, 0xb2, 0x56, 0x3e, 0xca, 0xd7, 0xa0, 0xe1, 0x06, 0x51,
	0x9a, 0x6f, 0xa7, 0x16, 0xca, 0x76, 0x84, 0xbb, 0x96, 0xb6, 0x23, 0x56, 0xe6, 0xef, 0x1a, 0x6c,
	0x54, 0xca, 0xf9, 0xa2, 0x21, 0x6a, 0x17, 0x0d, 0x91, 0x3c, 0x80, 0x4d, 0x37, 0x65, 0x4c, 0xbc,
	0xf9, 0x94, 0x27, 0x8c, 0x3a, 0x6e, 0xea, 0xc8, 0xb7, 0x32, 0x9b, 0xe4, 0xd5, 0x2c, 0xbb, 0x2b,
	0x92, 0xdd, 0xb4, 0x2b, 0x52, 0xe4, 0x1e, 0x6c, 0x64, 0xe7, 0x9c, 0xa8, 0xa9, 0xcb, 0x1a, 0xa2,
	0x92, 0x17, 0x4b, 0xcc, 0x3f, 0xea, 0xb0, 0x9a, 0x89, 0x1e, 0x79, 0x1a, 0x24, 0xe4, 0x9b, 0x99,
	0x16, 0xd9, 0xb9, 0xb4, 0x45, 0xaa, 0x56, 0x55, 0x46, 0xe9, 0xcc, 0x36, 0xca, 0xbb, 0x97, 0x37,
	0xca, 0xa2, 0xff, 0xb4, 0x5d, 0xd2, 0x79, 0x1e, 0x76, 0xf7, 0xf2, 0x1e, 0x56, 0x6e, 0x31, 0xe5,
	0x64, 0xdf, 0xce, 0x71, 0xb2, 0xce, 0xa5, 0x9d, 0xac, 0x9c, 0xd1, 0xa4, 0x9f, 0x2d, 0x41, 0x63,
	0x28, 0xfe, 0xa9, 0x98, 0xb7, 0xe0, 0xad, 0x39, 0xe3, 0x35, 0x0d, 0xb8, 0x39, 0x6f, 0x3c, 0x22,
	0x3f, 0xef, 0x6c, 0xa2, 0xfd, 0x1c, 0x66, 0x7b, 0xde, 0xe9, 0x99, 0x51, 0x7b, 0x7d, 0x66, 0xd4,
	0xde, 0x9c, 0x19, 0xda, 0xcf, 0x23, 0x43, 0xfb, 0x73, 0x64, 0x68, 0xaf, 0x46, 0x86, 0x76, 0x3a,
	0x32, 0xb4, 0x7f, 0x46, 0x86, 0xf6, 0xef, 0xc8, 0xa8, 0xbd, 0x19, 0x19, 0xda, 0x6f, 0xe7, 0x46,
	0xed, 0xf4, 0xdc, 0xa8, 0xbd, 0x3e, 0x37, 0x6a, 0x5f, 0x59, 0xc9, 0x20, 0x66, 0x81, 0x25, 0xbf,
	0x87, 0xce, 0xf4, 0x3f, 0xef, 0x87, 0x13, 0xa1, 0xa3, 0xa6, 0xfc, 0x87, 0xf6, 0xe0, 0xbf, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x3c, 0x50, 0x83, 0x56, 0xa6, 0x0b, 0x00, 0x00,
}

func (this *Workload) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Workload)
	if !ok {
		that2, ok := that.(Workload)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Env != that1.Env {
		return false
	}
	if !this.PlacementOverride.Equal(that1.PlacementOverride) {
		return false
	}
	if that1.Spec == nil {
		if this.Spec != nil {
			return false
		}
	} else if this.Spec == nil {
		return false
	} else if !this.Spec.Equal(that1.Spec) {
		return false
	}
	return true
}
func (this *Workload_Namespace) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Workload_Namespace)
	if !ok {
		that2, ok := that.(Workload_Namespace)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Namespace.Equal(that1.Namespace) {
		return false
	}
	return true
}
func (this *Namespace) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Namespace)
	if !ok {
		that2, ok := that.(Namespace)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.AccountId != that1.AccountId {
		return false
	}
	if !this.Spec.Equal(that1.Spec) {
		return false
	}
	if !this.ForceOverwrite.Equal(that1.ForceOverwrite) {
		return false
	}
	if this.RequestId != that1.RequestId {
		return false
	}
	if len(this.UserNamespacePermissions) != len(that1.UserNamespacePermissions) {
		return false
	}
	for i := range this.UserNamespacePermissions {
		if !this.UserNamespacePermissions[i].Equal(that1.UserNamespacePermissions[i]) {
			return false
		}
	}
	if !this.RegionalMetadata.Equal(that1.RegionalMetadata) {
		return false
	}
	return true
}
func (this *InternalRegionalMetadata) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*InternalRegionalMetadata)
	if !ok {
		that2, ok := that.(InternalRegionalMetadata)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NamespaceNumber != that1.NamespaceNumber {
		return false
	}
	if this.Tag != that1.Tag {
		return false
	}
	return true
}
func (this *Placement) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Placement)
	if !ok {
		that2, ok := that.(Placement)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.WorkloadId != that1.WorkloadId {
		return false
	}
	if this.CellId != that1.CellId {
		return false
	}
	return true
}
func (this *Action) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Action)
	if !ok {
		that2, ok := that.(Action)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if len(this.DependencyActionIds) != len(that1.DependencyActionIds) {
		return false
	}
	for i := range this.DependencyActionIds {
		if this.DependencyActionIds[i] != that1.DependencyActionIds[i] {
			return false
		}
	}
	if this.Reason != that1.Reason {
		return false
	}
	if that1.Spec == nil {
		if this.Spec != nil {
			return false
		}
	} else if this.Spec == nil {
		return false
	} else if !this.Spec.Equal(that1.Spec) {
		return false
	}
	return true
}
func (this *Action_CreateNamespace) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Action_CreateNamespace)
	if !ok {
		that2, ok := that.(Action_CreateNamespace)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CreateNamespace.Equal(that1.CreateNamespace) {
		return false
	}
	return true
}
func (this *Action_MigrateNamespace) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Action_MigrateNamespace)
	if !ok {
		that2, ok := that.(Action_MigrateNamespace)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MigrateNamespace.Equal(that1.MigrateNamespace) {
		return false
	}
	return true
}
func (this *Action_AdjustNamespaceEnvelope) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Action_AdjustNamespaceEnvelope)
	if !ok {
		that2, ok := that.(Action_AdjustNamespaceEnvelope)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdjustNamespaceEnvelope.Equal(that1.AdjustNamespaceEnvelope) {
		return false
	}
	return true
}
func (this *Action_CreateServerCell) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Action_CreateServerCell)
	if !ok {
		that2, ok := that.(Action_CreateServerCell)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CreateServerCell.Equal(that1.CreateServerCell) {
		return false
	}
	return true
}
func (this *Action_ScaleServerCell) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Action_ScaleServerCell)
	if !ok {
		that2, ok := that.(Action_ScaleServerCell)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ScaleServerCell.Equal(that1.ScaleServerCell) {
		return false
	}
	return true
}
func (this *ActionPlan) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ActionPlan)
	if !ok {
		that2, ok := that.(ActionPlan)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if len(this.Actions) != len(that1.Actions) {
		return false
	}
	for i := range this.Actions {
		if !this.Actions[i].Equal(that1.Actions[i]) {
			return false
		}
	}
	return true
}
func (this *Proposal) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Proposal)
	if !ok {
		that2, ok := that.(Proposal)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActionPlan.Equal(that1.ActionPlan) {
		return false
	}
	if this.Score != that1.Score {
		return false
	}
	return true
}
func (this *CreateNamespaceAction) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateNamespaceAction)
	if !ok {
		that2, ok := that.(CreateNamespaceAction)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Workload.Equal(that1.Workload) {
		return false
	}
	if !this.Placement.Equal(that1.Placement) {
		return false
	}
	return true
}
func (this *AdjustNamespaceEnvelope) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AdjustNamespaceEnvelope)
	if !ok {
		that2, ok := that.(AdjustNamespaceEnvelope)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NamespaceId != that1.NamespaceId {
		return false
	}
	if this.TargetFrontendRps != that1.TargetFrontendRps {
		return false
	}
	return true
}
func (this *MigrateNamespaceAction) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MigrateNamespaceAction)
	if !ok {
		that2, ok := that.(MigrateNamespaceAction)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NamespaceId != that1.NamespaceId {
		return false
	}
	if this.SourceCellId != that1.SourceCellId {
		return false
	}
	if this.TargetCellId != that1.TargetCellId {
		return false
	}
	return true
}
func (this *CreateServerCellAction) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateServerCellAction)
	if !ok {
		that2, ok := that.(CreateServerCellAction)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Env != that1.Env {
		return false
	}
	if this.Cloud != that1.Cloud {
		return false
	}
	if this.Region != that1.Region {
		return false
	}
	return true
}
func (this *ScaleServerCellAction) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ScaleServerCellAction)
	if !ok {
		that2, ok := that.(ScaleServerCellAction)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CellId != that1.CellId {
		return false
	}
	if this.CurrentAstraCuCount != that1.CurrentAstraCuCount {
		return false
	}
	if this.TargetAstraCuCount != that1.TargetAstraCuCount {
		return false
	}
	return true
}
func (this *ActionResult) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ActionResult)
	if !ok {
		that2, ok := that.(ActionResult)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Value == nil {
		if this.Value != nil {
			return false
		}
	} else if this.Value == nil {
		return false
	} else if !this.Value.Equal(that1.Value) {
		return false
	}
	return true
}
func (this *ActionResult_CreateNamespace) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ActionResult_CreateNamespace)
	if !ok {
		that2, ok := that.(ActionResult_CreateNamespace)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CreateNamespace.Equal(that1.CreateNamespace) {
		return false
	}
	return true
}
func (this *ActionResult_MigrateNamespace) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ActionResult_MigrateNamespace)
	if !ok {
		that2, ok := that.(ActionResult_MigrateNamespace)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MigrateNamespace.Equal(that1.MigrateNamespace) {
		return false
	}
	return true
}
func (this *ActionResult_CreateServerCell) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ActionResult_CreateServerCell)
	if !ok {
		that2, ok := that.(ActionResult_CreateServerCell)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CreateServerCell.Equal(that1.CreateServerCell) {
		return false
	}
	return true
}
func (this *ActionResult_ScaleServerCell) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ActionResult_ScaleServerCell)
	if !ok {
		that2, ok := that.(ActionResult_ScaleServerCell)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ScaleServerCell.Equal(that1.ScaleServerCell) {
		return false
	}
	return true
}
func (this *CreateNamespaceActionResult) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateNamespaceActionResult)
	if !ok {
		that2, ok := that.(CreateNamespaceActionResult)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *MigrateNamespaceActionResult) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MigrateNamespaceActionResult)
	if !ok {
		that2, ok := that.(MigrateNamespaceActionResult)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *CreateServerCellActionResult) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateServerCellActionResult)
	if !ok {
		that2, ok := that.(CreateServerCellActionResult)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *ScaleServerCellActionResult) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ScaleServerCellActionResult)
	if !ok {
		that2, ok := that.(ScaleServerCellActionResult)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Workload) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&resourcemanager.Workload{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Env: "+fmt.Sprintf("%#v", this.Env)+",\n")
	if this.PlacementOverride != nil {
		s = append(s, "PlacementOverride: "+fmt.Sprintf("%#v", this.PlacementOverride)+",\n")
	}
	if this.Spec != nil {
		s = append(s, "Spec: "+fmt.Sprintf("%#v", this.Spec)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Workload_Namespace) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&resourcemanager.Workload_Namespace{` +
		`Namespace:` + fmt.Sprintf("%#v", this.Namespace) + `}`}, ", ")
	return s
}
func (this *Namespace) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&resourcemanager.Namespace{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "AccountId: "+fmt.Sprintf("%#v", this.AccountId)+",\n")
	if this.Spec != nil {
		s = append(s, "Spec: "+fmt.Sprintf("%#v", this.Spec)+",\n")
	}
	if this.ForceOverwrite != nil {
		s = append(s, "ForceOverwrite: "+fmt.Sprintf("%#v", this.ForceOverwrite)+",\n")
	}
	s = append(s, "RequestId: "+fmt.Sprintf("%#v", this.RequestId)+",\n")
	if this.UserNamespacePermissions != nil {
		s = append(s, "UserNamespacePermissions: "+fmt.Sprintf("%#v", this.UserNamespacePermissions)+",\n")
	}
	if this.RegionalMetadata != nil {
		s = append(s, "RegionalMetadata: "+fmt.Sprintf("%#v", this.RegionalMetadata)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *InternalRegionalMetadata) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&resourcemanager.InternalRegionalMetadata{")
	s = append(s, "NamespaceNumber: "+fmt.Sprintf("%#v", this.NamespaceNumber)+",\n")
	s = append(s, "Tag: "+fmt.Sprintf("%#v", this.Tag)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Placement) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&resourcemanager.Placement{")
	s = append(s, "WorkloadId: "+fmt.Sprintf("%#v", this.WorkloadId)+",\n")
	s = append(s, "CellId: "+fmt.Sprintf("%#v", this.CellId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Action) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&resourcemanager.Action{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "DependencyActionIds: "+fmt.Sprintf("%#v", this.DependencyActionIds)+",\n")
	s = append(s, "Reason: "+fmt.Sprintf("%#v", this.Reason)+",\n")
	if this.Spec != nil {
		s = append(s, "Spec: "+fmt.Sprintf("%#v", this.Spec)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Action_CreateNamespace) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&resourcemanager.Action_CreateNamespace{` +
		`CreateNamespace:` + fmt.Sprintf("%#v", this.CreateNamespace) + `}`}, ", ")
	return s
}
func (this *Action_MigrateNamespace) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&resourcemanager.Action_MigrateNamespace{` +
		`MigrateNamespace:` + fmt.Sprintf("%#v", this.MigrateNamespace) + `}`}, ", ")
	return s
}
func (this *Action_AdjustNamespaceEnvelope) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&resourcemanager.Action_AdjustNamespaceEnvelope{` +
		`AdjustNamespaceEnvelope:` + fmt.Sprintf("%#v", this.AdjustNamespaceEnvelope) + `}`}, ", ")
	return s
}
func (this *Action_CreateServerCell) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&resourcemanager.Action_CreateServerCell{` +
		`CreateServerCell:` + fmt.Sprintf("%#v", this.CreateServerCell) + `}`}, ", ")
	return s
}
func (this *Action_ScaleServerCell) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&resourcemanager.Action_ScaleServerCell{` +
		`ScaleServerCell:` + fmt.Sprintf("%#v", this.ScaleServerCell) + `}`}, ", ")
	return s
}
func (this *ActionPlan) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&resourcemanager.ActionPlan{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	if this.Actions != nil {
		s = append(s, "Actions: "+fmt.Sprintf("%#v", this.Actions)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Proposal) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&resourcemanager.Proposal{")
	if this.ActionPlan != nil {
		s = append(s, "ActionPlan: "+fmt.Sprintf("%#v", this.ActionPlan)+",\n")
	}
	s = append(s, "Score: "+fmt.Sprintf("%#v", this.Score)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateNamespaceAction) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&resourcemanager.CreateNamespaceAction{")
	if this.Workload != nil {
		s = append(s, "Workload: "+fmt.Sprintf("%#v", this.Workload)+",\n")
	}
	if this.Placement != nil {
		s = append(s, "Placement: "+fmt.Sprintf("%#v", this.Placement)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AdjustNamespaceEnvelope) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&resourcemanager.AdjustNamespaceEnvelope{")
	s = append(s, "NamespaceId: "+fmt.Sprintf("%#v", this.NamespaceId)+",\n")
	s = append(s, "TargetFrontendRps: "+fmt.Sprintf("%#v", this.TargetFrontendRps)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MigrateNamespaceAction) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&resourcemanager.MigrateNamespaceAction{")
	s = append(s, "NamespaceId: "+fmt.Sprintf("%#v", this.NamespaceId)+",\n")
	s = append(s, "SourceCellId: "+fmt.Sprintf("%#v", this.SourceCellId)+",\n")
	s = append(s, "TargetCellId: "+fmt.Sprintf("%#v", this.TargetCellId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateServerCellAction) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&resourcemanager.CreateServerCellAction{")
	s = append(s, "Env: "+fmt.Sprintf("%#v", this.Env)+",\n")
	s = append(s, "Cloud: "+fmt.Sprintf("%#v", this.Cloud)+",\n")
	s = append(s, "Region: "+fmt.Sprintf("%#v", this.Region)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ScaleServerCellAction) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&resourcemanager.ScaleServerCellAction{")
	s = append(s, "CellId: "+fmt.Sprintf("%#v", this.CellId)+",\n")
	s = append(s, "CurrentAstraCuCount: "+fmt.Sprintf("%#v", this.CurrentAstraCuCount)+",\n")
	s = append(s, "TargetAstraCuCount: "+fmt.Sprintf("%#v", this.TargetAstraCuCount)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ActionResult) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&resourcemanager.ActionResult{")
	if this.Value != nil {
		s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ActionResult_CreateNamespace) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&resourcemanager.ActionResult_CreateNamespace{` +
		`CreateNamespace:` + fmt.Sprintf("%#v", this.CreateNamespace) + `}`}, ", ")
	return s
}
func (this *ActionResult_MigrateNamespace) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&resourcemanager.ActionResult_MigrateNamespace{` +
		`MigrateNamespace:` + fmt.Sprintf("%#v", this.MigrateNamespace) + `}`}, ", ")
	return s
}
func (this *ActionResult_CreateServerCell) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&resourcemanager.ActionResult_CreateServerCell{` +
		`CreateServerCell:` + fmt.Sprintf("%#v", this.CreateServerCell) + `}`}, ", ")
	return s
}
func (this *ActionResult_ScaleServerCell) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&resourcemanager.ActionResult_ScaleServerCell{` +
		`ScaleServerCell:` + fmt.Sprintf("%#v", this.ScaleServerCell) + `}`}, ", ")
	return s
}
func (this *CreateNamespaceActionResult) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&resourcemanager.CreateNamespaceActionResult{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MigrateNamespaceActionResult) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&resourcemanager.MigrateNamespaceActionResult{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateServerCellActionResult) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&resourcemanager.CreateServerCellActionResult{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ScaleServerCellActionResult) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&resourcemanager.ScaleServerCellActionResult{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringMessage(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Workload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Workload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Workload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Spec != nil {
		{
			size := m.Spec.Size()
			i -= size
			if _, err := m.Spec.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.PlacementOverride != nil {
		{
			size, err := m.PlacementOverride.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Env) > 0 {
		i -= len(m.Env)
		copy(dAtA[i:], m.Env)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Env)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Workload_Namespace) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Workload_Namespace) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Namespace != nil {
		{
			size, err := m.Namespace.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *Namespace) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Namespace) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Namespace) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RegionalMetadata != nil {
		{
			size, err := m.RegionalMetadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if len(m.UserNamespacePermissions) > 0 {
		for iNdEx := len(m.UserNamespacePermissions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UserNamespacePermissions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.RequestId) > 0 {
		i -= len(m.RequestId)
		copy(dAtA[i:], m.RequestId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.RequestId)))
		i--
		dAtA[i] = 0x3a
	}
	if m.ForceOverwrite != nil {
		{
			size, err := m.ForceOverwrite.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Spec != nil {
		{
			size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.AccountId) > 0 {
		i -= len(m.AccountId)
		copy(dAtA[i:], m.AccountId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.AccountId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InternalRegionalMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InternalRegionalMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InternalRegionalMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Tag) > 0 {
		i -= len(m.Tag)
		copy(dAtA[i:], m.Tag)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Tag)))
		i--
		dAtA[i] = 0x12
	}
	if m.NamespaceNumber != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.NamespaceNumber))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Placement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Placement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Placement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CellId) > 0 {
		i -= len(m.CellId)
		copy(dAtA[i:], m.CellId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.CellId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.WorkloadId) > 0 {
		i -= len(m.WorkloadId)
		copy(dAtA[i:], m.WorkloadId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.WorkloadId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Action) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Action) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Action) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Spec != nil {
		{
			size := m.Spec.Size()
			i -= size
			if _, err := m.Spec.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DependencyActionIds) > 0 {
		for iNdEx := len(m.DependencyActionIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DependencyActionIds[iNdEx])
			copy(dAtA[i:], m.DependencyActionIds[iNdEx])
			i = encodeVarintMessage(dAtA, i, uint64(len(m.DependencyActionIds[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Action_CreateNamespace) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Action_CreateNamespace) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CreateNamespace != nil {
		{
			size, err := m.CreateNamespace.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *Action_MigrateNamespace) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Action_MigrateNamespace) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MigrateNamespace != nil {
		{
			size, err := m.MigrateNamespace.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *Action_AdjustNamespaceEnvelope) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Action_AdjustNamespaceEnvelope) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AdjustNamespaceEnvelope != nil {
		{
			size, err := m.AdjustNamespaceEnvelope.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *Action_CreateServerCell) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Action_CreateServerCell) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CreateServerCell != nil {
		{
			size, err := m.CreateServerCell.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func (m *Action_ScaleServerCell) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Action_ScaleServerCell) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ScaleServerCell != nil {
		{
			size, err := m.ScaleServerCell.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *ActionPlan) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActionPlan) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActionPlan) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Actions) > 0 {
		for iNdEx := len(m.Actions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Actions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Proposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Proposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Proposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Score != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Score))))
		i--
		dAtA[i] = 0x11
	}
	if m.ActionPlan != nil {
		{
			size, err := m.ActionPlan.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateNamespaceAction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateNamespaceAction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateNamespaceAction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Placement != nil {
		{
			size, err := m.Placement.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Workload != nil {
		{
			size, err := m.Workload.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AdjustNamespaceEnvelope) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdjustNamespaceEnvelope) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdjustNamespaceEnvelope) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TargetFrontendRps != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.TargetFrontendRps))
		i--
		dAtA[i] = 0x10
	}
	if len(m.NamespaceId) > 0 {
		i -= len(m.NamespaceId)
		copy(dAtA[i:], m.NamespaceId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.NamespaceId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MigrateNamespaceAction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MigrateNamespaceAction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MigrateNamespaceAction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TargetCellId) > 0 {
		i -= len(m.TargetCellId)
		copy(dAtA[i:], m.TargetCellId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.TargetCellId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SourceCellId) > 0 {
		i -= len(m.SourceCellId)
		copy(dAtA[i:], m.SourceCellId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.SourceCellId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NamespaceId) > 0 {
		i -= len(m.NamespaceId)
		copy(dAtA[i:], m.NamespaceId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.NamespaceId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateServerCellAction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateServerCellAction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateServerCellAction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Region) > 0 {
		i -= len(m.Region)
		copy(dAtA[i:], m.Region)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Region)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Cloud) > 0 {
		i -= len(m.Cloud)
		copy(dAtA[i:], m.Cloud)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Cloud)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Env) > 0 {
		i -= len(m.Env)
		copy(dAtA[i:], m.Env)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Env)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ScaleServerCellAction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScaleServerCellAction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ScaleServerCellAction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TargetAstraCuCount != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.TargetAstraCuCount))
		i--
		dAtA[i] = 0x18
	}
	if m.CurrentAstraCuCount != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.CurrentAstraCuCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.CellId) > 0 {
		i -= len(m.CellId)
		copy(dAtA[i:], m.CellId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.CellId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ActionResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActionResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActionResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		{
			size := m.Value.Size()
			i -= size
			if _, err := m.Value.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ActionResult_CreateNamespace) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActionResult_CreateNamespace) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CreateNamespace != nil {
		{
			size, err := m.CreateNamespace.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *ActionResult_MigrateNamespace) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActionResult_MigrateNamespace) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MigrateNamespace != nil {
		{
			size, err := m.MigrateNamespace.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *ActionResult_CreateServerCell) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActionResult_CreateServerCell) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CreateServerCell != nil {
		{
			size, err := m.CreateServerCell.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func (m *ActionResult_ScaleServerCell) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActionResult_ScaleServerCell) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ScaleServerCell != nil {
		{
			size, err := m.ScaleServerCell.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *CreateNamespaceActionResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateNamespaceActionResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateNamespaceActionResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MigrateNamespaceActionResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MigrateNamespaceActionResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MigrateNamespaceActionResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *CreateServerCellActionResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateServerCellActionResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateServerCellActionResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ScaleServerCellActionResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScaleServerCellActionResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ScaleServerCellActionResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintMessage(dAtA []byte, offset int, v uint64) int {
	offset -= sovMessage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Workload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Env)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.PlacementOverride != nil {
		l = m.PlacementOverride.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Spec != nil {
		n += m.Spec.Size()
	}
	return n
}

func (m *Workload_Namespace) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Namespace != nil {
		l = m.Namespace.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *Namespace) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.AccountId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.ForceOverwrite != nil {
		l = m.ForceOverwrite.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.RequestId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if len(m.UserNamespacePermissions) > 0 {
		for _, e := range m.UserNamespacePermissions {
			l = e.Size()
			n += 1 + l + sovMessage(uint64(l))
		}
	}
	if m.RegionalMetadata != nil {
		l = m.RegionalMetadata.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *InternalRegionalMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NamespaceNumber != 0 {
		n += 1 + sovMessage(uint64(m.NamespaceNumber))
	}
	l = len(m.Tag)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *Placement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.WorkloadId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.CellId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *Action) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if len(m.DependencyActionIds) > 0 {
		for _, s := range m.DependencyActionIds {
			l = len(s)
			n += 1 + l + sovMessage(uint64(l))
		}
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Spec != nil {
		n += m.Spec.Size()
	}
	return n
}

func (m *Action_CreateNamespace) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreateNamespace != nil {
		l = m.CreateNamespace.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *Action_MigrateNamespace) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MigrateNamespace != nil {
		l = m.MigrateNamespace.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *Action_AdjustNamespaceEnvelope) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdjustNamespaceEnvelope != nil {
		l = m.AdjustNamespaceEnvelope.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *Action_CreateServerCell) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreateServerCell != nil {
		l = m.CreateServerCell.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *Action_ScaleServerCell) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ScaleServerCell != nil {
		l = m.ScaleServerCell.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *ActionPlan) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if len(m.Actions) > 0 {
		for _, e := range m.Actions {
			l = e.Size()
			n += 1 + l + sovMessage(uint64(l))
		}
	}
	return n
}

func (m *Proposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActionPlan != nil {
		l = m.ActionPlan.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Score != 0 {
		n += 9
	}
	return n
}

func (m *CreateNamespaceAction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Workload != nil {
		l = m.Workload.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Placement != nil {
		l = m.Placement.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *AdjustNamespaceEnvelope) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NamespaceId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.TargetFrontendRps != 0 {
		n += 1 + sovMessage(uint64(m.TargetFrontendRps))
	}
	return n
}

func (m *MigrateNamespaceAction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NamespaceId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.SourceCellId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.TargetCellId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *CreateServerCellAction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Env)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Cloud)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Region)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *ScaleServerCellAction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CellId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.CurrentAstraCuCount != 0 {
		n += 1 + sovMessage(uint64(m.CurrentAstraCuCount))
	}
	if m.TargetAstraCuCount != 0 {
		n += 1 + sovMessage(uint64(m.TargetAstraCuCount))
	}
	return n
}

func (m *ActionResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != nil {
		n += m.Value.Size()
	}
	return n
}

func (m *ActionResult_CreateNamespace) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreateNamespace != nil {
		l = m.CreateNamespace.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *ActionResult_MigrateNamespace) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MigrateNamespace != nil {
		l = m.MigrateNamespace.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *ActionResult_CreateServerCell) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreateServerCell != nil {
		l = m.CreateServerCell.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *ActionResult_ScaleServerCell) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ScaleServerCell != nil {
		l = m.ScaleServerCell.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *CreateNamespaceActionResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MigrateNamespaceActionResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *CreateServerCellActionResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ScaleServerCellActionResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovMessage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMessage(x uint64) (n int) {
	return sovMessage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Workload) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Workload{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Env:` + fmt.Sprintf("%v", this.Env) + `,`,
		`PlacementOverride:` + strings.Replace(this.PlacementOverride.String(), "Placement", "Placement", 1) + `,`,
		`Spec:` + fmt.Sprintf("%v", this.Spec) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Workload_Namespace) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Workload_Namespace{`,
		`Namespace:` + strings.Replace(fmt.Sprintf("%v", this.Namespace), "Namespace", "Namespace", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Namespace) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForUserNamespacePermissions := "[]*UserNamespacePermissions{"
	for _, f := range this.UserNamespacePermissions {
		repeatedStringForUserNamespacePermissions += strings.Replace(fmt.Sprintf("%v", f), "UserNamespacePermissions", "v11.UserNamespacePermissions", 1) + ","
	}
	repeatedStringForUserNamespacePermissions += "}"
	s := strings.Join([]string{`&Namespace{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`AccountId:` + fmt.Sprintf("%v", this.AccountId) + `,`,
		`Spec:` + strings.Replace(fmt.Sprintf("%v", this.Spec), "NamespaceSpec", "v1.NamespaceSpec", 1) + `,`,
		`ForceOverwrite:` + strings.Replace(fmt.Sprintf("%v", this.ForceOverwrite), "BoolValue", "types.BoolValue", 1) + `,`,
		`RequestId:` + fmt.Sprintf("%v", this.RequestId) + `,`,
		`UserNamespacePermissions:` + repeatedStringForUserNamespacePermissions + `,`,
		`RegionalMetadata:` + strings.Replace(this.RegionalMetadata.String(), "InternalRegionalMetadata", "InternalRegionalMetadata", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InternalRegionalMetadata) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InternalRegionalMetadata{`,
		`NamespaceNumber:` + fmt.Sprintf("%v", this.NamespaceNumber) + `,`,
		`Tag:` + fmt.Sprintf("%v", this.Tag) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Placement) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Placement{`,
		`WorkloadId:` + fmt.Sprintf("%v", this.WorkloadId) + `,`,
		`CellId:` + fmt.Sprintf("%v", this.CellId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Action) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Action{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`DependencyActionIds:` + fmt.Sprintf("%v", this.DependencyActionIds) + `,`,
		`Reason:` + fmt.Sprintf("%v", this.Reason) + `,`,
		`Spec:` + fmt.Sprintf("%v", this.Spec) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Action_CreateNamespace) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Action_CreateNamespace{`,
		`CreateNamespace:` + strings.Replace(fmt.Sprintf("%v", this.CreateNamespace), "CreateNamespaceAction", "CreateNamespaceAction", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Action_MigrateNamespace) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Action_MigrateNamespace{`,
		`MigrateNamespace:` + strings.Replace(fmt.Sprintf("%v", this.MigrateNamespace), "MigrateNamespaceAction", "MigrateNamespaceAction", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Action_AdjustNamespaceEnvelope) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Action_AdjustNamespaceEnvelope{`,
		`AdjustNamespaceEnvelope:` + strings.Replace(fmt.Sprintf("%v", this.AdjustNamespaceEnvelope), "AdjustNamespaceEnvelope", "AdjustNamespaceEnvelope", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Action_CreateServerCell) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Action_CreateServerCell{`,
		`CreateServerCell:` + strings.Replace(fmt.Sprintf("%v", this.CreateServerCell), "CreateServerCellAction", "CreateServerCellAction", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Action_ScaleServerCell) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Action_ScaleServerCell{`,
		`ScaleServerCell:` + strings.Replace(fmt.Sprintf("%v", this.ScaleServerCell), "ScaleServerCellAction", "ScaleServerCellAction", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ActionPlan) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForActions := "[]*Action{"
	for _, f := range this.Actions {
		repeatedStringForActions += strings.Replace(f.String(), "Action", "Action", 1) + ","
	}
	repeatedStringForActions += "}"
	s := strings.Join([]string{`&ActionPlan{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Actions:` + repeatedStringForActions + `,`,
		`}`,
	}, "")
	return s
}
func (this *Proposal) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Proposal{`,
		`ActionPlan:` + strings.Replace(this.ActionPlan.String(), "ActionPlan", "ActionPlan", 1) + `,`,
		`Score:` + fmt.Sprintf("%v", this.Score) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateNamespaceAction) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateNamespaceAction{`,
		`Workload:` + strings.Replace(this.Workload.String(), "Workload", "Workload", 1) + `,`,
		`Placement:` + strings.Replace(this.Placement.String(), "Placement", "Placement", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AdjustNamespaceEnvelope) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AdjustNamespaceEnvelope{`,
		`NamespaceId:` + fmt.Sprintf("%v", this.NamespaceId) + `,`,
		`TargetFrontendRps:` + fmt.Sprintf("%v", this.TargetFrontendRps) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MigrateNamespaceAction) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MigrateNamespaceAction{`,
		`NamespaceId:` + fmt.Sprintf("%v", this.NamespaceId) + `,`,
		`SourceCellId:` + fmt.Sprintf("%v", this.SourceCellId) + `,`,
		`TargetCellId:` + fmt.Sprintf("%v", this.TargetCellId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateServerCellAction) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateServerCellAction{`,
		`Env:` + fmt.Sprintf("%v", this.Env) + `,`,
		`Cloud:` + fmt.Sprintf("%v", this.Cloud) + `,`,
		`Region:` + fmt.Sprintf("%v", this.Region) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ScaleServerCellAction) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ScaleServerCellAction{`,
		`CellId:` + fmt.Sprintf("%v", this.CellId) + `,`,
		`CurrentAstraCuCount:` + fmt.Sprintf("%v", this.CurrentAstraCuCount) + `,`,
		`TargetAstraCuCount:` + fmt.Sprintf("%v", this.TargetAstraCuCount) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ActionResult) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ActionResult{`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ActionResult_CreateNamespace) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ActionResult_CreateNamespace{`,
		`CreateNamespace:` + strings.Replace(fmt.Sprintf("%v", this.CreateNamespace), "CreateNamespaceActionResult", "CreateNamespaceActionResult", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ActionResult_MigrateNamespace) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ActionResult_MigrateNamespace{`,
		`MigrateNamespace:` + strings.Replace(fmt.Sprintf("%v", this.MigrateNamespace), "MigrateNamespaceActionResult", "MigrateNamespaceActionResult", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ActionResult_CreateServerCell) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ActionResult_CreateServerCell{`,
		`CreateServerCell:` + strings.Replace(fmt.Sprintf("%v", this.CreateServerCell), "CreateServerCellActionResult", "CreateServerCellActionResult", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ActionResult_ScaleServerCell) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ActionResult_ScaleServerCell{`,
		`ScaleServerCell:` + strings.Replace(fmt.Sprintf("%v", this.ScaleServerCell), "ScaleServerCellActionResult", "ScaleServerCellActionResult", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateNamespaceActionResult) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateNamespaceActionResult{`,
		`}`,
	}, "")
	return s
}
func (this *MigrateNamespaceActionResult) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MigrateNamespaceActionResult{`,
		`}`,
	}, "")
	return s
}
func (this *CreateServerCellActionResult) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateServerCellActionResult{`,
		`}`,
	}, "")
	return s
}
func (this *ScaleServerCellActionResult) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ScaleServerCellActionResult{`,
		`}`,
	}, "")
	return s
}
func valueToStringMessage(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Workload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Workload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Workload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Env", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Env = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlacementOverride", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PlacementOverride == nil {
				m.PlacementOverride = &Placement{}
			}
			if err := m.PlacementOverride.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 100:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Namespace{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Spec = &Workload_Namespace{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Namespace) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Namespace: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Namespace: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &v1.NamespaceSpec{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForceOverwrite", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ForceOverwrite == nil {
				m.ForceOverwrite = &types.BoolValue{}
			}
			if err := m.ForceOverwrite.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserNamespacePermissions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserNamespacePermissions = append(m.UserNamespacePermissions, &v11.UserNamespacePermissions{})
			if err := m.UserNamespacePermissions[len(m.UserNamespacePermissions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegionalMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RegionalMetadata == nil {
				m.RegionalMetadata = &InternalRegionalMetadata{}
			}
			if err := m.RegionalMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InternalRegionalMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InternalRegionalMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InternalRegionalMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NamespaceNumber", wireType)
			}
			m.NamespaceNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NamespaceNumber |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Placement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Placement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Placement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkloadId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkloadId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CellId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CellId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Action) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Action: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Action: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DependencyActionIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DependencyActionIds = append(m.DependencyActionIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 100:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateNamespace", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CreateNamespaceAction{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Spec = &Action_CreateNamespace{v}
			iNdEx = postIndex
		case 101:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MigrateNamespace", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MigrateNamespaceAction{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Spec = &Action_MigrateNamespace{v}
			iNdEx = postIndex
		case 102:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdjustNamespaceEnvelope", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AdjustNamespaceEnvelope{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Spec = &Action_AdjustNamespaceEnvelope{v}
			iNdEx = postIndex
		case 200:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateServerCell", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CreateServerCellAction{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Spec = &Action_CreateServerCell{v}
			iNdEx = postIndex
		case 201:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScaleServerCell", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ScaleServerCellAction{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Spec = &Action_ScaleServerCell{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActionPlan) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActionPlan: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActionPlan: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Actions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Actions = append(m.Actions, &Action{})
			if err := m.Actions[len(m.Actions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Proposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Proposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Proposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionPlan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ActionPlan == nil {
				m.ActionPlan = &ActionPlan{}
			}
			if err := m.ActionPlan.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Score = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateNamespaceAction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateNamespaceAction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateNamespaceAction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Workload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Workload == nil {
				m.Workload = &Workload{}
			}
			if err := m.Workload.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Placement", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Placement == nil {
				m.Placement = &Placement{}
			}
			if err := m.Placement.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdjustNamespaceEnvelope) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdjustNamespaceEnvelope: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdjustNamespaceEnvelope: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NamespaceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NamespaceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetFrontendRps", wireType)
			}
			m.TargetFrontendRps = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetFrontendRps |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MigrateNamespaceAction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MigrateNamespaceAction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MigrateNamespaceAction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NamespaceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NamespaceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceCellId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceCellId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetCellId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetCellId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateServerCellAction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateServerCellAction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateServerCellAction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Env", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Env = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cloud", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cloud = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Region = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ScaleServerCellAction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScaleServerCellAction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScaleServerCellAction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CellId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CellId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentAstraCuCount", wireType)
			}
			m.CurrentAstraCuCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentAstraCuCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetAstraCuCount", wireType)
			}
			m.TargetAstraCuCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetAstraCuCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActionResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActionResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActionResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 100:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateNamespace", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CreateNamespaceActionResult{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &ActionResult_CreateNamespace{v}
			iNdEx = postIndex
		case 101:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MigrateNamespace", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MigrateNamespaceActionResult{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &ActionResult_MigrateNamespace{v}
			iNdEx = postIndex
		case 200:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateServerCell", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CreateServerCellActionResult{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &ActionResult_CreateServerCell{v}
			iNdEx = postIndex
		case 201:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScaleServerCell", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ScaleServerCellActionResult{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &ActionResult_ScaleServerCell{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateNamespaceActionResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateNamespaceActionResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateNamespaceActionResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MigrateNamespaceActionResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MigrateNamespaceActionResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MigrateNamespaceActionResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateServerCellActionResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateServerCellActionResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateServerCellActionResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ScaleServerCellActionResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScaleServerCellActionResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScaleServerCellActionResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMessage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMessage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMessage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMessage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMessage = fmt.Errorf("proto: unexpected end of group")
)
