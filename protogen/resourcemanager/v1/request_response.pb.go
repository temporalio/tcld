// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: resourcemanager/v1/request_response.proto

package resourcemanager

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Request of Executor::Execute.
type ExecuteRequest struct {
	// Action plan to execute.
	ActionPlan *ActionPlan `protobuf:"bytes,1,opt,name=action_plan,json=actionPlan,proto3" json:"action_plan,omitempty"`
}

func (m *ExecuteRequest) Reset()      { *m = ExecuteRequest{} }
func (*ExecuteRequest) ProtoMessage() {}
func (*ExecuteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9962de9a22a3f24f, []int{0}
}
func (m *ExecuteRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExecuteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExecuteRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExecuteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecuteRequest.Merge(m, src)
}
func (m *ExecuteRequest) XXX_Size() int {
	return m.Size()
}
func (m *ExecuteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecuteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ExecuteRequest proto.InternalMessageInfo

func (m *ExecuteRequest) GetActionPlan() *ActionPlan {
	if m != nil {
		return m.ActionPlan
	}
	return nil
}

// Response of Executor::Execute.
type ExecuteResponse struct {
	// Map from action id to its execution result.
	ActionIdToResult map[string]*ActionResult `protobuf:"bytes,1,rep,name=action_id_to_result,json=actionIdToResult,proto3" json:"action_id_to_result,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *ExecuteResponse) Reset()      { *m = ExecuteResponse{} }
func (*ExecuteResponse) ProtoMessage() {}
func (*ExecuteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9962de9a22a3f24f, []int{1}
}
func (m *ExecuteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExecuteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExecuteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExecuteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecuteResponse.Merge(m, src)
}
func (m *ExecuteResponse) XXX_Size() int {
	return m.Size()
}
func (m *ExecuteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecuteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ExecuteResponse proto.InternalMessageInfo

func (m *ExecuteResponse) GetActionIdToResult() map[string]*ActionResult {
	if m != nil {
		return m.ActionIdToResult
	}
	return nil
}

// Workflow output for planner's Run().
// NOTE: we have to define it in proto because it contains Proposal that uses proto one-of.
type PlannerRunOutput struct {
	Proposal *Proposal `protobuf:"bytes,1,opt,name=proposal,proto3" json:"proposal,omitempty"`
}

func (m *PlannerRunOutput) Reset()      { *m = PlannerRunOutput{} }
func (*PlannerRunOutput) ProtoMessage() {}
func (*PlannerRunOutput) Descriptor() ([]byte, []int) {
	return fileDescriptor_9962de9a22a3f24f, []int{2}
}
func (m *PlannerRunOutput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlannerRunOutput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlannerRunOutput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlannerRunOutput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlannerRunOutput.Merge(m, src)
}
func (m *PlannerRunOutput) XXX_Size() int {
	return m.Size()
}
func (m *PlannerRunOutput) XXX_DiscardUnknown() {
	xxx_messageInfo_PlannerRunOutput.DiscardUnknown(m)
}

var xxx_messageInfo_PlannerRunOutput proto.InternalMessageInfo

func (m *PlannerRunOutput) GetProposal() *Proposal {
	if m != nil {
		return m.Proposal
	}
	return nil
}

// Activity output for Plan().
// NOTE: we have to define it in proto because it contains Proposal that uses proto one-of.
type PlanOutput struct {
	Proposal *Proposal `protobuf:"bytes,1,opt,name=proposal,proto3" json:"proposal,omitempty"`
}

func (m *PlanOutput) Reset()      { *m = PlanOutput{} }
func (*PlanOutput) ProtoMessage() {}
func (*PlanOutput) Descriptor() ([]byte, []int) {
	return fileDescriptor_9962de9a22a3f24f, []int{3}
}
func (m *PlanOutput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlanOutput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlanOutput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlanOutput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlanOutput.Merge(m, src)
}
func (m *PlanOutput) XXX_Size() int {
	return m.Size()
}
func (m *PlanOutput) XXX_DiscardUnknown() {
	xxx_messageInfo_PlanOutput.DiscardUnknown(m)
}

var xxx_messageInfo_PlanOutput proto.InternalMessageInfo

func (m *PlanOutput) GetProposal() *Proposal {
	if m != nil {
		return m.Proposal
	}
	return nil
}

// Activity output wrapping an action.
// NOTE: we have to define it in proto because it contains Action that uses proto one-of.
type ActionOutput struct {
	Action *Action `protobuf:"bytes,1,opt,name=action,proto3" json:"action,omitempty"`
}

func (m *ActionOutput) Reset()      { *m = ActionOutput{} }
func (*ActionOutput) ProtoMessage() {}
func (*ActionOutput) Descriptor() ([]byte, []int) {
	return fileDescriptor_9962de9a22a3f24f, []int{4}
}
func (m *ActionOutput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActionOutput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActionOutput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActionOutput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActionOutput.Merge(m, src)
}
func (m *ActionOutput) XXX_Size() int {
	return m.Size()
}
func (m *ActionOutput) XXX_DiscardUnknown() {
	xxx_messageInfo_ActionOutput.DiscardUnknown(m)
}

var xxx_messageInfo_ActionOutput proto.InternalMessageInfo

func (m *ActionOutput) GetAction() *Action {
	if m != nil {
		return m.Action
	}
	return nil
}

// Activity input for SendProposalSlackMessage().
// NOTE: we have to define it in proto because it contains Proposal that uses proto one-of.
type SendProposalSlackMessageInput struct {
	Proposal *Proposal `protobuf:"bytes,1,opt,name=proposal,proto3" json:"proposal,omitempty"`
}

func (m *SendProposalSlackMessageInput) Reset()      { *m = SendProposalSlackMessageInput{} }
func (*SendProposalSlackMessageInput) ProtoMessage() {}
func (*SendProposalSlackMessageInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_9962de9a22a3f24f, []int{5}
}
func (m *SendProposalSlackMessageInput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SendProposalSlackMessageInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SendProposalSlackMessageInput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SendProposalSlackMessageInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendProposalSlackMessageInput.Merge(m, src)
}
func (m *SendProposalSlackMessageInput) XXX_Size() int {
	return m.Size()
}
func (m *SendProposalSlackMessageInput) XXX_DiscardUnknown() {
	xxx_messageInfo_SendProposalSlackMessageInput.DiscardUnknown(m)
}

var xxx_messageInfo_SendProposalSlackMessageInput proto.InternalMessageInfo

func (m *SendProposalSlackMessageInput) GetProposal() *Proposal {
	if m != nil {
		return m.Proposal
	}
	return nil
}

func init() {
	proto.RegisterType((*ExecuteRequest)(nil), "resourcemanager.v1.ExecuteRequest")
	proto.RegisterType((*ExecuteResponse)(nil), "resourcemanager.v1.ExecuteResponse")
	proto.RegisterMapType((map[string]*ActionResult)(nil), "resourcemanager.v1.ExecuteResponse.ActionIdToResultEntry")
	proto.RegisterType((*PlannerRunOutput)(nil), "resourcemanager.v1.PlannerRunOutput")
	proto.RegisterType((*PlanOutput)(nil), "resourcemanager.v1.PlanOutput")
	proto.RegisterType((*ActionOutput)(nil), "resourcemanager.v1.ActionOutput")
	proto.RegisterType((*SendProposalSlackMessageInput)(nil), "resourcemanager.v1.SendProposalSlackMessageInput")
}

func init() {
	proto.RegisterFile("resourcemanager/v1/request_response.proto", fileDescriptor_9962de9a22a3f24f)
}

var fileDescriptor_9962de9a22a3f24f = []byte{
	// 405 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x92, 0xc1, 0xaa, 0x13, 0x31,
	0x14, 0x86, 0x27, 0xf7, 0xe2, 0x45, 0x4f, 0x45, 0xcb, 0x88, 0x50, 0x8a, 0x86, 0x61, 0x56, 0xd7,
	0xcd, 0x94, 0x56, 0x90, 0xaa, 0x0b, 0xb1, 0x50, 0xa1, 0xa0, 0x58, 0x53, 0x37, 0xba, 0x29, 0x71,
	0x26, 0xd4, 0xd2, 0x34, 0x19, 0x33, 0x49, 0xb1, 0x3b, 0x1f, 0xc1, 0xc7, 0xf0, 0x51, 0x5c, 0x76,
	0xd9, 0xa5, 0x4d, 0x37, 0x2e, 0xfb, 0x08, 0x32, 0x33, 0xb1, 0x8b, 0xe9, 0xe8, 0xa6, 0xbb, 0x10,
	0xbe, 0xf3, 0xe5, 0xff, 0xc3, 0x81, 0x47, 0x8a, 0x65, 0xd2, 0xa8, 0x98, 0x2d, 0xa9, 0xa0, 0x33,
	0xa6, 0x3a, 0xab, 0x6e, 0x47, 0xb1, 0x2f, 0x86, 0x65, 0x7a, 0xaa, 0x58, 0x96, 0x4a, 0x91, 0xb1,
	0x28, 0x55, 0x52, 0x4b, 0xdf, 0xaf, 0xa0, 0xd1, 0xaa, 0xdb, 0x0e, 0x6a, 0xc6, 0x97, 0x2c, 0xcb,
	0xe8, 0xcc, 0x4d, 0x85, 0xef, 0xe0, 0xce, 0xf0, 0x2b, 0x8b, 0x8d, 0x66, 0xa4, 0xd4, 0xfa, 0x2f,
	0xa0, 0x41, 0x63, 0x3d, 0x97, 0x62, 0x9a, 0x72, 0x2a, 0x5a, 0x28, 0x40, 0xd7, 0x8d, 0x1e, 0x8e,
	0x4e, 0xed, 0xd1, 0xcb, 0x02, 0x1b, 0x73, 0x2a, 0x08, 0xd0, 0xe3, 0x39, 0xb4, 0x08, 0xee, 0x1e,
	0x9d, 0x65, 0x44, 0xff, 0x33, 0xdc, 0x73, 0xd2, 0x79, 0x32, 0xd5, 0x32, 0xcf, 0x6e, 0xb8, 0x6e,
	0xa1, 0xe0, 0xf2, 0xba, 0xd1, 0x7b, 0x5a, 0x27, 0xaf, 0x18, 0xdc, 0x63, 0xa3, 0xe4, 0xbd, 0x24,
	0xc5, 0xec, 0x50, 0x68, 0xb5, 0x26, 0x4d, 0x5a, 0xb9, 0x6e, 0x33, 0xb8, 0x5f, 0x8b, 0xfa, 0x4d,
	0xb8, 0x5c, 0xb0, 0x75, 0xd1, 0xe7, 0x16, 0xc9, 0x8f, 0xfe, 0x13, 0xb8, 0xb1, 0xa2, 0xdc, 0xb0,
	0xd6, 0x45, 0xd1, 0x31, 0xf8, 0x77, 0xc7, 0xd2, 0x43, 0x4a, 0xfc, 0xd9, 0x45, 0x1f, 0x85, 0xaf,
	0xa1, 0x99, 0x97, 0x15, 0x4c, 0x11, 0x23, 0xde, 0x1a, 0x9d, 0x1a, 0xed, 0xf7, 0xe1, 0x66, 0xaa,
	0x64, 0x2a, 0x33, 0xca, 0xdd, 0xb7, 0x3d, 0xa8, 0x53, 0x8e, 0x1d, 0x43, 0x8e, 0x74, 0xf8, 0x0a,
	0x20, 0xb7, 0x9d, 0xed, 0x19, 0xc0, 0xed, 0x32, 0xb0, 0x33, 0xf5, 0xe0, 0xaa, 0xfc, 0x20, 0xe7,
	0x69, 0xff, 0xa7, 0xa2, 0x23, 0xc3, 0x0f, 0xf0, 0x70, 0xc2, 0x44, 0xf2, 0xd7, 0x3e, 0xe1, 0x34,
	0x5e, 0xbc, 0x29, 0x77, 0x66, 0x24, 0xce, 0x8a, 0x37, 0x48, 0x36, 0x3b, 0xec, 0x6d, 0x77, 0xd8,
	0x3b, 0xec, 0x30, 0xfa, 0x66, 0x31, 0xfa, 0x61, 0x31, 0xfa, 0x69, 0x31, 0xda, 0x58, 0x8c, 0x7e,
	0x59, 0x8c, 0x7e, 0x5b, 0xec, 0x1d, 0x2c, 0x46, 0xdf, 0xf7, 0xd8, 0xdb, 0xec, 0xb1, 0xb7, 0xdd,
	0x63, 0xef, 0x63, 0xa4, 0x97, 0xa9, 0xe2, 0x51, 0xcc, 0xa5, 0x49, 0x3a, 0xa7, 0x0b, 0xfd, 0xbc,
	0x72, 0xf5, 0xe9, 0xaa, 0xd8, 0xec, 0xc7, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x0e, 0xb5, 0x77,
	0x4d, 0x3c, 0x03, 0x00, 0x00,
}

func (this *ExecuteRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExecuteRequest)
	if !ok {
		that2, ok := that.(ExecuteRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActionPlan.Equal(that1.ActionPlan) {
		return false
	}
	return true
}
func (this *ExecuteResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExecuteResponse)
	if !ok {
		that2, ok := that.(ExecuteResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.ActionIdToResult) != len(that1.ActionIdToResult) {
		return false
	}
	for i := range this.ActionIdToResult {
		if !this.ActionIdToResult[i].Equal(that1.ActionIdToResult[i]) {
			return false
		}
	}
	return true
}
func (this *PlannerRunOutput) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PlannerRunOutput)
	if !ok {
		that2, ok := that.(PlannerRunOutput)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Proposal.Equal(that1.Proposal) {
		return false
	}
	return true
}
func (this *PlanOutput) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PlanOutput)
	if !ok {
		that2, ok := that.(PlanOutput)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Proposal.Equal(that1.Proposal) {
		return false
	}
	return true
}
func (this *ActionOutput) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ActionOutput)
	if !ok {
		that2, ok := that.(ActionOutput)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Action.Equal(that1.Action) {
		return false
	}
	return true
}
func (this *SendProposalSlackMessageInput) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SendProposalSlackMessageInput)
	if !ok {
		that2, ok := that.(SendProposalSlackMessageInput)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Proposal.Equal(that1.Proposal) {
		return false
	}
	return true
}
func (this *ExecuteRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&resourcemanager.ExecuteRequest{")
	if this.ActionPlan != nil {
		s = append(s, "ActionPlan: "+fmt.Sprintf("%#v", this.ActionPlan)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ExecuteResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&resourcemanager.ExecuteResponse{")
	keysForActionIdToResult := make([]string, 0, len(this.ActionIdToResult))
	for k, _ := range this.ActionIdToResult {
		keysForActionIdToResult = append(keysForActionIdToResult, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForActionIdToResult)
	mapStringForActionIdToResult := "map[string]*ActionResult{"
	for _, k := range keysForActionIdToResult {
		mapStringForActionIdToResult += fmt.Sprintf("%#v: %#v,", k, this.ActionIdToResult[k])
	}
	mapStringForActionIdToResult += "}"
	if this.ActionIdToResult != nil {
		s = append(s, "ActionIdToResult: "+mapStringForActionIdToResult+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PlannerRunOutput) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&resourcemanager.PlannerRunOutput{")
	if this.Proposal != nil {
		s = append(s, "Proposal: "+fmt.Sprintf("%#v", this.Proposal)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PlanOutput) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&resourcemanager.PlanOutput{")
	if this.Proposal != nil {
		s = append(s, "Proposal: "+fmt.Sprintf("%#v", this.Proposal)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ActionOutput) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&resourcemanager.ActionOutput{")
	if this.Action != nil {
		s = append(s, "Action: "+fmt.Sprintf("%#v", this.Action)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SendProposalSlackMessageInput) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&resourcemanager.SendProposalSlackMessageInput{")
	if this.Proposal != nil {
		s = append(s, "Proposal: "+fmt.Sprintf("%#v", this.Proposal)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringRequestResponse(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *ExecuteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecuteRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExecuteRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ActionPlan != nil {
		{
			size, err := m.ActionPlan.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ExecuteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecuteResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExecuteResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ActionIdToResult) > 0 {
		for k := range m.ActionIdToResult {
			v := m.ActionIdToResult[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintRequestResponse(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintRequestResponse(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintRequestResponse(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PlannerRunOutput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlannerRunOutput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlannerRunOutput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Proposal != nil {
		{
			size, err := m.Proposal.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PlanOutput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlanOutput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlanOutput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Proposal != nil {
		{
			size, err := m.Proposal.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ActionOutput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActionOutput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActionOutput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Action != nil {
		{
			size, err := m.Action.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SendProposalSlackMessageInput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendProposalSlackMessageInput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SendProposalSlackMessageInput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Proposal != nil {
		{
			size, err := m.Proposal.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRequestResponse(dAtA []byte, offset int, v uint64) int {
	offset -= sovRequestResponse(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ExecuteRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActionPlan != nil {
		l = m.ActionPlan.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *ExecuteResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ActionIdToResult) > 0 {
		for k, v := range m.ActionIdToResult {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovRequestResponse(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovRequestResponse(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovRequestResponse(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *PlannerRunOutput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Proposal != nil {
		l = m.Proposal.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *PlanOutput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Proposal != nil {
		l = m.Proposal.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *ActionOutput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Action != nil {
		l = m.Action.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *SendProposalSlackMessageInput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Proposal != nil {
		l = m.Proposal.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func sovRequestResponse(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRequestResponse(x uint64) (n int) {
	return sovRequestResponse(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ExecuteRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ExecuteRequest{`,
		`ActionPlan:` + strings.Replace(fmt.Sprintf("%v", this.ActionPlan), "ActionPlan", "ActionPlan", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ExecuteResponse) String() string {
	if this == nil {
		return "nil"
	}
	keysForActionIdToResult := make([]string, 0, len(this.ActionIdToResult))
	for k, _ := range this.ActionIdToResult {
		keysForActionIdToResult = append(keysForActionIdToResult, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForActionIdToResult)
	mapStringForActionIdToResult := "map[string]*ActionResult{"
	for _, k := range keysForActionIdToResult {
		mapStringForActionIdToResult += fmt.Sprintf("%v: %v,", k, this.ActionIdToResult[k])
	}
	mapStringForActionIdToResult += "}"
	s := strings.Join([]string{`&ExecuteResponse{`,
		`ActionIdToResult:` + mapStringForActionIdToResult + `,`,
		`}`,
	}, "")
	return s
}
func (this *PlannerRunOutput) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PlannerRunOutput{`,
		`Proposal:` + strings.Replace(fmt.Sprintf("%v", this.Proposal), "Proposal", "Proposal", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PlanOutput) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PlanOutput{`,
		`Proposal:` + strings.Replace(fmt.Sprintf("%v", this.Proposal), "Proposal", "Proposal", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ActionOutput) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ActionOutput{`,
		`Action:` + strings.Replace(fmt.Sprintf("%v", this.Action), "Action", "Action", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SendProposalSlackMessageInput) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SendProposalSlackMessageInput{`,
		`Proposal:` + strings.Replace(fmt.Sprintf("%v", this.Proposal), "Proposal", "Proposal", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringRequestResponse(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ExecuteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecuteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecuteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionPlan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ActionPlan == nil {
				m.ActionPlan = &ActionPlan{}
			}
			if err := m.ActionPlan.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExecuteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecuteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecuteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionIdToResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ActionIdToResult == nil {
				m.ActionIdToResult = make(map[string]*ActionResult)
			}
			var mapkey string
			var mapvalue *ActionResult
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRequestResponse
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRequestResponse
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthRequestResponse
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthRequestResponse
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRequestResponse
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthRequestResponse
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthRequestResponse
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &ActionResult{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipRequestResponse(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthRequestResponse
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ActionIdToResult[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlannerRunOutput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlannerRunOutput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlannerRunOutput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Proposal == nil {
				m.Proposal = &Proposal{}
			}
			if err := m.Proposal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlanOutput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlanOutput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlanOutput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Proposal == nil {
				m.Proposal = &Proposal{}
			}
			if err := m.Proposal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActionOutput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActionOutput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActionOutput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Action == nil {
				m.Action = &Action{}
			}
			if err := m.Action.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SendProposalSlackMessageInput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendProposalSlackMessageInput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendProposalSlackMessageInput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Proposal == nil {
				m.Proposal = &Proposal{}
			}
			if err := m.Proposal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRequestResponse(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRequestResponse
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRequestResponse
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRequestResponse
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRequestResponse        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRequestResponse          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRequestResponse = fmt.Errorf("proto: unexpected end of group")
)
